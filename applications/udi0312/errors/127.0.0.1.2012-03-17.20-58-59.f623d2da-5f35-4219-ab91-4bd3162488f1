(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'user_id'"
p3
sS'layer'
p4
S'/Users/udimilo/Documents/web2py/applications/udi0312/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\nfrom readability import Readability\nimport feedparser\nimport urlparse\nimport re\n\ndef index():\n    articles = db().select(db.article.ALL, orderby=db.article.created_on)\n    categories = db().select(db.category.ALL, orderby=db.category.name)\n    boards = db(db.board.user_id==auth.user.id).select() if auth.user else []\n    return dict(items=articles, categories=categories, boards=boards)\n\ndef add_board():\n    name = request.vars.boardName\n    if re.match(\'(^[\\w\\s.-]+$)\', name): #sanitize the name\n        category = db(db.category.name==request.vars.category).select().first()\n        board = db.board.insert(user_id=auth.user.id, category_id=category.id, name=request.vars.boardName)\n        return board.id\n\n    return \'please use only alpha numeric characters\'\n    \ndef add_article():\n    board = db(db.board.name==request.vars.board).select().first()\n    if board is None:\n        return \'You must choose a board first\'\n        \n    url = request.vars.url\n    article = db(db.article.url == url).select().first()\n    if article is None:\n        r = Readability()\n        json = r.content(url)\n        article = db.article.insert(\n            height=300,\n            url=json[\'url\'],\n            readability_url=json[\'short_url\'],\n            title=json[\'title\'],\n            content=json[\'content\'],\n            domain=json[\'domain\'],\n            author=json[\'author\'],\n            excerpt=json[\'excerpt\'],\n            word_count=json[\'word_count\'],\n            total_pages=json[\'total_pages\'],\n            date_published=json[\'date_published\'],\n            next_page_id=json[\'next_page_id\'],\n            rendered_pages=json[\'rendered_pages\'],            \n        )\n    \n    pin = db((db.pin.board_id == board.id) & (db.pin.article_id == article.id)).select().first()\n    if pin is None:\n        pin = db.pin.insert(board_id=board.id, article_id=article.id)\n    \n    return pin.id\n    \ndef follow_user():\n    follower = auth.user\n    followee = db.auth_user(request.vars.followee)\n    if followee is None:\n        return \'no followee\'\n        \n    rel = db((db.user_user.follower_id == follower.id) & (db.user_user.followee_id == followee.id)).select().first()\n\n    if rel is None:\n        rel = db.user_user.insert(follower_id = follower.id, followee_id = followee.id)\n        return \'added\' #http code\n        \n    return rel #http code\n\ndef unfollow_user():\n    follower = auth.user\n    followee = db.auth_user(request.vars.followee)\n    if followee is None:\n        return \'no followee\'\n        \n    rel = db((db.user_user.follower_id == follower.id) & (db.user_user.followee_id == followee.id)).select().first()\n    if rel is None:\n        return \'no rel\'\n    \n    db.user_user.remove(id == rel.id)\n    return \'deleted\'\n\ndef test():\n    url = request.vars.url\n    feed = feedparser.parse(url)\n    c = 0\n    for item in feed[\'entries\']:\n        url = item.get(\'feedburner_origlink\')\n        if url is None:\n            url = item.get(\'link\')\n        \n        domain = urlparse.urlsplit(url).hostname\n        \n        date = item.get(\'updated\')\n        if date is None:\n            date=item.get(\'published\'),\n            \n        article = db.article.insert(\n            height=300,\n            author=item.get(\'author\'),\n            content=item.content[0].value.strip(),\n            url=url,\n            domain=domain,\n            date_published=date,\n            excerpt=item.get(\'summary\'),\n            title=item.get(\'title\'),\n            )\n    return feed\n                \ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\nresponse._vars=response._caller(index)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/users/udimilo/Documents/web2py/gluon/restricted.py", line 205, in restricted\n    exec ccode in environment\n  File "/Users/udimilo/Documents/web2py/applications/udi0312/controllers/default.py", line 169, in <module>\n  File "/users/udimilo/Documents/web2py/gluon/globals.py", line 173, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/udimilo/Documents/web2py/applications/udi0312/controllers/default.py", line 19, in index\n    boards = db(db.board.user_id==auth.user.id).select() if auth.user else []\n  File "/users/udimilo/Documents/web2py/gluon/dal.py", line 6774, in __getattr__\n    return self[key]\n  File "/users/udimilo/Documents/web2py/gluon/dal.py", line 6714, in __getitem__\n    return dict.__getitem__(self, str(key))\nKeyError: \'user_id\'\n'
p11
s.