(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'title'"
p3
sS'layer'
p4
S'/Users/udimilo/Documents/web2py/applications/udi0312/controllers/api.py'
p5
sS'code'
p6
S"# coding: utf8\nimport re\nimport time\nfrom readability import Readability\nimport feedparser\nimport urllib2\n\n@cache('a', 5)\ndef f():\n    return time.ctime()\n     \ndef create_article(data):\n    article = db(db.article.url == data.feedburner_origlink).select().first()\n    if article is None:\n        article = db.article.insert(\n            height=300,\n            url=data.feedburner_origlink,\n            title=data.title,\n            content=data.content[0].value,\n            domain=urllib2.Request(url=data.feedburner_origlink).get_host(),\n            author=data.author,\n            excerpt=data.summary,\n            date_published=data.updated,\n        )\n    return article\n\ndef create_pin(article, rss):\n    pin = db((db.pin.article == article.id)&(db.pin.board == rss.board)).select().first()\n    if pin is None:\n        pin = db.pin.insert(\n            article=article.id, \n            article_title = article.title,\n            article_content = article.content,\n            article_domain = article.domain,\n            board=rss.board,\n            board_name=rss.board.name,\n            user = rss.board.user,\n            user_name = rss.board.user.first_name + ' ' + rss.board.user.last_name,\n            )\n    return pin        \n\ndef test():\n    rss = db().select(db.rss_feed.ALL)\n    items = {}\n    for r in rss:\n        d = feedparser.parse(r.url)\n        for item in d['entries']:\n            a = create_article(item)\n            p = create_pin(a, r)\n            items[p.id] = p.title\n   \n    return items\n\ndef fix():\n    pins = db().select(db.pin.ALL)\n    for p in pins:\n        p.board_name = p.board.name\n        p.user = p.board.user\n        p.user_name = p.board.user.first_name + ' ' + p.board.user.last_name\n        p.article_title = p.article.title\n        p.article_content = p.article.content\n        p.article_domain = p.article.domain\n        p.update_record()\n    return pins\n\ndef add_repin():\n    pin_id = request.vars.id\n    pin = db.pin(pin_id)\n\n    board_id = request.vars.repin_board\n    board = db.board(board_id)\n    \n    new_pin = db((db.pin.article==pin.article.id)&(db.pin.board==board.id)).select().first()\n    if new_pin is None:\n        new_pin = db.pin.insert(\n            original_pin=pin.id,\n            article=pin.article, \n            article_title = pin.article_title,\n            article_content = pin.article_content,\n            article_domain = pin.article_domain,\n            board=board.id,\n            board_name=board.name,\n            user = board.user,\n            user_name = board.user.first_name + ' ' + board.user.last_name,\n            )\n    \n    return 'reload'\n    \ndef add_board():\n    name = request.vars.name\n    if re.match('(^[\\w\\s.-]+$)', name): #sanitize the name\n        category = db.category(request.vars.category)\n        board = db.board.insert(user=auth.user.id, category=category.id, name=name)\n        return board.id\n\n    return 'please use only alpha numeric characters'\n    \ndef add_article():\n    url = request.vars.url\n    board = db.board(request.vars.board)\n    article = db(db.article.url == url).select().first()\n    if article is None:\n        r = Readability()\n        json = r.content(url)\n        article = db.article.insert(\n            height=300,\n            url=json['url'],\n            readability_url=json['short_url'],\n            title=json['title'],\n            content=json['content'],\n            domain=json['domain'],\n            author=json['author'],\n            excerpt=json['excerpt'],\n            word_count=json['word_count'],\n            total_pages=json['total_pages'],\n            date_published=json['date_published'],\n            next_page_id=json['next_page_id'],\n            rendered_pages=json['rendered_pages'],            \n        )\n    \n    pin = db((db.pin.board == board.id) & (db.pin.article == article.id)).select().first()\n    if pin is None:\n        new_pin = db.pin.insert(\n            article=article.id, \n            article_title = article.title,\n            article_content = article.content,\n            article_domain = article.domain,\n            board=board.id,\n            board_name=board.name,\n            user = board.user,\n            user_name = board.user.first_name + ' ' + board.user.last_name,\n            )\n    \n    return new_pin.id\n\nresponse._vars=response._caller(test)\n"
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/users/udimilo/Documents/web2py/gluon/restricted.py", line 205, in restricted\n    exec ccode in environment\n  File "/Users/udimilo/Documents/web2py/applications/udi0312/controllers/api.py", line 136, in <module>\n  File "/users/udimilo/Documents/web2py/gluon/globals.py", line 173, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/udimilo/Documents/web2py/applications/udi0312/controllers/api.py", line 50, in test\n    items[p.id] = p.title\n  File "/users/udimilo/Documents/web2py/gluon/dal.py", line 5657, in __getattr__\n    return self[key]\n  File "/users/udimilo/Documents/web2py/gluon/dal.py", line 5648, in __getitem__\n    return dict.__getitem__(self, key)\nKeyError: \'title\'\n'
p11
s.