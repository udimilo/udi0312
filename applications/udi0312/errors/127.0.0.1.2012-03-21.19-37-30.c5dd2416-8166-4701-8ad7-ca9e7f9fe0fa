(dp1
S'output'
p2
S"<type 'exceptions.SyntaxError'> Set: no tables selected"
p3
sS'layer'
p4
S'/Users/udimilo/Documents/web2py/applications/udi0312/controllers/api.py'
p5
sS'code'
p6
S"# coding: utf8\nimport re\nimport time\nfrom readability import Readability\n\n@cache('a', 5)\ndef f():\n    return time.ctime()\n     \ndef test():\n    pins = db().select(db.pin.ALL, orderby=~db.pin.created_on)\n    original_ids = set(map(lambda p: p.original_pin, pins))\n    board_ids = set(map(lambda p: p.board, pins))\n    article_ids = list(set(map(lambda p: p.article, pins)))\n\n    boards = db().select(db.board.id in board_ids)\n\n    return time.ctime()\n\ndef add_repin():\n    pin_id = request.vars.id\n    pin = db.pin(pin_id)\n\n    board_id = request.vars.repin_board\n    board = db.board(board_id)\n    \n    new_pin = db((db.pin.article==pin.article.id)&(db.pin.board==board.id)).select().first()\n    if new_pin is None:\n        new_pin = db.pin.insert(article=pin.article.id, board=board.id, original_pin=pin.id)\n    \n    return 'reload'\n    \ndef add_board():\n    name = request.vars.name\n    if re.match('(^[\\w\\s.-]+$)', name): #sanitize the name\n        category = db.category(request.vars.category)\n        board = db.board.insert(user=auth.user.id, category=category.id, name=name)\n        return board.id\n\n    return 'please use only alpha numeric characters'\n    \ndef add_article():\n    url = request.vars.url\n    board = db.board(request.vars.board)\n    article = db(db.article.url == url).select().first()\n    if article is None:\n        r = Readability()\n        json = r.content(url)\n        article = db.article.insert(\n            height=300,\n            url=json['url'],\n            readability_url=json['short_url'],\n            title=json['title'],\n            content=json['content'],\n            domain=json['domain'],\n            author=json['author'],\n            excerpt=json['excerpt'],\n            word_count=json['word_count'],\n            total_pages=json['total_pages'],\n            date_published=json['date_published'],\n            next_page_id=json['next_page_id'],\n            rendered_pages=json['rendered_pages'],            \n        )\n    \n    pin = db((db.pin.board == board.id) & (db.pin.article == article.id)).select().first()\n    if pin is None:\n        pin = db.pin.insert(board=board.id, article=article.id)\n    \n    return pin.id\n\nresponse._vars=response._caller(test)\n"
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/users/udimilo/Documents/web2py/gluon/restricted.py", line 205, in restricted\n    exec ccode in environment\n  File "/Users/udimilo/Documents/web2py/applications/udi0312/controllers/api.py", line 71, in <module>\n  File "/users/udimilo/Documents/web2py/gluon/globals.py", line 173, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/udimilo/Documents/web2py/applications/udi0312/controllers/api.py", line 16, in test\n    boards = db().select(db.board.id in board_ids)\n  File "/users/udimilo/Documents/web2py/gluon/dal.py", line 7578, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/users/udimilo/Documents/web2py/gluon/dal.py", line 1307, in select\n    sql = self._select(query, fields, attributes)\n  File "/users/udimilo/Documents/web2py/gluon/dal.py", line 1756, in _select\n    sql = super(SQLiteAdapter, self)._select(query, fields, attributes)\n  File "/users/udimilo/Documents/web2py/gluon/dal.py", line 1196, in _select\n    raise SyntaxError, \'Set: no tables selected\'\nSyntaxError: Set: no tables selected\n'
p11
s.