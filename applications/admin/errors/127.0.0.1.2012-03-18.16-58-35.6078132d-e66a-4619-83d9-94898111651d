(dp1
S'output'
p2
S"<class 'sre_constants.error'> unbalanced parenthesis"
p3
sS'layer'
p4
S'/Users/udimilo/Documents/web2py/applications/admin/controllers/default.py'
p5
sS'code'
p6
S'# coding: utf8\n\nEXPERIMENTAL_STUFF = True\n\nif EXPERIMENTAL_STUFF:\n    is_mobile = request.user_agent().is_mobile\n    if is_mobile:\n        response.view = response.view.replace(\'default/\',\'default.mobile/\')\n        response.menu = []\n\nfrom gluon.admin import *\nfrom gluon.fileutils import abspath, read_file, write_file\nfrom glob import glob\nimport shutil\nimport platform\n\nif DEMO_MODE and request.function in [\'change_password\',\'pack\',\'pack_plugin\',\'upgrade_web2py\',\'uninstall\',\'cleanup\',\'compile_app\',\'remove_compiled_app\',\'delete\',\'delete_plugin\',\'create_file\',\'upload_file\',\'update_languages\',\'reload_routes\']:\n    session.flash = T(\'disabled in demo mode\')\n    redirect(URL(\'site\'))\n\nif not is_manager() and request.function in [\'change_password\',\'upgrade_web2py\']:\n    session.flash = T(\'disabled in multi user mode\')\n    redirect(URL(\'site\'))\n\nif FILTER_APPS and request.args(0) and not request.args(0) in FILTER_APPS:\n    session.flash = T(\'disabled in demo mode\')\n    redirect(URL(\'site\'))\n\ndef safe_open(a,b):\n    if DEMO_MODE and \'w\' in b:\n        class tmp:\n            def write(self,data): pass\n        return tmp()\n    return open(a,b)\n\ndef safe_read(a, b=\'r\'):\n    safe_file = safe_open(a, b)\n    try:\n        return safe_file.read()\n    finally:\n        safe_file.close()\n\ndef safe_write(a, value, b=\'w\'):\n    safe_file = safe_open(a, b)\n    try:\n        safe_file.write(value)\n    finally:\n        safe_file.close()\n\ndef get_app(name=None):\n    app = name or request.args(0)\n    if app and (not MULTI_USER_MODE or db(db.app.name==app)(db.app.owner==auth.user.id).count()):\n        return app\n    session.flash = \'App does not exist or your are not authorized\'\n    redirect(URL(\'site\'))\n\ndef index():\n    """ Index handler """\n\n    send = request.vars.send\n    if DEMO_MODE:\n        session.authorized = True\n        session.last_time = t0\n    if not send:\n        send = URL(\'site\')\n    if session.authorized:\n        redirect(send)\n    elif request.vars.password:\n        if verify_password(request.vars.password):\n            session.authorized = True\n            login_record(True)\n\n            if CHECK_VERSION:\n                session.check_version = True\n            else:\n                session.check_version = False\n\n            session.last_time = t0\n            if isinstance(send, list):  # ## why does this happen?\n                send = str(send[0])\n\n            redirect(send)\n        else:\n            times_denied = login_record(False)\n            if times_denied >= allowed_number_of_attempts:\n                response.flash = \\\n                    T(\'admin disabled because too many invalid login attempts\')\n            elif times_denied == allowed_number_of_attempts - 1:\n                response.flash = \\\n                    T(\'You have one more login attempt before you are locked out\')\n            else:\n                response.flash = T(\'invalid password.\')\n    return dict(send=send)\n\n\ndef check_version():\n    """ Checks if web2py is up to date """\n\n    session.forget()\n    session._unlock(response)\n\n    new_version, version_number = check_new_version(request.env.web2py_version,\n                                    WEB2PY_VERSION_URL)\n\n    if new_version == -1:\n        return A(T(\'Unable to check for upgrades\'), _href=WEB2PY_URL)\n    elif new_version != True:\n        return A(T(\'web2py is up to date\'), _href=WEB2PY_URL)\n    elif platform.system().lower() in (\'windows\',\'win32\',\'win64\') and os.path.exists("web2py.exe"):\n        return SPAN(\'You should upgrade to version %s\' % version_number)\n    else:\n        return sp_button(URL(\'upgrade_web2py\'), T(\'upgrade now\')) \\\n          + XML(\' <strong class="upgrade_version">%s</strong>\' % version_number)\n\n\ndef logout():\n    """ Logout handler """\n    session.authorized = None\n    if MULTI_USER_MODE:\n        redirect(URL(\'user/logout\'))\n    redirect(URL(\'index\'))\n\n\ndef change_password():\n\n    if session.pam_user:\n        session.flash = T(\'PAM authenticated user, cannot change password here\')\n        redirect(URL(\'site\'))\n    form=SQLFORM.factory(Field(\'current_admin_password\',\'password\'),\n                         Field(\'new_admin_password\',\'password\',requires=IS_STRONG()),\n                         Field(\'new_admin_password_again\',\'password\'))\n    if form.accepts(request.vars):\n        if not verify_password(request.vars.current_admin_password):\n            form.errors.current_admin_password = T(\'invalid password\')\n        elif form.vars.new_admin_password != form.vars.new_admin_password_again:\n            form.errors.new_admin_password_again = T(\'no match\')\n        else:\n            path = abspath(\'parameters_%s.py\' % request.env.server_port)\n            safe_write(path, \'password="%s"\' % CRYPT()(request.vars.new_admin_password)[0])\n            session.flash = T(\'password changed\')\n            redirect(URL(\'site\'))\n    return dict(form=form)\n\ndef site():\n    """ Site handler """\n\n    myversion = request.env.web2py_version\n\n    # Shortcut to make the elif statements more legible\n    file_or_appurl = \'file\' in request.vars or \'appurl\' in request.vars\n\n    if DEMO_MODE:\n        pass\n\n    elif request.vars.filename and not \'file\' in request.vars:\n        # create a new application\n        appname = cleanpath(request.vars.filename).replace(\'.\', \'_\')\n        if app_create(appname, request):\n            if MULTI_USER_MODE:\n                db.app.insert(name=appname,owner=auth.user.id)\n            session.flash = T(\'new application "%s" created\', appname)\n            redirect(URL(\'design\',args=appname))\n        else:\n            session.flash = \\\n                T(\'unable to create application "%s" (it may exist already)\', request.vars.filename)\n        redirect(URL(r=request))\n\n    elif file_or_appurl and not request.vars.filename:\n        # can\'t do anything without an app name\n        msg = \'you must specify a name for the uploaded application\'\n        response.flash = T(msg)\n\n    elif file_or_appurl and request.vars.filename:\n        # fetch an application via URL or file upload\n        f = None\n        if request.vars.appurl is not \'\':\n            try:\n                f = urllib.urlopen(request.vars.appurl)\n            except Exception, e:\n                session.flash = DIV(T(\'Unable to download app because:\'),PRE(str(e)))\n                redirect(URL(r=request))\n            fname = request.vars.appurl\n        elif request.vars.file is not \'\':\n            f = request.vars.file.file\n            fname = request.vars.file.filename\n\n        if f:\n            appname = cleanpath(request.vars.filename).replace(\'.\', \'_\')\n            installed = app_install(appname, f, request, fname,\n                                    overwrite=request.vars.overwrite_check)\n        if f and installed:\n            msg = \'application %(appname)s installed with md5sum: %(digest)s\'\n            session.flash = T(msg, dict(appname=appname,\n                                        digest=md5_hash(installed)))\n        elif f and request.vars.overwrite_check:\n            msg = \'unable to install application "%(appname)s"\'\n            session.flash = T(msg, dict(appname=request.vars.filename))\n\n        else:\n            msg = \'unable to install application "%(appname)s"\'\n            session.flash = T(msg, dict(appname=request.vars.filename))\n\n        redirect(URL(r=request))\n\n    regex = re.compile(\'^\\w+$\')\n\n    if is_manager():\n        apps = [f for f in os.listdir(apath(r=request)) if regex.match(f)]\n    else:\n        apps = [f.name for f in db(db.app.owner==auth.user_id).select()]\n\n    if FILTER_APPS:\n        apps = [f for f in apps if f in FILTER_APPS]\n\n    apps = sorted(apps,lambda a,b:cmp(a.upper(),b.upper()))\n\n    return dict(app=None, apps=apps, myversion=myversion)\n\n\ndef pack():\n    app = get_app()\n\n    if len(request.args) == 1:\n        fname = \'web2py.app.%s.w2p\' % app\n        filename = app_pack(app, request)\n    else:\n        fname = \'web2py.app.%s.compiled.w2p\' % app\n        filename = app_pack_compiled(app, request)\n\n    if filename:\n        response.headers[\'Content-Type\'] = \'application/w2p\'\n        disposition = \'attachment; filename=%s\' % fname\n        response.headers[\'Content-Disposition\'] = disposition\n        return safe_read(filename, \'rb\')\n    else:\n        session.flash = T(\'internal error\')\n        redirect(URL(\'site\'))\n\ndef pack_plugin():\n    app = get_app()\n    if len(request.args) == 2:\n        fname = \'web2py.plugin.%s.w2p\' % request.args[1]\n        filename = plugin_pack(app, request.args[1], request)\n    if filename:\n        response.headers[\'Content-Type\'] = \'application/w2p\'\n        disposition = \'attachment; filename=%s\' % fname\n        response.headers[\'Content-Disposition\'] = disposition\n        return safe_read(filename, \'rb\')\n    else:\n        session.flash = T(\'internal error\')\n        redirect(URL(\'plugin\',args=request.args))\n\ndef upgrade_web2py():\n    if \'upgrade\' in request.vars:\n        (success, error) = upgrade(request)\n        if success:\n            session.flash = T(\'web2py upgraded; please restart it\')\n        else:\n            session.flash = T(\'unable to upgrade because "%s"\', error)\n        redirect(URL(\'site\'))\n    elif \'noupgrade\' in request.vars:\n        redirect(URL(\'site\'))\n    return dict()\n\ndef uninstall():\n    app = get_app()\n    if \'delete\' in request.vars:\n        if MULTI_USER_MODE:\n            if is_manager() and db(db.app.name==app).delete():\n                pass\n            elif db(db.app.name==app)(db.app.owner==auth.user.id).delete():\n                pass\n            else:\n                session.flash = T(\'no permission to uninstall "%s"\', app)\n                redirect(URL(\'site\'))\n        if app_uninstall(app, request):\n            session.flash = T(\'application "%s" uninstalled\', app)\n        else:\n            session.flash = T(\'unable to uninstall "%s"\', app)\n        redirect(URL(\'site\'))\n    elif \'nodelete\' in request.vars:\n        redirect(URL(\'site\'))\n    return dict(app=app)\n\n\ndef cleanup():\n    app = get_app()\n    clean = app_cleanup(app, request)\n    if not clean:\n        session.flash = T("some files could not be removed")\n    else:\n        session.flash = T(\'cache, errors and sessions cleaned\')\n\n    redirect(URL(\'site\'))\n\n\ndef compile_app():\n    app = get_app()\n    c = app_compile(app, request)\n    if not c:\n        session.flash = T(\'application compiled\')\n    else:\n        session.flash = DIV(T(\'Cannot compile: there are errors in your app:\'),\n                              CODE(c))\n    redirect(URL(\'site\'))\n\n\ndef remove_compiled_app():\n    """ Remove the compiled application """\n    app = get_app()\n    remove_compiled_application(apath(app, r=request))\n    session.flash = T(\'compiled application removed\')\n    redirect(URL(\'site\'))\n\ndef delete():\n    """ Object delete handler """\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    sender = request.vars.sender\n\n    if isinstance(sender, list):  # ## fix a problem with Vista\n        sender = sender[0]\n\n    if \'nodelete\' in request.vars:\n        redirect(URL(sender))\n    elif \'delete\' in request.vars:\n        try:\n            os.unlink(apath(filename, r=request))\n            session.flash = T(\'file "%(filename)s" deleted\',\n                              dict(filename=filename))\n        except Exception:\n            session.flash = T(\'unable to delete file "%(filename)s"\',\n                              dict(filename=filename))\n        redirect(URL(sender))\n    return dict(filename=filename, sender=sender)\n\ndef enable():\n    app = get_app()\n    filename = os.path.join(apath(app, r=request),\'DISABLED\')\n    if os.path.exists(filename):\n        os.unlink(filename)\n        return SPAN(T(\'Disable\'),_style=\'color:green\')\n    else:\n        open(filename,\'wb\').write(time.ctime())\n        return SPAN(T(\'Enable\'),_style=\'color:red\')\n\ndef peek():\n    """ Visualize object code """\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    try:\n        data = safe_read(apath(filename, r=request)).replace(\'\\r\',\'\')\n    except IOError:\n        session.flash = T(\'file does not exist\')\n        redirect(URL(\'site\'))\n\n    extension = filename[filename.rfind(\'.\') + 1:].lower()\n\n    return dict(app=request.args[0],\n                filename=filename,\n                data=data,\n                extension=extension)\n\n\ndef test():\n    """ Execute controller tests """\n    app = get_app()\n    if len(request.args) > 1:\n        file = request.args[1]\n    else:\n        file = \'.*\\.py\'\n\n    controllers = listdir(apath(\'%s/controllers/\' % app, r=request), file + \'$\')\n\n    return dict(app=app, controllers=controllers)\n\ndef keepalive():\n    return \'\'\n\ndef search():\n    keywords=request.vars.keywords or \'\'\n    app = get_app()\n    def match(filename,keywords):\n        filename=os.path.join(apath(app, r=request),filename)\n        if keywords in read_file(filename,\'rb\'):\n            return True\n        return False\n    path = apath(request.args[0], r=request)\n    files1 = glob(os.path.join(path,\'*/*.py\'))\n    files2 = glob(os.path.join(path,\'*/*.html\'))\n    files3 = glob(os.path.join(path,\'*/*/*.html\'))\n    files=[x[len(path)+1:].replace(\'\\\\\',\'/\') for x in files1+files2+files3 if match(x,keywords)]\n    return response.json({\'files\':files})\n\ndef edit():\n    """ File edit handler """\n    # Load json only if it is ajax edited...\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    # Try to discover the file type\n    if filename[-3:] == \'.py\':\n        filetype = \'python\'\n    elif filename[-5:] == \'.html\':\n        filetype = \'html\'\n    elif filename[-5:] == \'.load\':\n        filetype = \'html\'\n    elif filename[-4:] == \'.css\':\n        filetype = \'css\'\n    elif filename[-3:] == \'.js\':\n        filetype = \'js\'\n    else:\n        filetype = \'html\'\n\n    # ## check if file is not there\n\n    path = apath(filename, r=request)\n\n    if (\'revert\' in request.vars) and os.path.exists(path + \'.bak\'):\n        try:\n            data = safe_read(path + \'.bak\')\n            data1 = safe_read(path)\n        except IOError:\n            session.flash = T(\'Invalid action\')\n            if \'from_ajax\' in request.vars:\n                 return response.json({\'error\': str(T(\'Invalid action\'))})\n            else:\n                redirect(URL(\'site\'))\n\n        safe_write(path, data)\n        file_hash = md5_hash(data)\n        saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n        safe_write(path + \'.bak\', data1)\n        response.flash = T(\'file "%s" of %s restored\', (filename, saved_on))\n    else:\n        try:\n            data = safe_read(path)\n        except IOError:\n            session.flash = T(\'Invalid action\')\n            if \'from_ajax\' in request.vars:\n                return response.json({\'error\': str(T(\'Invalid action\'))})\n            else:\n                redirect(URL(\'site\'))\n\n        file_hash = md5_hash(data)\n        saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n\n        if request.vars.file_hash and request.vars.file_hash != file_hash:\n            session.flash = T(\'file changed on disk\')\n            data = request.vars.data.replace(\'\\r\\n\', \'\\n\').strip() + \'\\n\'\n            safe_write(path + \'.1\', data)\n            if \'from_ajax\' in request.vars:\n                return response.json({\'error\': str(T(\'file changed on disk\')),\n                                      \'redirect\': URL(\'resolve\',\n                                                      args=request.args)})\n            else:\n                redirect(URL(\'resolve\', args=request.args))\n        elif request.vars.data:\n            safe_write(path + \'.bak\', data)\n            data = request.vars.data.replace(\'\\r\\n\', \'\\n\').strip() + \'\\n\'\n            safe_write(path, data)\n            file_hash = md5_hash(data)\n            saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n            response.flash = T(\'file saved on %s\', saved_on)\n\n    data_or_revert = (request.vars.data or request.vars.revert)\n\n    # Check compile errors\n    highlight = None\n    if filetype == \'python\' and request.vars.data:\n        import _ast\n        try:\n            code = request.vars.data.rstrip().replace(\'\\r\\n\',\'\\n\')+\'\\n\'\n            compile(code, path, "exec", _ast.PyCF_ONLY_AST)\n        except Exception, e:\n            start = sum([len(line)+1 for l, line\n                            in enumerate(request.vars.data.split("\\n"))\n                            if l < e.lineno-1])\n            if e.text and e.offset:\n                offset = e.offset - (len(e.text) - len(e.text.splitlines()[-1]))\n            else:\n                offset = 0\n            highlight = {\'start\': start, \'end\': start + offset + 1}\n            try:\n                ex_name = e.__class__.__name__\n            except:\n                ex_name = \'unknown exception!\'\n            response.flash = DIV(T(\'failed to compile file because:\'), BR(),\n                                 B(ex_name), T(\' at line %s\') % e.lineno,\n                                 offset and T(\' at char %s\') % offset or \'\',\n                                 PRE(str(e)))\n\n    if data_or_revert and request.args[1] == \'modules\':\n        # Lets try to reload the modules\n        try:\n            mopath = \'.\'.join(request.args[2:])[:-3]\n            exec \'import applications.%s.modules.%s\' % (request.args[0], mopath)\n            reload(sys.modules[\'applications.%s.modules.%s\'\n                    % (request.args[0], mopath)])\n        except Exception, e:\n            response.flash = DIV(T(\'failed to reload module because:\'),PRE(str(e)))\n\n    edit_controller = None\n    editviewlinks = None\n    view_link = None\n    if filetype == \'html\' and len(request.args) >= 3:\n        cfilename = os.path.join(request.args[0], \'controllers\',\n                                 request.args[2] + \'.py\')\n        if os.path.exists(apath(cfilename, r=request)):\n            edit_controller = URL(\'edit\', args=[cfilename])\n            view = request.args[3].replace(\'.html\',\'\')\n            view_link = URL(request.args[0],request.args[2],view)\n    elif filetype == \'python\' and request.args[1] == \'controllers\':\n        ## it\'s a controller file.\n        ## Create links to all of the associated view files.\n        app = get_app()\n        viewname = os.path.splitext(request.args[2])[0]\n        viewpath = os.path.join(app,\'views\',viewname)\n        aviewpath = apath(viewpath, r=request)\n        viewlist = []\n        if os.path.exists(aviewpath):\n            if os.path.isdir(aviewpath):\n                viewlist = glob(os.path.join(aviewpath,\'*.html\'))\n        elif os.path.exists(aviewpath+\'.html\'):\n            viewlist.append(aviewpath+\'.html\')\n        if len(viewlist):\n            editviewlinks = []\n            for v in viewlist:\n                vf = os.path.split(v)[-1]\n                vargs = "/".join([viewpath.replace(os.sep,"/"),vf])\n                editviewlinks.append(A(T(vf.split(".")[0]),\\\n                    _href=URL(\'edit\',args=[vargs])))\n\n    if len(request.args) > 2 and request.args[1] == \'controllers\':\n        controller = (request.args[2])[:-3]\n        functions = regex_expose.findall(data)\n    else:\n        (controller, functions) = (None, None)\n\n    if \'from_ajax\' in request.vars:\n        return response.json({\'file_hash\': file_hash, \'saved_on\': saved_on, \'functions\':functions, \'controller\': controller, \'application\': request.args[0], \'highlight\': highlight })\n    else:\n\n        editarea_preferences = {}\n        editarea_preferences[\'FONT_SIZE\'] = \'10\'\n        editarea_preferences[\'FULL_SCREEN\'] = \'false\'\n        editarea_preferences[\'ALLOW_TOGGLE\'] = \'true\'\n        editarea_preferences[\'REPLACE_TAB_BY_SPACES\'] = \'4\'\n        editarea_preferences[\'DISPLAY\'] = \'onload\'\n        for key in editarea_preferences:\n            if globals().has_key(key):\n                editarea_preferences[key]=globals()[key]\n        return dict(app=request.args[0],\n                    filename=filename,\n                    filetype=filetype,\n                    data=data,\n                    edit_controller=edit_controller,\n                    file_hash=file_hash,\n                    saved_on=saved_on,\n                    controller=controller,\n                    functions=functions,\n                    view_link=view_link,\n                    editarea_preferences=editarea_preferences,\n                    editviewlinks=editviewlinks)\n\ndef resolve():\n    """\n    """\n\n    filename = \'/\'.join(request.args)\n    # ## check if file is not there\n    path = apath(filename, r=request)\n    a = safe_read(path).split(\'\\n\')\n    try:\n        b = safe_read(path + \'.1\').split(\'\\n\')\n    except IOError:\n        session.flash = \'Other file, no longer there\'\n        redirect(URL(\'edit\', args=request.args))\n\n    d = difflib.ndiff(a, b)\n\n    def leading(line):\n        """  """\n\n        # TODO: we really need to comment this\n        z = \'\'\n        for (k, c) in enumerate(line):\n            if c == \' \':\n                z += \'&nbsp;\'\n            elif c == \' \\t\':\n                z += \'&nbsp;\'\n            elif k == 0 and c == \'?\':\n                pass\n            else:\n                break\n\n        return XML(z)\n\n    def getclass(item):\n        """ Determine item class """\n\n        if item[0] == \' \':\n            return \'normal\'\n        if item[0] == \'+\':\n            return \'plus\'\n        if item[0] == \'-\':\n            return \'minus\'\n\n    if request.vars:\n        c = \'\\n\'.join([item[2:].rstrip() for (i, item) in enumerate(d) if item[0] \\\n                           == \' \' or \'line%i\' % i in request.vars])\n        safe_write(path, c)\n        session.flash = \'files merged\'\n        redirect(URL(\'edit\', args=request.args))\n    else:\n        # Making the short circuit compatible with <= python2.4\n        gen_data = lambda index,item: not item[:1] in [\'+\',\'-\'] and "" \\\n                   or INPUT(_type=\'checkbox\',\n                            _name=\'line%i\' % index,\n                            value=item[0] == \'+\')\n\n        diff = TABLE(*[TR(TD(gen_data(i,item)),\n                          TD(item[0]),\n                          TD(leading(item[2:]),\n                          TT(item[2:].rstrip())), _class=getclass(item))\n                       for (i, item) in enumerate(d) if item[0] != \'?\'])\n\n    return dict(diff=diff, filename=filename)\n\n\ndef edit_language():\n    """ Edit language file """\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    from gluon.languages import read_dict, write_dict\n    strings = read_dict(apath(filename, r=request))\n    keys = sorted(strings.keys(),lambda x,y: cmp(x.lower(), y.lower()))\n    rows = []\n    rows.append(H2(T(\'Original/Translation\')))\n\n    for key in keys:\n        name = md5_hash(key)\n        if key==strings[key]:\n            _class=\'untranslated\'\n        else:\n            _class=\'translated\'\n        if len(key) <= 40:\n            elem = INPUT(_type=\'text\', _name=name,value=strings[key],\n                         _size=70,_class=_class)\n        else:\n            elem = TEXTAREA(_name=name, value=strings[key], _cols=70,\n                            _rows=5, _class=_class)\n\n        # Making the short circuit compatible with <= python2.4\n        k = (strings[key] != key) and key or B(key)\n\n        rows.append(P(k, BR(), elem, TAG.BUTTON(T(\'delete\'),\n                            _onclick=\'return delkey("%s")\' % name), _id=name))\n\n    rows.append(INPUT(_type=\'submit\', _value=T(\'update\')))\n    form = FORM(*rows)\n    if form.accepts(request.vars, keepvalues=True):\n        strs = dict()\n        for key in keys:\n            name = md5_hash(key)\n            if form.vars[name]==chr(127): continue\n            strs[key] = form.vars[name]\n        write_dict(apath(filename, r=request), strs)\n        session.flash = T(\'file saved on %(time)s\', dict(time=time.ctime()))\n        redirect(URL(r=request,args=request.args))\n    return dict(app=request.args[0], filename=filename, form=form)\n\n\ndef about():\n    """ Read about info """\n    app = get_app()\n    # ## check if file is not there\n    about = safe_read(apath(\'%s/ABOUT\' % app, r=request))\n    license = safe_read(apath(\'%s/LICENSE\' % app, r=request))\n    return dict(app=app, about=MARKMIN(about), license=MARKMIN(license))\n\n\ndef design():\n    """ Application design handler """\n    app = get_app()\n\n    if not response.flash and app == request.application:\n        msg = T(\'ATTENTION: you cannot edit the running application!\')\n        response.flash = msg\n\n    if request.vars.pluginfile!=None and not isinstance(request.vars.pluginfile,str):\n        filename=os.path.basename(request.vars.pluginfile.filename)\n        if plugin_install(app, request.vars.pluginfile.file,\n                          request, filename):\n            session.flash = T(\'new plugin installed\')\n            redirect(URL(\'design\',args=app))\n        else:\n            session.flash = \\\n                T(\'unable to create application "%s"\', request.vars.filename)\n        redirect(URL(r=request))\n    elif isinstance(request.vars.pluginfile,str):\n        session.flash = T(\'plugin not specified\')\n        redirect(URL(r=request))\n\n\n    # If we have only pyc files it means that\n    # we cannot design\n    if os.path.exists(apath(\'%s/compiled\' % app, r=request)):\n        session.flash = \\\n            T(\'application is compiled and cannot be designed\')\n        redirect(URL(\'site\'))\n\n    # Get all models\n    models = listdir(apath(\'%s/models/\' % app, r=request), \'.*\\.py$\')\n    models=[x.replace(\'\\\\\',\'/\') for x in models]\n    defines = {}\n    for m in models:\n        data = safe_read(apath(\'%s/models/%s\' % (app, m), r=request))\n        defines[m] = regex_tables.findall(data)\n        defines[m].sort()\n\n    # Get all controllers\n    controllers = sorted(listdir(apath(\'%s/controllers/\' % app, r=request), \'.*\\.py$\'))\n    controllers = [x.replace(\'\\\\\',\'/\') for x in controllers]\n    functions = {}\n    for c in controllers:\n        data = safe_read(apath(\'%s/controllers/%s\' % (app, c), r=request))\n        items = regex_expose.findall(data)\n        functions[c] = items\n\n    # Get all views\n    views = sorted(listdir(apath(\'%s/views/\' % app, r=request), \'[\\w/\\-]+(\\.\\w+)+$\'))\n    views = [x.replace(\'\\\\\',\'/\') for x in views if not x.endswith(\'.bak\')]\n    extend = {}\n    include = {}\n    for c in views:\n        data = safe_read(apath(\'%s/views/%s\' % (app, c), r=request))\n        items = regex_extend.findall(data)\n\n        if items:\n            extend[c] = items[0][1]\n\n        items = regex_include.findall(data)\n        include[c] = [i[1] for i in items]\n\n    # Get all modules\n    modules = listdir(apath(\'%s/modules/\' % app, r=request), \'.*\\.py$\')\n    modules = modules=[x.replace(\'\\\\\',\'/\') for x in modules]\n    modules.sort()\n\n    # Get all static files\n    statics = listdir(apath(\'%s/static/\' % app, r=request), \'[^\\.#].*\')\n    statics = [x.replace(\'\\\\\',\'/\') for x in statics]\n    statics.sort()\n\n    # Get all languages\n    languages = listdir(apath(\'%s/languages/\' % app, r=request), \'[\\w-]*\\.py\')\n\n    #Get crontab\n    cronfolder = apath(\'%s/cron\' % app, r=request)\n    if not os.path.exists(cronfolder): os.mkdir(cronfolder)\n    crontab = apath(\'%s/cron/crontab\' % app, r=request)\n    if not os.path.exists(crontab):\n        safe_write(crontab, \'#crontab\')\n\n    plugins=[]\n    def filter_plugins(items,plugins):\n        plugins+=[item[7:].split(\'/\')[0].split(\'.\')[0] for item in items if item.startswith(\'plugin_\')]\n        plugins[:]=list(set(plugins))\n        plugins.sort()\n        return [item for item in items if not item.startswith(\'plugin_\')]\n\n    return dict(app=app,\n                models=filter_plugins(models,plugins),\n                defines=defines,\n                controllers=filter_plugins(controllers,plugins),\n                functions=functions,\n                views=filter_plugins(views,plugins),\n                modules=filter_plugins(modules,plugins),\n                extend=extend,\n                include=include,\n                statics=filter_plugins(statics,plugins),\n                languages=languages,\n                crontab=crontab,\n                plugins=plugins)\n\ndef delete_plugin():\n    """ Object delete handler """\n    app=request.args(0)\n    plugin = request.args(1)\n    plugin_name=\'plugin_\'+plugin\n    if \'nodelete\' in request.vars:\n        redirect(URL(\'design\',args=app))\n    elif \'delete\' in request.vars:\n        try:\n            for folder in [\'models\',\'views\',\'controllers\',\'static\',\'modules\']:\n                path=os.path.join(apath(app,r=request),folder)\n                for item in os.listdir(path):\n                    if item.rsplit(\'.\',1)[0] == plugin_name:\n                        filename=os.path.join(path,item)\n                        if os.path.isdir(filename):\n                            shutil.rmtree(filename)\n                        else:\n                            os.unlink(filename)\n            session.flash = T(\'plugin "%(plugin)s" deleted\',\n                              dict(plugin=plugin))\n        except Exception:\n            session.flash = T(\'unable to delete file plugin "%(plugin)s"\',\n                              dict(plugin=plugin))\n        redirect(URL(\'design\',args=request.args(0)))\n    return dict(plugin=plugin)\n\ndef plugin():\n    """ Application design handler """\n    app = get_app()\n    plugin = request.args(1)\n\n    if not response.flash and app == request.application:\n        msg = T(\'ATTENTION: you cannot edit the running application!\')\n        response.flash = msg\n\n    # If we have only pyc files it means that\n    # we cannot design\n    if os.path.exists(apath(\'%s/compiled\' % app, r=request)):\n        session.flash = \\\n            T(\'application is compiled and cannot be designed\')\n        redirect(URL(\'site\'))\n\n    # Get all models\n    models = listdir(apath(\'%s/models/\' % app, r=request), \'.*\\.py$\')\n    models=[x.replace(\'\\\\\',\'/\') for x in models]\n    defines = {}\n    for m in models:\n        data = safe_read(apath(\'%s/models/%s\' % (app, m), r=request))\n        defines[m] = regex_tables.findall(data)\n        defines[m].sort()\n\n    # Get all controllers\n    controllers = sorted(listdir(apath(\'%s/controllers/\' % app, r=request), \'.*\\.py$\'))\n    controllers = [x.replace(\'\\\\\',\'/\') for x in controllers]\n    functions = {}\n    for c in controllers:\n        data = safe_read(apath(\'%s/controllers/%s\' % (app, c), r=request))\n        items = regex_expose.findall(data)\n        functions[c] = items\n\n    # Get all views\n    views = sorted(listdir(apath(\'%s/views/\' % app, r=request), \'[\\w/\\-]+\\.\\w+$\'))\n    views = [x.replace(\'\\\\\',\'/\') for x in views]\n    extend = {}\n    include = {}\n    for c in views:\n        data = safe_read(apath(\'%s/views/%s\' % (app, c), r=request))\n        items = regex_extend.findall(data)\n        if items:\n            extend[c] = items[0][1]\n\n        items = regex_include.findall(data)\n        include[c] = [i[1] for i in items]\n\n    # Get all modules\n    modules = listdir(apath(\'%s/modules/\' % app, r=request), \'.*\\.py$\')\n    modules = modules=[x.replace(\'\\\\\',\'/\') for x in modules]\n    modules.sort()\n\n    # Get all static files\n    statics = listdir(apath(\'%s/static/\' % app, r=request), \'[^\\.#].*\')\n    statics = [x.replace(\'\\\\\',\'/\') for x in statics]\n    statics.sort()\n\n    # Get all languages\n    languages = listdir(apath(\'%s/languages/\' % app, r=request), \'[\\w-]*\\.py\')\n\n    #Get crontab\n    crontab = apath(\'%s/cron/crontab\' % app, r=request)\n    if not os.path.exists(crontab):\n        safe_write(crontab, \'#crontab\')\n\n    def filter_plugins(items):\n        regex=re.compile(\'^plugin_\'+plugin+\'(/.*|\\..*)?$\')\n        return [item for item in items if regex.match(item)]\n\n    return dict(app=app,\n                models=filter_plugins(models),\n                defines=defines,\n                controllers=filter_plugins(controllers),\n                functions=functions,\n                views=filter_plugins(views),\n                modules=filter_plugins(modules),\n                extend=extend,\n                include=include,\n                statics=filter_plugins(statics),\n                languages=languages,\n                crontab=crontab)\n\n\ndef create_file():\n    """ Create files handler """\n    try:\n        app = get_app(name=request.vars.location.split(\'/\')[0])\n        path = apath(request.vars.location, r=request)\n        filename = re.sub(\'[^\\w./-]+\', \'_\', request.vars.filename)\n\n        if path[-11:] == \'/languages/\':\n            # Handle language files\n            if len(filename) == 0:\n                raise SyntaxError\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n            app = path.split(\'/\')[-3]\n            path=os.path.join(apath(app, r=request),\'languages\',filename)\n            if not os.path.exists(path):\n                safe_write(path, \'\')\n            findT(apath(app, r=request), filename[:-3])\n            session.flash = T(\'language file "%(filename)s" created/updated\',\n                              dict(filename=filename))\n            redirect(request.vars.sender)\n\n        elif path[-8:] == \'/models/\':\n            # Handle python models\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = \'# coding: utf8\\n\'\n\n        elif path[-13:] == \'/controllers/\':\n            # Handle python controllers\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = \'# coding: utf8\\n# %s\\ndef index(): return dict(message="hello from %s")\'\n            text = text % (T(\'try something like\'), filename)\n\n        elif path[-7:] == \'/views/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            # Handle template (html) views\n            if filename.find(\'.\')<0:\n                filename += \'.html\'\n            extension = filename.split(\'.\')[-1].lower()\n\n            if len(filename) == 5:\n                raise SyntaxError\n\n            msg = T(\'This is the %(filename)s template\',\n                    dict(filename=filename))\n            if extension == \'html\':\n                text = dedent("""\n                   {{extend \'layout.html\'}}\n                   <h1>%s</h1>\n                   {{=BEAUTIFY(response._vars)}}""" % msg)\n            else:\n                generic = os.path.join(path,\'generic.\'+extension)\n                if os.path.exists(generic):\n                    text = read_file(generic)\n                else:\n                    text = \'\'\n\n        elif path[-9:] == \'/modules/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            # Handle python module files\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = dedent("""\n                   #!/usr/bin/env python\n                   # coding: utf8\n                   from gluon import *\\n""")\n\n        elif path[-8:] == \'/static/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            text = \'\'\n        else:\n            redirect(request.vars.sender)\n\n        full_filename = os.path.join(path, filename)\n        dirpath = os.path.dirname(full_filename)\n\n        if not os.path.exists(dirpath):\n            os.makedirs(dirpath)\n\n        if os.path.exists(full_filename):\n            raise SyntaxError\n\n        safe_write(full_filename, text)\n        session.flash = T(\'file "%(filename)s" created\',\n                          dict(filename=full_filename[len(path):]))\n        redirect(URL(\'edit\',\n                 args=[os.path.join(request.vars.location, filename)]))\n    except Exception, e:\n        if not isinstance(e,HTTP):\n            session.flash = T(\'cannot create file\')\n\n    redirect(request.vars.sender)\n\n\ndef upload_file():\n    """ File uploading handler """\n\n    try:\n        filename = None\n        app = get_app(name=request.vars.location.split(\'/\')[0])\n        path = apath(request.vars.location, r=request)\n\n        if request.vars.filename:\n            filename = re.sub(\'[^\\w\\./]+\', \'_\', request.vars.filename)\n        else:\n            filename = os.path.split(request.vars.file.filename)[-1]\n\n        if path[-8:] == \'/models/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-9:] == \'/modules/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-13:] == \'/controllers/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-7:] == \'/views/\' and not filename[-5:] == \'.html\':\n            filename += \'.html\'\n\n        if path[-11:] == \'/languages/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        filename = os.path.join(path, filename)\n        dirpath = os.path.dirname(filename)\n\n        if not os.path.exists(dirpath):\n            os.makedirs(dirpath)\n\n        safe_write(filename, request.vars.file.file.read(), \'wb\')\n        session.flash = T(\'file "%(filename)s" uploaded\',\n                          dict(filename=filename[len(path):]))\n    except Exception:\n        if filename:\n            d = dict(filename = filename[len(path):])\n        else:\n            d = dict(filename = \'unkown\')\n        session.flash = T(\'cannot upload file "%(filename)s"\', d)\n\n    redirect(request.vars.sender)\n\n\ndef errors():\n    """ Error handler """\n    import operator\n    import os\n    import pickle\n    import hashlib\n\n    app = get_app()\n\n    method = request.args(1) or \'new\'\n    db_ready = {}\n    db_ready[\'status\'] = get_ticket_storage(app)\n    db_ready[\'errmessage\'] = "No ticket_storage.txt found under /private folder"\n    db_ready[\'errlink\'] = "http://web2py.com/books/default/chapter/29/13#Collecting-tickets"\n\n    if method == \'new\':\n        errors_path = apath(\'%s/errors\' % app, r=request)\n\n        delete_hashes = []\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                delete_hashes.append(item[7:])\n\n        hash2error = dict()\n\n        for fn in listdir(errors_path, \'^\\w.*\'):\n            fullpath = os.path.join(errors_path, fn)\n            if not os.path.isfile(fullpath): continue\n            try:\n                fullpath_file = open(fullpath, \'r\')\n                try:\n                    error = pickle.load(fullpath_file)\n                finally:\n                    fullpath_file.close()\n            except IOError:\n                continue\n\n            hash = hashlib.md5(error[\'traceback\']).hexdigest()\n\n            if hash in delete_hashes:\n                os.unlink(fullpath)\n            else:\n                try:\n                    hash2error[hash][\'count\'] += 1\n                except KeyError:\n                    error_lines = error[\'traceback\'].split("\\n")\n                    last_line = error_lines[-2]\n                    error_causer = os.path.split(error[\'layer\'])[1]\n                    hash2error[hash] = dict(count=1, pickel=error,\n                                            causer=error_causer,\n                                            last_line=last_line,\n                                            hash=hash,ticket=fn)\n\n        decorated = [(x[\'count\'], x) for x in hash2error.values()]\n        decorated.sort(key=operator.itemgetter(0), reverse=True)\n\n        return dict(errors = [x[1] for x in decorated], app=app, method=method, db_ready=db_ready)\n\n    elif method == \'dbnew\':\n        errors_path = apath(\'%s/errors\' % app, r=request)\n        tk_db, tk_table = get_ticket_storage(app)\n\n        delete_hashes = []\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                delete_hashes.append(item[7:])\n\n        hash2error = dict()\n\n        for fn in tk_db(tk_table.id>0).select():\n            try:\n                error = pickle.loads(fn.ticket_data)\n            except AttributeError:\n                tk_db(tk_table.id == fn.id).delete()\n                tk_db.commit()\n\n            hash = hashlib.md5(error[\'traceback\']).hexdigest()\n\n            if hash in delete_hashes:\n                tk_db(tk_table.id == fn.id).delete()\n                tk_db.commit()\n            else:\n                try:\n                    hash2error[\'hash\'][\'count\'] += 1\n                except KeyError:\n                    error_lines = error[\'traceback\'].split("\\n")\n                    last_line = error_lines[-2]\n                    error_causer = os.path.split(error[\'layer\'])[1]\n                    hash2error[hash] = dict(count=1, pickel=error,\n                                            causer=error_causer,\n                                            last_line=last_line,\n                                            hash=hash,ticket=fn.ticket_id)\n\n        decorated = [(x[\'count\'], x) for x in hash2error.values()]\n\n        decorated.sort(key=operator.itemgetter(0), reverse=True)\n\n        return dict(errors = [x[1] for x in decorated], app=app, method=method)\n\n    elif method == \'dbold\':\n        tk_db, tk_table = get_ticket_storage(app)\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                tk_db(tk_table.ticket_id == item[7:]).delete()\n                tk_db.commit()\n        tickets_ = tk_db(tk_table.id>0).select(tk_table.ticket_id, tk_table.created_datetime, orderby=~tk_table.created_datetime)\n        tickets = [row.ticket_id for row in tickets_]\n        times = dict([(row.ticket_id, row.created_datetime) for row in tickets_])\n\n        return dict(app=app, tickets=tickets, method=method, times=times)\n\n    else:\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                os.unlink(apath(\'%s/errors/%s\' % (app, item[7:]), r=request))\n        func = lambda p: os.stat(apath(\'%s/errors/%s\' % \\\n                                           (app, p), r=request)).st_mtime\n        tickets = sorted(listdir(apath(\'%s/errors/\' % app, r=request), \'^\\w.*\'),\n                         key=func,\n                         reverse=True)\n\n        return dict(app=app, tickets=tickets, method=method, db_ready=db_ready)\n\ndef get_ticket_storage(app):\n    private_folder = apath(\'%s/private\' % app, r=request)\n    ticket_file = os.path.join(private_folder, \'ticket_storage.txt\')\n    if os.path.exists(ticket_file):\n        db_string = open(ticket_file).read()\n        db_string = db_string.strip().replace(\'\\r\',\'\').replace(\'\\n\',\'\')\n    else:\n        return False\n    tickets_table = \'web2py_ticket\'\n    tablename = tickets_table + \'_\' + app\n    db_path = apath(\'%s/databases\' % app, r=request)\n    ticketsdb = DAL(db_string, folder=db_path, auto_import=True)\n    if not ticketsdb.get(tablename):\n        table = ticketsdb.define_table(\n                tablename,\n                Field(\'ticket_id\', length=100),\n                Field(\'ticket_data\', \'text\'),\n                Field(\'created_datetime\', \'datetime\'),\n                )\n    return ticketsdb , ticketsdb.get(tablename)\n\ndef make_link(path):\n    """ Create a link from a path """\n    tryFile = path.replace(\'\\\\\', \'/\')\n\n    if os.path.isabs(tryFile) and os.path.isfile(tryFile):\n        (folder, filename) = os.path.split(tryFile)\n        (base, ext) = os.path.splitext(filename)\n        app = get_app()\n\n        editable = {\'controllers\': \'.py\', \'models\': \'.py\', \'views\': \'.html\'}\n        for key in editable.keys():\n            check_extension = folder.endswith("%s/%s" % (app,key))\n            if ext.lower() == editable[key] and check_extension:\n                return A(\'"\' + tryFile + \'"\',\n                         _href=URL(r=request,\n                         f=\'edit/%s/%s/%s\' % (app, key, filename))).xml()\n    return \'\'\n\n\ndef make_links(traceback):\n    """ Make links using the given traceback """\n\n    lwords = traceback.split(\'"\')\n\n    # Making the short circuit compatible with <= python2.4\n    result = (len(lwords) != 0) and lwords[0] or \'\'\n\n    i = 1\n\n    while i < len(lwords):\n        link = make_link(lwords[i])\n\n        if link == \'\':\n            result += \'"\' + lwords[i]\n        else:\n            result += link\n\n            if i + 1 < len(lwords):\n                result += lwords[i + 1]\n                i = i + 1\n\n        i = i + 1\n\n    return result\n\n\nclass TRACEBACK(object):\n    """ Generate the traceback """\n\n    def __init__(self, text):\n        """ TRACEBACK constructor """\n\n        self.s = make_links(CODE(text).xml())\n\n    def xml(self):\n        """ Returns the xml """\n\n        return self.s\n\n\ndef ticket():\n    """ Ticket handler """\n\n    if len(request.args) != 2:\n        session.flash = T(\'invalid ticket\')\n        redirect(URL(\'site\'))\n\n    app = get_app()\n    myversion = request.env.web2py_version\n    ticket = request.args[1]\n    e = RestrictedError()\n    e.load(request, app, ticket)\n\n    return dict(app=app,\n                ticket=ticket,\n                output=e.output,\n                traceback=(e.traceback and TRACEBACK(e.traceback)),\n                snapshot=e.snapshot,\n                code=e.code,\n                layer=e.layer,\n                myversion=myversion)\n\ndef ticketdb():\n    """ Ticket handler """\n\n    if len(request.args) != 2:\n        session.flash = T(\'invalid ticket\')\n        redirect(URL(\'site\'))\n\n    app = get_app()\n    myversion = request.env.web2py_version\n    ticket = request.args[1]\n    e = RestrictedError()\n    request.tickets_db = get_ticket_storage(app)[0]\n    e.load(request, app, ticket)\n    response.view = \'default/ticket.html\'\n    return dict(app=app,\n                ticket=ticket,\n                output=e.output,\n                traceback=(e.traceback and TRACEBACK(e.traceback)),\n                snapshot=e.snapshot,\n                code=e.code,\n                layer=e.layer,\n                myversion=myversion)\n\ndef error():\n    """ Generate a ticket (for testing) """\n    raise RuntimeError(\'admin ticket generator at your service\')\n\ndef update_languages():\n    """ Update available languages """\n\n    app = get_app()\n    update_all_languages(apath(app, r=request))\n    session.flash = T(\'Language files (static strings) updated\')\n    redirect(URL(\'design\',args=app,anchor=\'languages\'))\n\n\ndef twitter():\n    session.forget()\n    session._unlock(response)\n    import gluon.tools\n    import gluon.contrib.simplejson as sj\n    try:\n        if TWITTER_HASH:\n            page = urllib.urlopen("http://search.twitter.com/search.json?q=%%40%s" % TWITTER_HASH).read()\n            data = sj.loads(page  , encoding="utf-8")[\'results\']\n            d = dict()\n            for e in data:\n                d[e["id"]] = e\n            r = reversed(sorted(d))\n            return dict(tweets = [d[k] for k in r])\n        else:\n            return \'disabled\'\n    except Exception, e:\n        return DIV(T(\'Unable to download because:\'),BR(),str(e))\n\n\ndef user():\n    if MULTI_USER_MODE:\n        if not db(db.auth_user).count():\n            auth.settings.registration_requires_approval = False\n        return dict(form=auth())\n    else:\n        return dict(form=T("Disabled"))\n\ndef reload_routes():\n    """ Reload routes.py """\n    import gluon.rewrite\n    gluon.rewrite.load()\n    redirect(URL(\'site\'))\n\n\n\nresponse._vars=response._caller(reload_routes)\n'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'__hash__'
p12
S"<method-wrapper '__hash__' of error object at 0xa127df0>"
p13
sS'__module__'
p14
S"'sre_constants'"
p15
sS'__reduce_ex__'
p16
S'<built-in method __reduce_ex__ of error object at 0xa127df0>'
p17
sS'__getslice__'
p18
S"<method-wrapper '__getslice__' of error object at 0xa127df0>"
p19
sS'__getitem__'
p20
S"<method-wrapper '__getitem__' of error object at 0xa127df0>"
p21
sS'__setstate__'
p22
S'<built-in method __setstate__ of error object at 0xa127df0>'
p23
sS'__reduce__'
p24
S'<built-in method __reduce__ of error object at 0xa127df0>'
p25
sS'__str__'
p26
S"<method-wrapper '__str__' of error object at 0xa127df0>"
p27
sS'args'
p28
S"('unbalanced parenthesis',)"
p29
sS'__getattribute__'
p30
S"<method-wrapper '__getattribute__' of error object at 0xa127df0>"
p31
sS'__class__'
p32
S"<class 'sre_constants.error'>"
p33
sS'__delattr__'
p34
S"<method-wrapper '__delattr__' of error object at 0xa127df0>"
p35
sS'__repr__'
p36
S"<method-wrapper '__repr__' of error object at 0xa127df0>"
p37
sS'__setattr__'
p38
S"<method-wrapper '__setattr__' of error object at 0xa127df0>"
p39
sS'__dict__'
p40
S'{}'
p41
sS'__weakref__'
p42
S'None'
p43
sS'__doc__'
p44
S'None'
p45
sS'__init__'
p46
S"<method-wrapper '__init__' of error object at 0xa127df0>"
p47
sS'__new__'
p48
S'<built-in method __new__ of type object at 0xfea40>'
p49
ssS'evalue'
p50
S'unbalanced parenthesis'
p51
sS'request'
p52
ccopy_reg
_reconstructor
p53
(cgluon.html
BEAUTIFY
p54
c__builtin__
object
p55
NtRp56
(dp57
S'attributes'
p58
(dp59
sS'components'
p60
(lp61
g53
(cgluon.html
TABLE
p62
g55
NtRp63
(dp64
g58
(dp65
S'level'
p66
I5
ssS'parent'
p67
Nsg60
(lp68
g53
(cgluon.html
TR
p69
g55
NtRp70
(dp71
g58
(dp72
sg67
g63
sg60
(lp73
g53
(cgluon.html
TD
p74
g55
NtRp75
(dp76
g58
(dp77
S'_style'
p78
S'font-weight:bold;vertical-align:top'
p79
ssg67
g70
sg60
(lp80
S'ajax'
p81
asbag53
(g74
g55
NtRp82
(dp83
g58
(dp84
S'_valign'
p85
S'top'
p86
ssg67
g70
sg60
(lp87
S':'
asbag53
(g74
g55
NtRp88
(dp89
g58
(dp90
sg67
g70
sg60
(lp91
g53
(g54
g55
NtRp92
(dp93
g58
(dp94
g66
I5
ssg67
g88
sg60
(lp95
S'False'
p96
asbasbasbag53
(g69
g55
NtRp97
(dp98
g58
(dp99
sg67
g63
sg60
(lp100
g53
(g74
g55
NtRp101
(dp102
g58
(dp103
g78
g79
ssg67
g97
sg60
(lp104
S'application'
p105
asbag53
(g74
g55
NtRp106
(dp107
g58
(dp108
g85
g86
ssg67
g97
sg60
(lp109
S':'
asbag53
(g74
g55
NtRp110
(dp111
g58
(dp112
sg67
g97
sg60
(lp113
g53
(g54
g55
NtRp114
(dp115
g58
(dp116
g66
I5
ssg67
g110
sg60
(lp117
S'admin'
p118
asbasbasbag53
(g69
g55
NtRp119
(dp120
g58
(dp121
sg67
g63
sg60
(lp122
g53
(g74
g55
NtRp123
(dp124
g58
(dp125
g78
g79
ssg67
g119
sg60
(lp126
g28
asbag53
(g74
g55
NtRp127
(dp128
g58
(dp129
g85
g86
ssg67
g119
sg60
(lp130
S':'
asbag53
(g74
g55
NtRp131
(dp132
g58
(dp133
sg67
g119
sg60
(lp134
g53
(g54
g55
NtRp135
(dp136
g58
(dp137
g66
I5
ssg67
g131
sg60
(lp138
g53
(g62
g55
NtRp139
(dp140
g58
(dp141
g66
I4
ssg67
Nsg60
(lp142
sbasbasbasbag53
(g69
g55
NtRp143
(dp144
g58
(dp145
sg67
g63
sg60
(lp146
g53
(g74
g55
NtRp147
(dp148
g58
(dp149
g78
g79
ssg67
g143
sg60
(lp150
S'body'
p151
asbag53
(g74
g55
NtRp152
(dp153
g58
(dp154
g85
g86
ssg67
g143
sg60
(lp155
S':'
asbag53
(g74
g55
NtRp156
(dp157
g58
(dp158
sg67
g143
sg60
(lp159
g53
(g54
g55
NtRp160
(dp161
g58
(dp162
g66
I5
ssg67
g156
sg60
(lp163
S'<cStringIO.StringO object at 0xa1d1480>'
p164
asbasbasbag53
(g69
g55
NtRp165
(dp166
g58
(dp167
sg67
g63
sg60
(lp168
g53
(g74
g55
NtRp169
(dp170
g58
(dp171
g78
g79
ssg67
g165
sg60
(lp172
S'client'
p173
asbag53
(g74
g55
NtRp174
(dp175
g58
(dp176
g85
g86
ssg67
g165
sg60
(lp177
S':'
asbag53
(g74
g55
NtRp178
(dp179
g58
(dp180
sg67
g165
sg60
(lp181
g53
(g54
g55
NtRp182
(dp183
g58
(dp184
g66
I5
ssg67
g178
sg60
(lp185
S'127.0.0.1'
p186
asbasbasbag53
(g69
g55
NtRp187
(dp188
g58
(dp189
sg67
g63
sg60
(lp190
g53
(g74
g55
NtRp191
(dp192
g58
(dp193
g78
g79
ssg67
g187
sg60
(lp194
S'controller'
p195
asbag53
(g74
g55
NtRp196
(dp197
g58
(dp198
g85
g86
ssg67
g187
sg60
(lp199
S':'
asbag53
(g74
g55
NtRp200
(dp201
g58
(dp202
sg67
g187
sg60
(lp203
g53
(g54
g55
NtRp204
(dp205
g58
(dp206
g66
I5
ssg67
g200
sg60
(lp207
S'default'
p208
asbasbasbag53
(g69
g55
NtRp209
(dp210
g58
(dp211
sg67
g63
sg60
(lp212
g53
(g74
g55
NtRp213
(dp214
g58
(dp215
g78
g79
ssg67
g209
sg60
(lp216
S'cookies'
p217
asbag53
(g74
g55
NtRp218
(dp219
g58
(dp220
g85
g86
ssg67
g209
sg60
(lp221
S':'
asbag53
(g74
g55
NtRp222
(dp223
g58
(dp224
sg67
g209
sg60
(lp225
g53
(g54
g55
NtRp226
(dp227
g58
(dp228
g66
I5
ssg67
g222
sg60
(lp229
g53
(g62
g55
NtRp230
(dp231
g58
(dp232
g66
I4
ssg67
Nsg60
(lp233
g53
(g69
g55
NtRp234
(dp235
g58
(dp236
sg67
g230
sg60
(lp237
g53
(g74
g55
NtRp238
(dp239
g58
(dp240
g78
g79
ssg67
g234
sg60
(lp241
S'session_id_admin'
p242
asbag53
(g74
g55
NtRp243
(dp244
g58
(dp245
g85
g86
ssg67
g234
sg60
(lp246
S':'
asbag53
(g74
g55
NtRp247
(dp248
g58
(dp249
sg67
g234
sg60
(lp250
g53
(g54
g55
NtRp251
(dp252
g58
(dp253
g66
I4
ssg67
g247
sg60
(lp254
g53
(g62
g55
NtRp255
(dp256
g58
(dp257
g66
I3
ssg67
Nsg60
(lp258
g53
(g69
g55
NtRp259
(dp260
g58
(dp261
sg67
g255
sg60
(lp262
g53
(g74
g55
NtRp263
(dp264
g58
(dp265
g78
g79
ssg67
g259
sg60
(lp266
S'comment'
p267
asbag53
(g74
g55
NtRp268
(dp269
g58
(dp270
g85
g86
ssg67
g259
sg60
(lp271
S':'
asbag53
(g74
g55
NtRp272
(dp273
g58
(dp274
sg67
g259
sg60
(lp275
g53
(g54
g55
NtRp276
(dp277
g58
(dp278
g66
I3
ssg67
g272
sg60
(lp279
S''
asbasbasbag53
(g69
g55
NtRp280
(dp281
g58
(dp282
sg67
g255
sg60
(lp283
g53
(g74
g55
NtRp284
(dp285
g58
(dp286
g78
g79
ssg67
g280
sg60
(lp287
S'domain'
p288
asbag53
(g74
g55
NtRp289
(dp290
g58
(dp291
g85
g86
ssg67
g280
sg60
(lp292
S':'
asbag53
(g74
g55
NtRp293
(dp294
g58
(dp295
sg67
g280
sg60
(lp296
g53
(g54
g55
NtRp297
(dp298
g58
(dp299
g66
I3
ssg67
g293
sg60
(lp300
S''
asbasbasbag53
(g69
g55
NtRp301
(dp302
g58
(dp303
sg67
g255
sg60
(lp304
g53
(g74
g55
NtRp305
(dp306
g58
(dp307
g78
g79
ssg67
g301
sg60
(lp308
S'expires'
p309
asbag53
(g74
g55
NtRp310
(dp311
g58
(dp312
g85
g86
ssg67
g301
sg60
(lp313
S':'
asbag53
(g74
g55
NtRp314
(dp315
g58
(dp316
sg67
g301
sg60
(lp317
g53
(g54
g55
NtRp318
(dp319
g58
(dp320
g66
I3
ssg67
g314
sg60
(lp321
S''
asbasbasbag53
(g69
g55
NtRp322
(dp323
g58
(dp324
sg67
g255
sg60
(lp325
g53
(g74
g55
NtRp326
(dp327
g58
(dp328
g78
g79
ssg67
g322
sg60
(lp329
S'max-age'
p330
asbag53
(g74
g55
NtRp331
(dp332
g58
(dp333
g85
g86
ssg67
g322
sg60
(lp334
S':'
asbag53
(g74
g55
NtRp335
(dp336
g58
(dp337
sg67
g322
sg60
(lp338
g53
(g54
g55
NtRp339
(dp340
g58
(dp341
g66
I3
ssg67
g335
sg60
(lp342
S''
asbasbasbag53
(g69
g55
NtRp343
(dp344
g58
(dp345
sg67
g255
sg60
(lp346
g53
(g74
g55
NtRp347
(dp348
g58
(dp349
g78
g79
ssg67
g343
sg60
(lp350
S'path'
p351
asbag53
(g74
g55
NtRp352
(dp353
g58
(dp354
g85
g86
ssg67
g343
sg60
(lp355
S':'
asbag53
(g74
g55
NtRp356
(dp357
g58
(dp358
sg67
g343
sg60
(lp359
g53
(g54
g55
NtRp360
(dp361
g58
(dp362
g66
I3
ssg67
g356
sg60
(lp363
S''
asbasbasbag53
(g69
g55
NtRp364
(dp365
g58
(dp366
sg67
g255
sg60
(lp367
g53
(g74
g55
NtRp368
(dp369
g58
(dp370
g78
g79
ssg67
g364
sg60
(lp371
S'secure'
p372
asbag53
(g74
g55
NtRp373
(dp374
g58
(dp375
g85
g86
ssg67
g364
sg60
(lp376
S':'
asbag53
(g74
g55
NtRp377
(dp378
g58
(dp379
sg67
g364
sg60
(lp380
g53
(g54
g55
NtRp381
(dp382
g58
(dp383
g66
I3
ssg67
g377
sg60
(lp384
S''
asbasbasbag53
(g69
g55
NtRp385
(dp386
g58
(dp387
sg67
g255
sg60
(lp388
g53
(g74
g55
NtRp389
(dp390
g58
(dp391
g78
g79
ssg67
g385
sg60
(lp392
S'version'
p393
asbag53
(g74
g55
NtRp394
(dp395
g58
(dp396
g85
g86
ssg67
g385
sg60
(lp397
S':'
asbag53
(g74
g55
NtRp398
(dp399
g58
(dp400
sg67
g385
sg60
(lp401
g53
(g54
g55
NtRp402
(dp403
g58
(dp404
g66
I3
ssg67
g398
sg60
(lp405
S''
asbasbasbasbasbasbasbag53
(g69
g55
NtRp406
(dp407
g58
(dp408
sg67
g230
sg60
(lp409
g53
(g74
g55
NtRp410
(dp411
g58
(dp412
g78
g79
ssg67
g406
sg60
(lp413
S'session_id_udi0312'
p414
asbag53
(g74
g55
NtRp415
(dp416
g58
(dp417
g85
g86
ssg67
g406
sg60
(lp418
S':'
asbag53
(g74
g55
NtRp419
(dp420
g58
(dp421
sg67
g406
sg60
(lp422
g53
(g54
g55
NtRp423
(dp424
g58
(dp425
g66
I4
ssg67
g419
sg60
(lp426
g53
(g62
g55
NtRp427
(dp428
g58
(dp429
g66
I3
ssg67
Nsg60
(lp430
g53
(g69
g55
NtRp431
(dp432
g58
(dp433
sg67
g427
sg60
(lp434
g53
(g74
g55
NtRp435
(dp436
g58
(dp437
g78
g79
ssg67
g431
sg60
(lp438
g267
asbag53
(g74
g55
NtRp439
(dp440
g58
(dp441
g85
g86
ssg67
g431
sg60
(lp442
S':'
asbag53
(g74
g55
NtRp443
(dp444
g58
(dp445
sg67
g431
sg60
(lp446
g53
(g54
g55
NtRp447
(dp448
g58
(dp449
g66
I3
ssg67
g443
sg60
(lp450
S''
asbasbasbag53
(g69
g55
NtRp451
(dp452
g58
(dp453
sg67
g427
sg60
(lp454
g53
(g74
g55
NtRp455
(dp456
g58
(dp457
g78
g79
ssg67
g451
sg60
(lp458
g288
asbag53
(g74
g55
NtRp459
(dp460
g58
(dp461
g85
g86
ssg67
g451
sg60
(lp462
S':'
asbag53
(g74
g55
NtRp463
(dp464
g58
(dp465
sg67
g451
sg60
(lp466
g53
(g54
g55
NtRp467
(dp468
g58
(dp469
g66
I3
ssg67
g463
sg60
(lp470
S''
asbasbasbag53
(g69
g55
NtRp471
(dp472
g58
(dp473
sg67
g427
sg60
(lp474
g53
(g74
g55
NtRp475
(dp476
g58
(dp477
g78
g79
ssg67
g471
sg60
(lp478
g309
asbag53
(g74
g55
NtRp479
(dp480
g58
(dp481
g85
g86
ssg67
g471
sg60
(lp482
S':'
asbag53
(g74
g55
NtRp483
(dp484
g58
(dp485
sg67
g471
sg60
(lp486
g53
(g54
g55
NtRp487
(dp488
g58
(dp489
g66
I3
ssg67
g483
sg60
(lp490
S''
asbasbasbag53
(g69
g55
NtRp491
(dp492
g58
(dp493
sg67
g427
sg60
(lp494
g53
(g74
g55
NtRp495
(dp496
g58
(dp497
g78
g79
ssg67
g491
sg60
(lp498
g330
asbag53
(g74
g55
NtRp499
(dp500
g58
(dp501
g85
g86
ssg67
g491
sg60
(lp502
S':'
asbag53
(g74
g55
NtRp503
(dp504
g58
(dp505
sg67
g491
sg60
(lp506
g53
(g54
g55
NtRp507
(dp508
g58
(dp509
g66
I3
ssg67
g503
sg60
(lp510
S''
asbasbasbag53
(g69
g55
NtRp511
(dp512
g58
(dp513
sg67
g427
sg60
(lp514
g53
(g74
g55
NtRp515
(dp516
g58
(dp517
g78
g79
ssg67
g511
sg60
(lp518
g351
asbag53
(g74
g55
NtRp519
(dp520
g58
(dp521
g85
g86
ssg67
g511
sg60
(lp522
S':'
asbag53
(g74
g55
NtRp523
(dp524
g58
(dp525
sg67
g511
sg60
(lp526
g53
(g54
g55
NtRp527
(dp528
g58
(dp529
g66
I3
ssg67
g523
sg60
(lp530
S''
asbasbasbag53
(g69
g55
NtRp531
(dp532
g58
(dp533
sg67
g427
sg60
(lp534
g53
(g74
g55
NtRp535
(dp536
g58
(dp537
g78
g79
ssg67
g531
sg60
(lp538
g372
asbag53
(g74
g55
NtRp539
(dp540
g58
(dp541
g85
g86
ssg67
g531
sg60
(lp542
S':'
asbag53
(g74
g55
NtRp543
(dp544
g58
(dp545
sg67
g531
sg60
(lp546
g53
(g54
g55
NtRp547
(dp548
g58
(dp549
g66
I3
ssg67
g543
sg60
(lp550
S''
asbasbasbag53
(g69
g55
NtRp551
(dp552
g58
(dp553
sg67
g427
sg60
(lp554
g53
(g74
g55
NtRp555
(dp556
g58
(dp557
g78
g79
ssg67
g551
sg60
(lp558
g393
asbag53
(g74
g55
NtRp559
(dp560
g58
(dp561
g85
g86
ssg67
g551
sg60
(lp562
S':'
asbag53
(g74
g55
NtRp563
(dp564
g58
(dp565
sg67
g551
sg60
(lp566
g53
(g54
g55
NtRp567
(dp568
g58
(dp569
g66
I3
ssg67
g563
sg60
(lp570
S''
asbasbasbasbasbasbasbasbasbasbasbag53
(g69
g55
NtRp571
(dp572
g58
(dp573
sg67
g63
sg60
(lp574
g53
(g74
g55
NtRp575
(dp576
g58
(dp577
g78
g79
ssg67
g571
sg60
(lp578
S'env'
p579
asbag53
(g74
g55
NtRp580
(dp581
g58
(dp582
g85
g86
ssg67
g571
sg60
(lp583
S':'
asbag53
(g74
g55
NtRp584
(dp585
g58
(dp586
sg67
g571
sg60
(lp587
g53
(g54
g55
NtRp588
(dp589
g58
(dp590
g66
I5
ssg67
g584
sg60
(lp591
g53
(g62
g55
NtRp592
(dp593
g58
(dp594
g66
I4
ssg67
Nsg60
(lp595
g53
(g69
g55
NtRp596
(dp597
g58
(dp598
sg67
g592
sg60
(lp599
g53
(g74
g55
NtRp600
(dp601
g58
(dp602
g78
g79
ssg67
g596
sg60
(lp603
S'app_folders'
p604
asbag53
(g74
g55
NtRp605
(dp606
g58
(dp607
g85
g86
ssg67
g596
sg60
(lp608
S':'
asbag53
(g74
g55
NtRp609
(dp610
g58
(dp611
sg67
g596
sg60
(lp612
g53
(g54
g55
NtRp613
(dp614
g58
(dp615
g66
I4
ssg67
g609
sg60
(lp616
S"set(['/Users/udimilo/Documents/web2py/applications/udi0312/', '/Users/udimilo/Documents/web2py/applications/admin/'])"
p617
asbasbasbag53
(g69
g55
NtRp618
(dp619
g58
(dp620
sg67
g592
sg60
(lp621
g53
(g74
g55
NtRp622
(dp623
g58
(dp624
g78
g79
ssg67
g618
sg60
(lp625
S'applications_parent'
p626
asbag53
(g74
g55
NtRp627
(dp628
g58
(dp629
g85
g86
ssg67
g618
sg60
(lp630
S':'
asbag53
(g74
g55
NtRp631
(dp632
g58
(dp633
sg67
g618
sg60
(lp634
g53
(g54
g55
NtRp635
(dp636
g58
(dp637
g66
I4
ssg67
g631
sg60
(lp638
S'/Users/udimilo/Documents/web2py'
p639
asbasbasbag53
(g69
g55
NtRp640
(dp641
g58
(dp642
sg67
g592
sg60
(lp643
g53
(g74
g55
NtRp644
(dp645
g58
(dp646
g78
g79
ssg67
g640
sg60
(lp647
S'cmd_args'
p648
asbag53
(g74
g55
NtRp649
(dp650
g58
(dp651
g85
g86
ssg67
g640
sg60
(lp652
S':'
asbag53
(g74
g55
NtRp653
(dp654
g58
(dp655
sg67
g640
sg60
(lp656
g53
(g54
g55
NtRp657
(dp658
g58
(dp659
g66
I4
ssg67
g653
sg60
(lp660
g53
(g62
g55
NtRp661
(dp662
g58
(dp663
g66
I3
ssg67
Nsg60
(lp664
sbasbasbasbag53
(g69
g55
NtRp665
(dp666
g58
(dp667
sg67
g592
sg60
(lp668
g53
(g74
g55
NtRp669
(dp670
g58
(dp671
g78
g79
ssg67
g665
sg60
(lp672
S'cmd_options'
p673
asbag53
(g74
g55
NtRp674
(dp675
g58
(dp676
g85
g86
ssg67
g665
sg60
(lp677
S':'
asbag53
(g74
g55
NtRp678
(dp679
g58
(dp680
sg67
g665
sg60
(lp681
g53
(g54
g55
NtRp682
(dp683
g58
(dp684
g66
I4
ssg67
g678
sg60
(lp685
S"<Values at 0x23196e8: {'verbose': False, 'ip': '127.0.0.1', 'shutdown_timeout': 5, 'taskbar': False, 'nocron': False, 'pid_filename': 'httpserver.pid', 'maxthreads': None, 'softcron': False, 'server_name': 'Udi-Milos-MacBook-Pro.local', 'bpython': False, 'nogui': False, 'port': 8000, 'extcron': False, 'debuglevel': 30, 'test': None, 'folder': '/Users/udimilo/Documents/web2py', 'config': '', 'import_models': False, 'winservice': '', 'shell': None, 'run': '', 'log_filename': 'httpserver.log', 'args': [''], 'socket_timeout': 5, 'ssl_ca_certificate': None, 'scheduler': None, 'profiler_filename': None, 'ssl_private_key': '', 'password': '<ask>', 'request_queue_size': 5, 'ssl_certificate': '', 'cronjob': False, 'numthreads': None, 'quiet': False, 'interfaces': None, 'minthreads': None, 'timeout': 10, 'plain': False, 'nobanner': False}>"
p686
asbasbasbag53
(g69
g55
NtRp687
(dp688
g58
(dp689
sg67
g592
sg60
(lp690
g53
(g74
g55
NtRp691
(dp692
g58
(dp693
g78
g79
ssg67
g687
sg60
(lp694
S'db_sessions'
p695
asbag53
(g74
g55
NtRp696
(dp697
g58
(dp698
g85
g86
ssg67
g687
sg60
(lp699
S':'
asbag53
(g74
g55
NtRp700
(dp701
g58
(dp702
sg67
g687
sg60
(lp703
g53
(g54
g55
NtRp704
(dp705
g58
(dp706
g66
I4
ssg67
g700
sg60
(lp707
S'set([])'
p708
asbasbasbag53
(g69
g55
NtRp709
(dp710
g58
(dp711
sg67
g592
sg60
(lp712
g53
(g74
g55
NtRp713
(dp714
g58
(dp715
g78
g79
ssg67
g709
sg60
(lp716
S'debugging'
p717
asbag53
(g74
g55
NtRp718
(dp719
g58
(dp720
g85
g86
ssg67
g709
sg60
(lp721
S':'
asbag53
(g74
g55
NtRp722
(dp723
g58
(dp724
sg67
g709
sg60
(lp725
g53
(g54
g55
NtRp726
(dp727
g58
(dp728
g66
I4
ssg67
g722
sg60
(lp729
g96
asbasbasbag53
(g69
g55
NtRp730
(dp731
g58
(dp732
sg67
g592
sg60
(lp733
g53
(g74
g55
NtRp734
(dp735
g58
(dp736
g78
g79
ssg67
g730
sg60
(lp737
S'gluon_parent'
p738
asbag53
(g74
g55
NtRp739
(dp740
g58
(dp741
g85
g86
ssg67
g730
sg60
(lp742
S':'
asbag53
(g74
g55
NtRp743
(dp744
g58
(dp745
sg67
g730
sg60
(lp746
g53
(g54
g55
NtRp747
(dp748
g58
(dp749
g66
I4
ssg67
g743
sg60
(lp750
S'/Users/udimilo/Documents/web2py'
p751
asbasbasbag53
(g69
g55
NtRp752
(dp753
g58
(dp754
sg67
g592
sg60
(lp755
g53
(g74
g55
NtRp756
(dp757
g58
(dp758
g78
g79
ssg67
g752
sg60
(lp759
S'http_accept'
p760
asbag53
(g74
g55
NtRp761
(dp762
g58
(dp763
g85
g86
ssg67
g752
sg60
(lp764
S':'
asbag53
(g74
g55
NtRp765
(dp766
g58
(dp767
sg67
g752
sg60
(lp768
g53
(g54
g55
NtRp769
(dp770
g58
(dp771
g66
I4
ssg67
g765
sg60
(lp772
S'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
p773
asbasbasbag53
(g69
g55
NtRp774
(dp775
g58
(dp776
sg67
g592
sg60
(lp777
g53
(g74
g55
NtRp778
(dp779
g58
(dp780
g78
g79
ssg67
g774
sg60
(lp781
S'http_accept_charset'
p782
asbag53
(g74
g55
NtRp783
(dp784
g58
(dp785
g85
g86
ssg67
g774
sg60
(lp786
S':'
asbag53
(g74
g55
NtRp787
(dp788
g58
(dp789
sg67
g774
sg60
(lp790
g53
(g54
g55
NtRp791
(dp792
g58
(dp793
g66
I4
ssg67
g787
sg60
(lp794
S'ISO-8859-1,utf-8;q=0.7,*;q=0.3'
p795
asbasbasbag53
(g69
g55
NtRp796
(dp797
g58
(dp798
sg67
g592
sg60
(lp799
g53
(g74
g55
NtRp800
(dp801
g58
(dp802
g78
g79
ssg67
g796
sg60
(lp803
S'http_accept_encoding'
p804
asbag53
(g74
g55
NtRp805
(dp806
g58
(dp807
g85
g86
ssg67
g796
sg60
(lp808
S':'
asbag53
(g74
g55
NtRp809
(dp810
g58
(dp811
sg67
g796
sg60
(lp812
g53
(g54
g55
NtRp813
(dp814
g58
(dp815
g66
I4
ssg67
g809
sg60
(lp816
S'gzip,deflate,sdch'
p817
asbasbasbag53
(g69
g55
NtRp818
(dp819
g58
(dp820
sg67
g592
sg60
(lp821
g53
(g74
g55
NtRp822
(dp823
g58
(dp824
g78
g79
ssg67
g818
sg60
(lp825
S'http_accept_language'
p826
asbag53
(g74
g55
NtRp827
(dp828
g58
(dp829
g85
g86
ssg67
g818
sg60
(lp830
S':'
asbag53
(g74
g55
NtRp831
(dp832
g58
(dp833
sg67
g818
sg60
(lp834
g53
(g54
g55
NtRp835
(dp836
g58
(dp837
g66
I4
ssg67
g831
sg60
(lp838
S'en-US,en;q=0.8'
p839
asbasbasbag53
(g69
g55
NtRp840
(dp841
g58
(dp842
sg67
g592
sg60
(lp843
g53
(g74
g55
NtRp844
(dp845
g58
(dp846
g78
g79
ssg67
g840
sg60
(lp847
S'http_connection'
p848
asbag53
(g74
g55
NtRp849
(dp850
g58
(dp851
g85
g86
ssg67
g840
sg60
(lp852
S':'
asbag53
(g74
g55
NtRp853
(dp854
g58
(dp855
sg67
g840
sg60
(lp856
g53
(g54
g55
NtRp857
(dp858
g58
(dp859
g66
I4
ssg67
g853
sg60
(lp860
S'keep-alive'
p861
asbasbasbag53
(g69
g55
NtRp862
(dp863
g58
(dp864
sg67
g592
sg60
(lp865
g53
(g74
g55
NtRp866
(dp867
g58
(dp868
g78
g79
ssg67
g862
sg60
(lp869
S'http_cookie'
p870
asbag53
(g74
g55
NtRp871
(dp872
g58
(dp873
g85
g86
ssg67
g862
sg60
(lp874
S':'
asbag53
(g74
g55
NtRp875
(dp876
g58
(dp877
sg67
g862
sg60
(lp878
g53
(g54
g55
NtRp879
(dp880
g58
(dp881
g66
I4
ssg67
g875
sg60
(lp882
S'session_id_admin=127.0.0.1-52792a20-d856-4035-8d0f-026eefd87da3; session_id_udi0312=127.0.0.1-fcd6a577-d448-4882-b7bc-f353da84ba3b'
p883
asbasbasbag53
(g69
g55
NtRp884
(dp885
g58
(dp886
sg67
g592
sg60
(lp887
g53
(g74
g55
NtRp888
(dp889
g58
(dp890
g78
g79
ssg67
g884
sg60
(lp891
S'http_host'
p892
asbag53
(g74
g55
NtRp893
(dp894
g58
(dp895
g85
g86
ssg67
g884
sg60
(lp896
S':'
asbag53
(g74
g55
NtRp897
(dp898
g58
(dp899
sg67
g884
sg60
(lp900
g53
(g54
g55
NtRp901
(dp902
g58
(dp903
g66
I4
ssg67
g897
sg60
(lp904
S'127.0.0.1:8000'
p905
asbasbasbag53
(g69
g55
NtRp906
(dp907
g58
(dp908
sg67
g592
sg60
(lp909
g53
(g74
g55
NtRp910
(dp911
g58
(dp912
g78
g79
ssg67
g906
sg60
(lp913
S'http_referer'
p914
asbag53
(g74
g55
NtRp915
(dp916
g58
(dp917
g85
g86
ssg67
g906
sg60
(lp918
S':'
asbag53
(g74
g55
NtRp919
(dp920
g58
(dp921
sg67
g906
sg60
(lp922
g53
(g54
g55
NtRp923
(dp924
g58
(dp925
g66
I4
ssg67
g919
sg60
(lp926
S'http://127.0.0.1:8000/admin/default/site'
p927
asbasbasbag53
(g69
g55
NtRp928
(dp929
g58
(dp930
sg67
g592
sg60
(lp931
g53
(g74
g55
NtRp932
(dp933
g58
(dp934
g78
g79
ssg67
g928
sg60
(lp935
S'http_user_agent'
p936
asbag53
(g74
g55
NtRp937
(dp938
g58
(dp939
g85
g86
ssg67
g928
sg60
(lp940
S':'
asbag53
(g74
g55
NtRp941
(dp942
g58
(dp943
sg67
g928
sg60
(lp944
g53
(g54
g55
NtRp945
(dp946
g58
(dp947
g66
I4
ssg67
g941
sg60
(lp948
S'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.79 Safari/535.11'
p949
asbasbasbag53
(g69
g55
NtRp950
(dp951
g58
(dp952
sg67
g592
sg60
(lp953
g53
(g74
g55
NtRp954
(dp955
g58
(dp956
g78
g79
ssg67
g950
sg60
(lp957
S'is_jython'
p958
asbag53
(g74
g55
NtRp959
(dp960
g58
(dp961
g85
g86
ssg67
g950
sg60
(lp962
S':'
asbag53
(g74
g55
NtRp963
(dp964
g58
(dp965
sg67
g950
sg60
(lp966
g53
(g54
g55
NtRp967
(dp968
g58
(dp969
g66
I4
ssg67
g963
sg60
(lp970
g96
asbasbasbag53
(g69
g55
NtRp971
(dp972
g58
(dp973
sg67
g592
sg60
(lp974
g53
(g74
g55
NtRp975
(dp976
g58
(dp977
g78
g79
ssg67
g971
sg60
(lp978
S'is_pypy'
p979
asbag53
(g74
g55
NtRp980
(dp981
g58
(dp982
g85
g86
ssg67
g971
sg60
(lp983
S':'
asbag53
(g74
g55
NtRp984
(dp985
g58
(dp986
sg67
g971
sg60
(lp987
g53
(g54
g55
NtRp988
(dp989
g58
(dp990
g66
I4
ssg67
g984
sg60
(lp991
g96
asbasbasbag53
(g69
g55
NtRp992
(dp993
g58
(dp994
sg67
g592
sg60
(lp995
g53
(g74
g55
NtRp996
(dp997
g58
(dp998
g78
g79
ssg67
g992
sg60
(lp999
S'path_info'
p1000
asbag53
(g74
g55
NtRp1001
(dp1002
g58
(dp1003
g85
g86
ssg67
g992
sg60
(lp1004
S':'
asbag53
(g74
g55
NtRp1005
(dp1006
g58
(dp1007
sg67
g992
sg60
(lp1008
g53
(g54
g55
NtRp1009
(dp1010
g58
(dp1011
g66
I4
ssg67
g1005
sg60
(lp1012
S'/admin/default/reload_routes'
p1013
asbasbasbag53
(g69
g55
NtRp1014
(dp1015
g58
(dp1016
sg67
g592
sg60
(lp1017
g53
(g74
g55
NtRp1018
(dp1019
g58
(dp1020
g78
g79
ssg67
g1014
sg60
(lp1021
S'query_string'
p1022
asbag53
(g74
g55
NtRp1023
(dp1024
g58
(dp1025
g85
g86
ssg67
g1014
sg60
(lp1026
S':'
asbag53
(g74
g55
NtRp1027
(dp1028
g58
(dp1029
sg67
g1014
sg60
(lp1030
g53
(g54
g55
NtRp1031
(dp1032
g58
(dp1033
g66
I4
ssg67
g1027
sg60
(lp1034
S''
asbasbasbag53
(g69
g55
NtRp1035
(dp1036
g58
(dp1037
sg67
g592
sg60
(lp1038
g53
(g74
g55
NtRp1039
(dp1040
g58
(dp1041
g78
g79
ssg67
g1035
sg60
(lp1042
S'remote_addr'
p1043
asbag53
(g74
g55
NtRp1044
(dp1045
g58
(dp1046
g85
g86
ssg67
g1035
sg60
(lp1047
S':'
asbag53
(g74
g55
NtRp1048
(dp1049
g58
(dp1050
sg67
g1035
sg60
(lp1051
g53
(g54
g55
NtRp1052
(dp1053
g58
(dp1054
g66
I4
ssg67
g1048
sg60
(lp1055
g186
asbasbasbag53
(g69
g55
NtRp1056
(dp1057
g58
(dp1058
sg67
g592
sg60
(lp1059
g53
(g74
g55
NtRp1060
(dp1061
g58
(dp1062
g78
g79
ssg67
g1056
sg60
(lp1063
S'remote_port'
p1064
asbag53
(g74
g55
NtRp1065
(dp1066
g58
(dp1067
g85
g86
ssg67
g1056
sg60
(lp1068
S':'
asbag53
(g74
g55
NtRp1069
(dp1070
g58
(dp1071
sg67
g1056
sg60
(lp1072
g53
(g54
g55
NtRp1073
(dp1074
g58
(dp1075
g66
I4
ssg67
g1069
sg60
(lp1076
S'49523'
p1077
asbasbasbag53
(g69
g55
NtRp1078
(dp1079
g58
(dp1080
sg67
g592
sg60
(lp1081
g53
(g74
g55
NtRp1082
(dp1083
g58
(dp1084
g78
g79
ssg67
g1078
sg60
(lp1085
S'request_method'
p1086
asbag53
(g74
g55
NtRp1087
(dp1088
g58
(dp1089
g85
g86
ssg67
g1078
sg60
(lp1090
S':'
asbag53
(g74
g55
NtRp1091
(dp1092
g58
(dp1093
sg67
g1078
sg60
(lp1094
g53
(g54
g55
NtRp1095
(dp1096
g58
(dp1097
g66
I4
ssg67
g1091
sg60
(lp1098
S'GET'
p1099
asbasbasbag53
(g69
g55
NtRp1100
(dp1101
g58
(dp1102
sg67
g592
sg60
(lp1103
g53
(g74
g55
NtRp1104
(dp1105
g58
(dp1106
g78
g79
ssg67
g1100
sg60
(lp1107
S'request_uri'
p1108
asbag53
(g74
g55
NtRp1109
(dp1110
g58
(dp1111
g85
g86
ssg67
g1100
sg60
(lp1112
S':'
asbag53
(g74
g55
NtRp1113
(dp1114
g58
(dp1115
sg67
g1100
sg60
(lp1116
g53
(g54
g55
NtRp1117
(dp1118
g58
(dp1119
g66
I4
ssg67
g1113
sg60
(lp1120
g1013
asbasbasbag53
(g69
g55
NtRp1121
(dp1122
g58
(dp1123
sg67
g592
sg60
(lp1124
g53
(g74
g55
NtRp1125
(dp1126
g58
(dp1127
g78
g79
ssg67
g1121
sg60
(lp1128
S'script_name'
p1129
asbag53
(g74
g55
NtRp1130
(dp1131
g58
(dp1132
g85
g86
ssg67
g1121
sg60
(lp1133
S':'
asbag53
(g74
g55
NtRp1134
(dp1135
g58
(dp1136
sg67
g1121
sg60
(lp1137
g53
(g54
g55
NtRp1138
(dp1139
g58
(dp1140
g66
I4
ssg67
g1134
sg60
(lp1141
S''
asbasbasbag53
(g69
g55
NtRp1142
(dp1143
g58
(dp1144
sg67
g592
sg60
(lp1145
g53
(g74
g55
NtRp1146
(dp1147
g58
(dp1148
g78
g79
ssg67
g1142
sg60
(lp1149
S'server_name'
p1150
asbag53
(g74
g55
NtRp1151
(dp1152
g58
(dp1153
g85
g86
ssg67
g1142
sg60
(lp1154
S':'
asbag53
(g74
g55
NtRp1155
(dp1156
g58
(dp1157
sg67
g1142
sg60
(lp1158
g53
(g54
g55
NtRp1159
(dp1160
g58
(dp1161
g66
I4
ssg67
g1155
sg60
(lp1162
S'Udi-Milos-MacBook-Pro.local'
p1163
asbasbasbag53
(g69
g55
NtRp1164
(dp1165
g58
(dp1166
sg67
g592
sg60
(lp1167
g53
(g74
g55
NtRp1168
(dp1169
g58
(dp1170
g78
g79
ssg67
g1164
sg60
(lp1171
S'server_port'
p1172
asbag53
(g74
g55
NtRp1173
(dp1174
g58
(dp1175
g85
g86
ssg67
g1164
sg60
(lp1176
S':'
asbag53
(g74
g55
NtRp1177
(dp1178
g58
(dp1179
sg67
g1164
sg60
(lp1180
g53
(g54
g55
NtRp1181
(dp1182
g58
(dp1183
g66
I4
ssg67
g1177
sg60
(lp1184
S'8000'
p1185
asbasbasbag53
(g69
g55
NtRp1186
(dp1187
g58
(dp1188
sg67
g592
sg60
(lp1189
g53
(g74
g55
NtRp1190
(dp1191
g58
(dp1192
g78
g79
ssg67
g1186
sg60
(lp1193
S'server_protocol'
p1194
asbag53
(g74
g55
NtRp1195
(dp1196
g58
(dp1197
g85
g86
ssg67
g1186
sg60
(lp1198
S':'
asbag53
(g74
g55
NtRp1199
(dp1200
g58
(dp1201
sg67
g1186
sg60
(lp1202
g53
(g54
g55
NtRp1203
(dp1204
g58
(dp1205
g66
I4
ssg67
g1199
sg60
(lp1206
S'HTTP/1.1'
p1207
asbasbasbag53
(g69
g55
NtRp1208
(dp1209
g58
(dp1210
sg67
g592
sg60
(lp1211
g53
(g74
g55
NtRp1212
(dp1213
g58
(dp1214
g78
g79
ssg67
g1208
sg60
(lp1215
S'server_software'
p1216
asbag53
(g74
g55
NtRp1217
(dp1218
g58
(dp1219
g85
g86
ssg67
g1208
sg60
(lp1220
S':'
asbag53
(g74
g55
NtRp1221
(dp1222
g58
(dp1223
sg67
g1208
sg60
(lp1224
g53
(g54
g55
NtRp1225
(dp1226
g58
(dp1227
g66
I4
ssg67
g1221
sg60
(lp1228
S'Rocket 1.2.4'
p1229
asbasbasbag53
(g69
g55
NtRp1230
(dp1231
g58
(dp1232
sg67
g592
sg60
(lp1233
g53
(g74
g55
NtRp1234
(dp1235
g58
(dp1236
g78
g79
ssg67
g1230
sg60
(lp1237
S'web2py_crontype'
p1238
asbag53
(g74
g55
NtRp1239
(dp1240
g58
(dp1241
g85
g86
ssg67
g1230
sg60
(lp1242
S':'
asbag53
(g74
g55
NtRp1243
(dp1244
g58
(dp1245
sg67
g1230
sg60
(lp1246
g53
(g54
g55
NtRp1247
(dp1248
g58
(dp1249
g66
I4
ssg67
g1243
sg60
(lp1250
S'hard'
p1251
asbasbasbag53
(g69
g55
NtRp1252
(dp1253
g58
(dp1254
sg67
g592
sg60
(lp1255
g53
(g74
g55
NtRp1256
(dp1257
g58
(dp1258
g78
g79
ssg67
g1252
sg60
(lp1259
S'web2py_original_uri'
p1260
asbag53
(g74
g55
NtRp1261
(dp1262
g58
(dp1263
g85
g86
ssg67
g1252
sg60
(lp1264
S':'
asbag53
(g74
g55
NtRp1265
(dp1266
g58
(dp1267
sg67
g1252
sg60
(lp1268
g53
(g54
g55
NtRp1269
(dp1270
g58
(dp1271
g66
I4
ssg67
g1265
sg60
(lp1272
S'/admin/default/reload_routes'
p1273
asbasbasbag53
(g69
g55
NtRp1274
(dp1275
g58
(dp1276
sg67
g592
sg60
(lp1277
g53
(g74
g55
NtRp1278
(dp1279
g58
(dp1280
g78
g79
ssg67
g1274
sg60
(lp1281
S'web2py_path'
p1282
asbag53
(g74
g55
NtRp1283
(dp1284
g58
(dp1285
g85
g86
ssg67
g1274
sg60
(lp1286
S':'
asbag53
(g74
g55
NtRp1287
(dp1288
g58
(dp1289
sg67
g1274
sg60
(lp1290
g53
(g54
g55
NtRp1291
(dp1292
g58
(dp1293
g66
I4
ssg67
g1287
sg60
(lp1294
g639
asbasbasbag53
(g69
g55
NtRp1295
(dp1296
g58
(dp1297
sg67
g592
sg60
(lp1298
g53
(g74
g55
NtRp1299
(dp1300
g58
(dp1301
g78
g79
ssg67
g1295
sg60
(lp1302
S'web2py_version'
p1303
asbag53
(g74
g55
NtRp1304
(dp1305
g58
(dp1306
g85
g86
ssg67
g1295
sg60
(lp1307
S':'
asbag53
(g74
g55
NtRp1308
(dp1309
g58
(dp1310
sg67
g1295
sg60
(lp1311
g53
(g54
g55
NtRp1312
(dp1313
g58
(dp1314
g66
I4
ssg67
g1308
sg60
(lp1315
g53
(g62
g55
NtRp1316
(dp1317
g58
(dp1318
g66
I3
ssg67
Nsg60
(lp1319
g53
(g69
g55
NtRp1320
(dp1321
g58
(dp1322
sg67
g1316
sg60
(lp1323
g53
(g74
g55
NtRp1324
(dp1325
g58
(dp1326
sg67
g1320
sg60
(lp1327
g53
(g54
g55
NtRp1328
(dp1329
g58
(dp1330
g66
I3
ssg67
g1324
sg60
(lp1331
S'1'
asbasbasbag53
(g69
g55
NtRp1332
(dp1333
g58
(dp1334
sg67
g1316
sg60
(lp1335
g53
(g74
g55
NtRp1336
(dp1337
g58
(dp1338
sg67
g1332
sg60
(lp1339
g53
(g54
g55
NtRp1340
(dp1341
g58
(dp1342
g66
I3
ssg67
g1336
sg60
(lp1343
S'99'
p1344
asbasbasbag53
(g69
g55
NtRp1345
(dp1346
g58
(dp1347
sg67
g1316
sg60
(lp1348
g53
(g74
g55
NtRp1349
(dp1350
g58
(dp1351
sg67
g1345
sg60
(lp1352
g53
(g54
g55
NtRp1353
(dp1354
g58
(dp1355
g66
I3
ssg67
g1349
sg60
(lp1356
S'7'
asbasbasbag53
(g69
g55
NtRp1357
(dp1358
g58
(dp1359
sg67
g1316
sg60
(lp1360
g53
(g74
g55
NtRp1361
(dp1362
g58
(dp1363
sg67
g1357
sg60
(lp1364
g53
(g54
g55
NtRp1365
(dp1366
g58
(dp1367
g66
I3
ssg67
g1361
sg60
(lp1368
S'datetime.datetime(2012, 3, 4, 22, 12, 8)'
p1369
asbasbasbag53
(g69
g55
NtRp1370
(dp1371
g58
(dp1372
sg67
g1316
sg60
(lp1373
g53
(g74
g55
NtRp1374
(dp1375
g58
(dp1376
sg67
g1370
sg60
(lp1377
g53
(g54
g55
NtRp1378
(dp1379
g58
(dp1380
g66
I3
ssg67
g1374
sg60
(lp1381
S'stable'
p1382
asbasbasbasbasbasbasbag53
(g69
g55
NtRp1383
(dp1384
g58
(dp1385
sg67
g592
sg60
(lp1386
g53
(g74
g55
NtRp1387
(dp1388
g58
(dp1389
g78
g79
ssg67
g1383
sg60
(lp1390
S'wsgi_errors'
p1391
asbag53
(g74
g55
NtRp1392
(dp1393
g58
(dp1394
g85
g86
ssg67
g1383
sg60
(lp1395
S':'
asbag53
(g74
g55
NtRp1396
(dp1397
g58
(dp1398
sg67
g1383
sg60
(lp1399
g53
(g54
g55
NtRp1400
(dp1401
g58
(dp1402
g66
I4
ssg67
g1396
sg60
(lp1403
S"<open file '<stderr>', mode 'w' at 0x4220b0>"
p1404
asbasbasbag53
(g69
g55
NtRp1405
(dp1406
g58
(dp1407
sg67
g592
sg60
(lp1408
g53
(g74
g55
NtRp1409
(dp1410
g58
(dp1411
g78
g79
ssg67
g1405
sg60
(lp1412
S'wsgi_file_wrapper'
p1413
asbag53
(g74
g55
NtRp1414
(dp1415
g58
(dp1416
g85
g86
ssg67
g1405
sg60
(lp1417
S':'
asbag53
(g74
g55
NtRp1418
(dp1419
g58
(dp1420
sg67
g1405
sg60
(lp1421
g53
(g54
g55
NtRp1422
(dp1423
g58
(dp1424
g66
I4
ssg67
g1418
sg60
(lp1425
S'<class wsgiref.util.FileWrapper at 0x225e6c0>'
p1426
asbasbasbag53
(g69
g55
NtRp1427
(dp1428
g58
(dp1429
sg67
g592
sg60
(lp1430
g53
(g74
g55
NtRp1431
(dp1432
g58
(dp1433
g78
g79
ssg67
g1427
sg60
(lp1434
S'wsgi_input'
p1435
asbag53
(g74
g55
NtRp1436
(dp1437
g58
(dp1438
g85
g86
ssg67
g1427
sg60
(lp1439
S':'
asbag53
(g74
g55
NtRp1440
(dp1441
g58
(dp1442
sg67
g1427
sg60
(lp1443
g53
(g54
g55
NtRp1444
(dp1445
g58
(dp1446
g66
I4
ssg67
g1440
sg60
(lp1447
S'<socket._fileobject object at 0xa0932b0>'
p1448
asbasbasbag53
(g69
g55
NtRp1449
(dp1450
g58
(dp1451
sg67
g592
sg60
(lp1452
g53
(g74
g55
NtRp1453
(dp1454
g58
(dp1455
g78
g79
ssg67
g1449
sg60
(lp1456
S'wsgi_multiprocess'
p1457
asbag53
(g74
g55
NtRp1458
(dp1459
g58
(dp1460
g85
g86
ssg67
g1449
sg60
(lp1461
S':'
asbag53
(g74
g55
NtRp1462
(dp1463
g58
(dp1464
sg67
g1449
sg60
(lp1465
g53
(g54
g55
NtRp1466
(dp1467
g58
(dp1468
g66
I4
ssg67
g1462
sg60
(lp1469
g96
asbasbasbag53
(g69
g55
NtRp1470
(dp1471
g58
(dp1472
sg67
g592
sg60
(lp1473
g53
(g74
g55
NtRp1474
(dp1475
g58
(dp1476
g78
g79
ssg67
g1470
sg60
(lp1477
S'wsgi_multithread'
p1478
asbag53
(g74
g55
NtRp1479
(dp1480
g58
(dp1481
g85
g86
ssg67
g1470
sg60
(lp1482
S':'
asbag53
(g74
g55
NtRp1483
(dp1484
g58
(dp1485
sg67
g1470
sg60
(lp1486
g53
(g54
g55
NtRp1487
(dp1488
g58
(dp1489
g66
I4
ssg67
g1483
sg60
(lp1490
S'True'
p1491
asbasbasbag53
(g69
g55
NtRp1492
(dp1493
g58
(dp1494
sg67
g592
sg60
(lp1495
g53
(g74
g55
NtRp1496
(dp1497
g58
(dp1498
g78
g79
ssg67
g1492
sg60
(lp1499
S'wsgi_run_once'
p1500
asbag53
(g74
g55
NtRp1501
(dp1502
g58
(dp1503
g85
g86
ssg67
g1492
sg60
(lp1504
S':'
asbag53
(g74
g55
NtRp1505
(dp1506
g58
(dp1507
sg67
g1492
sg60
(lp1508
g53
(g54
g55
NtRp1509
(dp1510
g58
(dp1511
g66
I4
ssg67
g1505
sg60
(lp1512
g96
asbasbasbag53
(g69
g55
NtRp1513
(dp1514
g58
(dp1515
sg67
g592
sg60
(lp1516
g53
(g74
g55
NtRp1517
(dp1518
g58
(dp1519
g78
g79
ssg67
g1513
sg60
(lp1520
S'wsgi_url_scheme'
p1521
asbag53
(g74
g55
NtRp1522
(dp1523
g58
(dp1524
g85
g86
ssg67
g1513
sg60
(lp1525
S':'
asbag53
(g74
g55
NtRp1526
(dp1527
g58
(dp1528
sg67
g1513
sg60
(lp1529
g53
(g54
g55
NtRp1530
(dp1531
g58
(dp1532
g66
I4
ssg67
g1526
sg60
(lp1533
S'http'
p1534
asbasbasbag53
(g69
g55
NtRp1535
(dp1536
g58
(dp1537
sg67
g592
sg60
(lp1538
g53
(g74
g55
NtRp1539
(dp1540
g58
(dp1541
g78
g79
ssg67
g1535
sg60
(lp1542
S'wsgi_version'
p1543
asbag53
(g74
g55
NtRp1544
(dp1545
g58
(dp1546
g85
g86
ssg67
g1535
sg60
(lp1547
S':'
asbag53
(g74
g55
NtRp1548
(dp1549
g58
(dp1550
sg67
g1535
sg60
(lp1551
g53
(g54
g55
NtRp1552
(dp1553
g58
(dp1554
g66
I4
ssg67
g1548
sg60
(lp1555
g53
(g62
g55
NtRp1556
(dp1557
g58
(dp1558
g66
I3
ssg67
Nsg60
(lp1559
g53
(g69
g55
NtRp1560
(dp1561
g58
(dp1562
sg67
g1556
sg60
(lp1563
g53
(g74
g55
NtRp1564
(dp1565
g58
(dp1566
sg67
g1560
sg60
(lp1567
g53
(g54
g55
NtRp1568
(dp1569
g58
(dp1570
g66
I3
ssg67
g1564
sg60
(lp1571
S'1'
asbasbasbag53
(g69
g55
NtRp1572
(dp1573
g58
(dp1574
sg67
g1556
sg60
(lp1575
g53
(g74
g55
NtRp1576
(dp1577
g58
(dp1578
sg67
g1572
sg60
(lp1579
g53
(g54
g55
NtRp1580
(dp1581
g58
(dp1582
g66
I3
ssg67
g1576
sg60
(lp1583
S'0'
asbasbasbasbasbasbasbasbasbasbasbag53
(g69
g55
NtRp1584
(dp1585
g58
(dp1586
sg67
g63
sg60
(lp1587
g53
(g74
g55
NtRp1588
(dp1589
g58
(dp1590
g78
g79
ssg67
g1584
sg60
(lp1591
S'extension'
p1592
asbag53
(g74
g55
NtRp1593
(dp1594
g58
(dp1595
g85
g86
ssg67
g1584
sg60
(lp1596
S':'
asbag53
(g74
g55
NtRp1597
(dp1598
g58
(dp1599
sg67
g1584
sg60
(lp1600
g53
(g54
g55
NtRp1601
(dp1602
g58
(dp1603
g66
I5
ssg67
g1597
sg60
(lp1604
S'html'
p1605
asbasbasbag53
(g69
g55
NtRp1606
(dp1607
g58
(dp1608
sg67
g63
sg60
(lp1609
g53
(g74
g55
NtRp1610
(dp1611
g58
(dp1612
g78
g79
ssg67
g1606
sg60
(lp1613
S'folder'
p1614
asbag53
(g74
g55
NtRp1615
(dp1616
g58
(dp1617
g85
g86
ssg67
g1606
sg60
(lp1618
S':'
asbag53
(g74
g55
NtRp1619
(dp1620
g58
(dp1621
sg67
g1606
sg60
(lp1622
g53
(g54
g55
NtRp1623
(dp1624
g58
(dp1625
g66
I5
ssg67
g1619
sg60
(lp1626
S'/Users/udimilo/Documents/web2py/applications/admin/'
p1627
asbasbasbag53
(g69
g55
NtRp1628
(dp1629
g58
(dp1630
sg67
g63
sg60
(lp1631
g53
(g74
g55
NtRp1632
(dp1633
g58
(dp1634
g78
g79
ssg67
g1628
sg60
(lp1635
S'function'
p1636
asbag53
(g74
g55
NtRp1637
(dp1638
g58
(dp1639
g85
g86
ssg67
g1628
sg60
(lp1640
S':'
asbag53
(g74
g55
NtRp1641
(dp1642
g58
(dp1643
sg67
g1628
sg60
(lp1644
g53
(g54
g55
NtRp1645
(dp1646
g58
(dp1647
g66
I5
ssg67
g1641
sg60
(lp1648
S'reload_routes'
p1649
asbasbasbag53
(g69
g55
NtRp1650
(dp1651
g58
(dp1652
sg67
g63
sg60
(lp1653
g53
(g74
g55
NtRp1654
(dp1655
g58
(dp1656
g78
g79
ssg67
g1650
sg60
(lp1657
S'get_vars'
p1658
asbag53
(g74
g55
NtRp1659
(dp1660
g58
(dp1661
g85
g86
ssg67
g1650
sg60
(lp1662
S':'
asbag53
(g74
g55
NtRp1663
(dp1664
g58
(dp1665
sg67
g1650
sg60
(lp1666
g53
(g54
g55
NtRp1667
(dp1668
g58
(dp1669
g66
I5
ssg67
g1663
sg60
(lp1670
g53
(g62
g55
NtRp1671
(dp1672
g58
(dp1673
g66
I4
ssg67
Nsg60
(lp1674
sbasbasbasbag53
(g69
g55
NtRp1675
(dp1676
g58
(dp1677
sg67
g63
sg60
(lp1678
g53
(g74
g55
NtRp1679
(dp1680
g58
(dp1681
g78
g79
ssg67
g1675
sg60
(lp1682
S'global_settings'
p1683
asbag53
(g74
g55
NtRp1684
(dp1685
g58
(dp1686
g85
g86
ssg67
g1675
sg60
(lp1687
S':'
asbag53
(g74
g55
NtRp1688
(dp1689
g58
(dp1690
sg67
g1675
sg60
(lp1691
g53
(g54
g55
NtRp1692
(dp1693
g58
(dp1694
g66
I5
ssg67
g1688
sg60
(lp1695
g53
(g62
g55
NtRp1696
(dp1697
g58
(dp1698
g66
I4
ssg67
Nsg60
(lp1699
g53
(g69
g55
NtRp1700
(dp1701
g58
(dp1702
sg67
g1696
sg60
(lp1703
g53
(g74
g55
NtRp1704
(dp1705
g58
(dp1706
g78
g79
ssg67
g1700
sg60
(lp1707
g604
asbag53
(g74
g55
NtRp1708
(dp1709
g58
(dp1710
g85
g86
ssg67
g1700
sg60
(lp1711
S':'
asbag53
(g74
g55
NtRp1712
(dp1713
g58
(dp1714
sg67
g1700
sg60
(lp1715
g53
(g54
g55
NtRp1716
(dp1717
g58
(dp1718
g66
I4
ssg67
g1712
sg60
(lp1719
S"set(['/Users/udimilo/Documents/web2py/applications/udi0312/', '/Users/udimilo/Documents/web2py/applications/admin/'])"
p1720
asbasbasbag53
(g69
g55
NtRp1721
(dp1722
g58
(dp1723
sg67
g1696
sg60
(lp1724
g53
(g74
g55
NtRp1725
(dp1726
g58
(dp1727
g78
g79
ssg67
g1721
sg60
(lp1728
g626
asbag53
(g74
g55
NtRp1729
(dp1730
g58
(dp1731
g85
g86
ssg67
g1721
sg60
(lp1732
S':'
asbag53
(g74
g55
NtRp1733
(dp1734
g58
(dp1735
sg67
g1721
sg60
(lp1736
g53
(g54
g55
NtRp1737
(dp1738
g58
(dp1739
g66
I4
ssg67
g1733
sg60
(lp1740
g639
asbasbasbag53
(g69
g55
NtRp1741
(dp1742
g58
(dp1743
sg67
g1696
sg60
(lp1744
g53
(g74
g55
NtRp1745
(dp1746
g58
(dp1747
g78
g79
ssg67
g1741
sg60
(lp1748
g648
asbag53
(g74
g55
NtRp1749
(dp1750
g58
(dp1751
g85
g86
ssg67
g1741
sg60
(lp1752
S':'
asbag53
(g74
g55
NtRp1753
(dp1754
g58
(dp1755
sg67
g1741
sg60
(lp1756
g53
(g54
g55
NtRp1757
(dp1758
g58
(dp1759
g66
I4
ssg67
g1753
sg60
(lp1760
g53
(g62
g55
NtRp1761
(dp1762
g58
(dp1763
g66
I3
ssg67
Nsg60
(lp1764
sbasbasbasbag53
(g69
g55
NtRp1765
(dp1766
g58
(dp1767
sg67
g1696
sg60
(lp1768
g53
(g74
g55
NtRp1769
(dp1770
g58
(dp1771
g78
g79
ssg67
g1765
sg60
(lp1772
g673
asbag53
(g74
g55
NtRp1773
(dp1774
g58
(dp1775
g85
g86
ssg67
g1765
sg60
(lp1776
S':'
asbag53
(g74
g55
NtRp1777
(dp1778
g58
(dp1779
sg67
g1765
sg60
(lp1780
g53
(g54
g55
NtRp1781
(dp1782
g58
(dp1783
g66
I4
ssg67
g1777
sg60
(lp1784
S"<Values at 0x23196e8: {'verbose': False, 'ip': '127.0.0.1', 'shutdown_timeout': 5, 'taskbar': False, 'nocron': False, 'pid_filename': 'httpserver.pid', 'maxthreads': None, 'softcron': False, 'server_name': 'Udi-Milos-MacBook-Pro.local', 'bpython': False, 'nogui': False, 'port': 8000, 'extcron': False, 'debuglevel': 30, 'test': None, 'folder': '/Users/udimilo/Documents/web2py', 'config': '', 'import_models': False, 'winservice': '', 'shell': None, 'run': '', 'log_filename': 'httpserver.log', 'args': [''], 'socket_timeout': 5, 'ssl_ca_certificate': None, 'scheduler': None, 'profiler_filename': None, 'ssl_private_key': '', 'password': '<ask>', 'request_queue_size': 5, 'ssl_certificate': '', 'cronjob': False, 'numthreads': None, 'quiet': False, 'interfaces': None, 'minthreads': None, 'timeout': 10, 'plain': False, 'nobanner': False}>"
p1785
asbasbasbag53
(g69
g55
NtRp1786
(dp1787
g58
(dp1788
sg67
g1696
sg60
(lp1789
g53
(g74
g55
NtRp1790
(dp1791
g58
(dp1792
g78
g79
ssg67
g1786
sg60
(lp1793
g695
asbag53
(g74
g55
NtRp1794
(dp1795
g58
(dp1796
g85
g86
ssg67
g1786
sg60
(lp1797
S':'
asbag53
(g74
g55
NtRp1798
(dp1799
g58
(dp1800
sg67
g1786
sg60
(lp1801
g53
(g54
g55
NtRp1802
(dp1803
g58
(dp1804
g66
I4
ssg67
g1798
sg60
(lp1805
S'set([])'
p1806
asbasbasbag53
(g69
g55
NtRp1807
(dp1808
g58
(dp1809
sg67
g1696
sg60
(lp1810
g53
(g74
g55
NtRp1811
(dp1812
g58
(dp1813
g78
g79
ssg67
g1807
sg60
(lp1814
g717
asbag53
(g74
g55
NtRp1815
(dp1816
g58
(dp1817
g85
g86
ssg67
g1807
sg60
(lp1818
S':'
asbag53
(g74
g55
NtRp1819
(dp1820
g58
(dp1821
sg67
g1807
sg60
(lp1822
g53
(g54
g55
NtRp1823
(dp1824
g58
(dp1825
g66
I4
ssg67
g1819
sg60
(lp1826
g96
asbasbasbag53
(g69
g55
NtRp1827
(dp1828
g58
(dp1829
sg67
g1696
sg60
(lp1830
g53
(g74
g55
NtRp1831
(dp1832
g58
(dp1833
g78
g79
ssg67
g1827
sg60
(lp1834
g738
asbag53
(g74
g55
NtRp1835
(dp1836
g58
(dp1837
g85
g86
ssg67
g1827
sg60
(lp1838
S':'
asbag53
(g74
g55
NtRp1839
(dp1840
g58
(dp1841
sg67
g1827
sg60
(lp1842
g53
(g54
g55
NtRp1843
(dp1844
g58
(dp1845
g66
I4
ssg67
g1839
sg60
(lp1846
g751
asbasbasbag53
(g69
g55
NtRp1847
(dp1848
g58
(dp1849
sg67
g1696
sg60
(lp1850
g53
(g74
g55
NtRp1851
(dp1852
g58
(dp1853
g78
g79
ssg67
g1847
sg60
(lp1854
g958
asbag53
(g74
g55
NtRp1855
(dp1856
g58
(dp1857
g85
g86
ssg67
g1847
sg60
(lp1858
S':'
asbag53
(g74
g55
NtRp1859
(dp1860
g58
(dp1861
sg67
g1847
sg60
(lp1862
g53
(g54
g55
NtRp1863
(dp1864
g58
(dp1865
g66
I4
ssg67
g1859
sg60
(lp1866
g96
asbasbasbag53
(g69
g55
NtRp1867
(dp1868
g58
(dp1869
sg67
g1696
sg60
(lp1870
g53
(g74
g55
NtRp1871
(dp1872
g58
(dp1873
g78
g79
ssg67
g1867
sg60
(lp1874
g979
asbag53
(g74
g55
NtRp1875
(dp1876
g58
(dp1877
g85
g86
ssg67
g1867
sg60
(lp1878
S':'
asbag53
(g74
g55
NtRp1879
(dp1880
g58
(dp1881
sg67
g1867
sg60
(lp1882
g53
(g54
g55
NtRp1883
(dp1884
g58
(dp1885
g66
I4
ssg67
g1879
sg60
(lp1886
g96
asbasbasbag53
(g69
g55
NtRp1887
(dp1888
g58
(dp1889
sg67
g1696
sg60
(lp1890
g53
(g74
g55
NtRp1891
(dp1892
g58
(dp1893
g78
g79
ssg67
g1887
sg60
(lp1894
g1238
asbag53
(g74
g55
NtRp1895
(dp1896
g58
(dp1897
g85
g86
ssg67
g1887
sg60
(lp1898
S':'
asbag53
(g74
g55
NtRp1899
(dp1900
g58
(dp1901
sg67
g1887
sg60
(lp1902
g53
(g54
g55
NtRp1903
(dp1904
g58
(dp1905
g66
I4
ssg67
g1899
sg60
(lp1906
g1251
asbasbasbag53
(g69
g55
NtRp1907
(dp1908
g58
(dp1909
sg67
g1696
sg60
(lp1910
g53
(g74
g55
NtRp1911
(dp1912
g58
(dp1913
g78
g79
ssg67
g1907
sg60
(lp1914
g1303
asbag53
(g74
g55
NtRp1915
(dp1916
g58
(dp1917
g85
g86
ssg67
g1907
sg60
(lp1918
S':'
asbag53
(g74
g55
NtRp1919
(dp1920
g58
(dp1921
sg67
g1907
sg60
(lp1922
g53
(g54
g55
NtRp1923
(dp1924
g58
(dp1925
g66
I4
ssg67
g1919
sg60
(lp1926
g53
(g62
g55
NtRp1927
(dp1928
g58
(dp1929
g66
I3
ssg67
Nsg60
(lp1930
g53
(g69
g55
NtRp1931
(dp1932
g58
(dp1933
sg67
g1927
sg60
(lp1934
g53
(g74
g55
NtRp1935
(dp1936
g58
(dp1937
sg67
g1931
sg60
(lp1938
g53
(g54
g55
NtRp1939
(dp1940
g58
(dp1941
g66
I3
ssg67
g1935
sg60
(lp1942
S'1'
asbasbasbag53
(g69
g55
NtRp1943
(dp1944
g58
(dp1945
sg67
g1927
sg60
(lp1946
g53
(g74
g55
NtRp1947
(dp1948
g58
(dp1949
sg67
g1943
sg60
(lp1950
g53
(g54
g55
NtRp1951
(dp1952
g58
(dp1953
g66
I3
ssg67
g1947
sg60
(lp1954
S'99'
p1955
asbasbasbag53
(g69
g55
NtRp1956
(dp1957
g58
(dp1958
sg67
g1927
sg60
(lp1959
g53
(g74
g55
NtRp1960
(dp1961
g58
(dp1962
sg67
g1956
sg60
(lp1963
g53
(g54
g55
NtRp1964
(dp1965
g58
(dp1966
g66
I3
ssg67
g1960
sg60
(lp1967
S'7'
asbasbasbag53
(g69
g55
NtRp1968
(dp1969
g58
(dp1970
sg67
g1927
sg60
(lp1971
g53
(g74
g55
NtRp1972
(dp1973
g58
(dp1974
sg67
g1968
sg60
(lp1975
g53
(g54
g55
NtRp1976
(dp1977
g58
(dp1978
g66
I3
ssg67
g1972
sg60
(lp1979
S'datetime.datetime(2012, 3, 4, 22, 12, 8)'
p1980
asbasbasbag53
(g69
g55
NtRp1981
(dp1982
g58
(dp1983
sg67
g1927
sg60
(lp1984
g53
(g74
g55
NtRp1985
(dp1986
g58
(dp1987
sg67
g1981
sg60
(lp1988
g53
(g54
g55
NtRp1989
(dp1990
g58
(dp1991
g66
I3
ssg67
g1985
sg60
(lp1992
g1382
asbasbasbasbasbasbasbasbasbasbasbag53
(g69
g55
NtRp1993
(dp1994
g58
(dp1995
sg67
g63
sg60
(lp1996
g53
(g74
g55
NtRp1997
(dp1998
g58
(dp1999
g78
g79
ssg67
g1993
sg60
(lp2000
S'is_https'
p2001
asbag53
(g74
g55
NtRp2002
(dp2003
g58
(dp2004
g85
g86
ssg67
g1993
sg60
(lp2005
S':'
asbag53
(g74
g55
NtRp2006
(dp2007
g58
(dp2008
sg67
g1993
sg60
(lp2009
g53
(g54
g55
NtRp2010
(dp2011
g58
(dp2012
g66
I5
ssg67
g2006
sg60
(lp2013
g96
asbasbasbag53
(g69
g55
NtRp2014
(dp2015
g58
(dp2016
sg67
g63
sg60
(lp2017
g53
(g74
g55
NtRp2018
(dp2019
g58
(dp2020
g78
g79
ssg67
g2014
sg60
(lp2021
S'is_local'
p2022
asbag53
(g74
g55
NtRp2023
(dp2024
g58
(dp2025
g85
g86
ssg67
g2014
sg60
(lp2026
S':'
asbag53
(g74
g55
NtRp2027
(dp2028
g58
(dp2029
sg67
g2014
sg60
(lp2030
g53
(g54
g55
NtRp2031
(dp2032
g58
(dp2033
g66
I5
ssg67
g2027
sg60
(lp2034
g1491
asbasbasbag53
(g69
g55
NtRp2035
(dp2036
g58
(dp2037
sg67
g63
sg60
(lp2038
g53
(g74
g55
NtRp2039
(dp2040
g58
(dp2041
g78
g79
ssg67
g2035
sg60
(lp2042
S'is_restful'
p2043
asbag53
(g74
g55
NtRp2044
(dp2045
g58
(dp2046
g85
g86
ssg67
g2035
sg60
(lp2047
S':'
asbag53
(g74
g55
NtRp2048
(dp2049
g58
(dp2050
sg67
g2035
sg60
(lp2051
g53
(g54
g55
NtRp2052
(dp2053
g58
(dp2054
g66
I5
ssg67
g2048
sg60
(lp2055
g96
asbasbasbag53
(g69
g55
NtRp2056
(dp2057
g58
(dp2058
sg67
g63
sg60
(lp2059
g53
(g74
g55
NtRp2060
(dp2061
g58
(dp2062
g78
g79
ssg67
g2056
sg60
(lp2063
S'now'
p2064
asbag53
(g74
g55
NtRp2065
(dp2066
g58
(dp2067
g85
g86
ssg67
g2056
sg60
(lp2068
S':'
asbag53
(g74
g55
NtRp2069
(dp2070
g58
(dp2071
sg67
g2056
sg60
(lp2072
g53
(g54
g55
NtRp2073
(dp2074
g58
(dp2075
g66
I5
ssg67
g2069
sg60
(lp2076
S'datetime.datetime(2012, 3, 18, 16, 58, 35, 731107)'
p2077
asbasbasbag53
(g69
g55
NtRp2078
(dp2079
g58
(dp2080
sg67
g63
sg60
(lp2081
g53
(g74
g55
NtRp2082
(dp2083
g58
(dp2084
g78
g79
ssg67
g2078
sg60
(lp2085
S'post_vars'
p2086
asbag53
(g74
g55
NtRp2087
(dp2088
g58
(dp2089
g85
g86
ssg67
g2078
sg60
(lp2090
S':'
asbag53
(g74
g55
NtRp2091
(dp2092
g58
(dp2093
sg67
g2078
sg60
(lp2094
g53
(g54
g55
NtRp2095
(dp2096
g58
(dp2097
g66
I5
ssg67
g2091
sg60
(lp2098
g53
(g62
g55
NtRp2099
(dp2100
g58
(dp2101
g66
I4
ssg67
Nsg60
(lp2102
sbasbasbasbag53
(g69
g55
NtRp2103
(dp2104
g58
(dp2105
sg67
g63
sg60
(lp2106
g53
(g74
g55
NtRp2107
(dp2108
g58
(dp2109
g78
g79
ssg67
g2103
sg60
(lp2110
S'url'
p2111
asbag53
(g74
g55
NtRp2112
(dp2113
g58
(dp2114
g85
g86
ssg67
g2103
sg60
(lp2115
S':'
asbag53
(g74
g55
NtRp2116
(dp2117
g58
(dp2118
sg67
g2103
sg60
(lp2119
g53
(g54
g55
NtRp2120
(dp2121
g58
(dp2122
g66
I5
ssg67
g2116
sg60
(lp2123
S'/admin/default/reload_routes'
p2124
asbasbasbag53
(g69
g55
NtRp2125
(dp2126
g58
(dp2127
sg67
g63
sg60
(lp2128
g53
(g74
g55
NtRp2129
(dp2130
g58
(dp2131
g78
g79
ssg67
g2125
sg60
(lp2132
S'utcnow'
p2133
asbag53
(g74
g55
NtRp2134
(dp2135
g58
(dp2136
g85
g86
ssg67
g2125
sg60
(lp2137
S':'
asbag53
(g74
g55
NtRp2138
(dp2139
g58
(dp2140
sg67
g2125
sg60
(lp2141
g53
(g54
g55
NtRp2142
(dp2143
g58
(dp2144
g66
I5
ssg67
g2138
sg60
(lp2145
S'datetime.datetime(2012, 3, 18, 20, 58, 35, 731122)'
p2146
asbasbasbag53
(g69
g55
NtRp2147
(dp2148
g58
(dp2149
sg67
g63
sg60
(lp2150
g53
(g74
g55
NtRp2151
(dp2152
g58
(dp2153
g78
g79
ssg67
g2147
sg60
(lp2154
S'uuid'
p2155
asbag53
(g74
g55
NtRp2156
(dp2157
g58
(dp2158
g85
g86
ssg67
g2147
sg60
(lp2159
S':'
asbag53
(g74
g55
NtRp2160
(dp2161
g58
(dp2162
sg67
g2147
sg60
(lp2163
g53
(g54
g55
NtRp2164
(dp2165
g58
(dp2166
g66
I5
ssg67
g2160
sg60
(lp2167
S'admin/127.0.0.1.2012-03-18.16-58-35.6078132d-e66a-4619-83d9-94898111651d'
p2168
asbasbasbag53
(g69
g55
NtRp2169
(dp2170
g58
(dp2171
sg67
g63
sg60
(lp2172
g53
(g74
g55
NtRp2173
(dp2174
g58
(dp2175
g78
g79
ssg67
g2169
sg60
(lp2176
S'vars'
p2177
asbag53
(g74
g55
NtRp2178
(dp2179
g58
(dp2180
g85
g86
ssg67
g2169
sg60
(lp2181
S':'
asbag53
(g74
g55
NtRp2182
(dp2183
g58
(dp2184
sg67
g2169
sg60
(lp2185
g53
(g54
g55
NtRp2186
(dp2187
g58
(dp2188
g66
I5
ssg67
g2182
sg60
(lp2189
g53
(g62
g55
NtRp2190
(dp2191
g58
(dp2192
g66
I4
ssg67
Nsg60
(lp2193
sbasbasbasbag53
(g69
g55
NtRp2194
(dp2195
g58
(dp2196
sg67
g63
sg60
(lp2197
g53
(g74
g55
NtRp2198
(dp2199
g58
(dp2200
g78
g79
ssg67
g2194
sg60
(lp2201
S'wsgi'
p2202
asbag53
(g74
g55
NtRp2203
(dp2204
g58
(dp2205
g85
g86
ssg67
g2194
sg60
(lp2206
S':'
asbag53
(g74
g55
NtRp2207
(dp2208
g58
(dp2209
sg67
g2194
sg60
(lp2210
g53
(g54
g55
NtRp2211
(dp2212
g58
(dp2213
g66
I5
ssg67
g2207
sg60
(lp2214
g53
(g62
g55
NtRp2215
(dp2216
g58
(dp2217
g66
I4
ssg67
Nsg60
(lp2218
g53
(g69
g55
NtRp2219
(dp2220
g58
(dp2221
sg67
g2215
sg60
(lp2222
g53
(g74
g55
NtRp2223
(dp2224
g58
(dp2225
g78
g79
ssg67
g2219
sg60
(lp2226
S'environ'
p2227
asbag53
(g74
g55
NtRp2228
(dp2229
g58
(dp2230
g85
g86
ssg67
g2219
sg60
(lp2231
S':'
asbag53
(g74
g55
NtRp2232
(dp2233
g58
(dp2234
sg67
g2219
sg60
(lp2235
g53
(g54
g55
NtRp2236
(dp2237
g58
(dp2238
g66
I4
ssg67
g2232
sg60
(lp2239
g53
(g62
g55
NtRp2240
(dp2241
g58
(dp2242
g66
I3
ssg67
Nsg60
(lp2243
g53
(g69
g55
NtRp2244
(dp2245
g58
(dp2246
sg67
g2240
sg60
(lp2247
g53
(g74
g55
NtRp2248
(dp2249
g58
(dp2250
g78
g79
ssg67
g2244
sg60
(lp2251
S'HTTP_ACCEPT'
p2252
asbag53
(g74
g55
NtRp2253
(dp2254
g58
(dp2255
g85
g86
ssg67
g2244
sg60
(lp2256
S':'
asbag53
(g74
g55
NtRp2257
(dp2258
g58
(dp2259
sg67
g2244
sg60
(lp2260
g53
(g54
g55
NtRp2261
(dp2262
g58
(dp2263
g66
I3
ssg67
g2257
sg60
(lp2264
g773
asbasbasbag53
(g69
g55
NtRp2265
(dp2266
g58
(dp2267
sg67
g2240
sg60
(lp2268
g53
(g74
g55
NtRp2269
(dp2270
g58
(dp2271
g78
g79
ssg67
g2265
sg60
(lp2272
S'HTTP_ACCEPT_CHARSET'
p2273
asbag53
(g74
g55
NtRp2274
(dp2275
g58
(dp2276
g85
g86
ssg67
g2265
sg60
(lp2277
S':'
asbag53
(g74
g55
NtRp2278
(dp2279
g58
(dp2280
sg67
g2265
sg60
(lp2281
g53
(g54
g55
NtRp2282
(dp2283
g58
(dp2284
g66
I3
ssg67
g2278
sg60
(lp2285
g795
asbasbasbag53
(g69
g55
NtRp2286
(dp2287
g58
(dp2288
sg67
g2240
sg60
(lp2289
g53
(g74
g55
NtRp2290
(dp2291
g58
(dp2292
g78
g79
ssg67
g2286
sg60
(lp2293
S'HTTP_ACCEPT_ENCODING'
p2294
asbag53
(g74
g55
NtRp2295
(dp2296
g58
(dp2297
g85
g86
ssg67
g2286
sg60
(lp2298
S':'
asbag53
(g74
g55
NtRp2299
(dp2300
g58
(dp2301
sg67
g2286
sg60
(lp2302
g53
(g54
g55
NtRp2303
(dp2304
g58
(dp2305
g66
I3
ssg67
g2299
sg60
(lp2306
g817
asbasbasbag53
(g69
g55
NtRp2307
(dp2308
g58
(dp2309
sg67
g2240
sg60
(lp2310
g53
(g74
g55
NtRp2311
(dp2312
g58
(dp2313
g78
g79
ssg67
g2307
sg60
(lp2314
S'HTTP_ACCEPT_LANGUAGE'
p2315
asbag53
(g74
g55
NtRp2316
(dp2317
g58
(dp2318
g85
g86
ssg67
g2307
sg60
(lp2319
S':'
asbag53
(g74
g55
NtRp2320
(dp2321
g58
(dp2322
sg67
g2307
sg60
(lp2323
g53
(g54
g55
NtRp2324
(dp2325
g58
(dp2326
g66
I3
ssg67
g2320
sg60
(lp2327
g839
asbasbasbag53
(g69
g55
NtRp2328
(dp2329
g58
(dp2330
sg67
g2240
sg60
(lp2331
g53
(g74
g55
NtRp2332
(dp2333
g58
(dp2334
g78
g79
ssg67
g2328
sg60
(lp2335
S'HTTP_CONNECTION'
p2336
asbag53
(g74
g55
NtRp2337
(dp2338
g58
(dp2339
g85
g86
ssg67
g2328
sg60
(lp2340
S':'
asbag53
(g74
g55
NtRp2341
(dp2342
g58
(dp2343
sg67
g2328
sg60
(lp2344
g53
(g54
g55
NtRp2345
(dp2346
g58
(dp2347
g66
I3
ssg67
g2341
sg60
(lp2348
g861
asbasbasbag53
(g69
g55
NtRp2349
(dp2350
g58
(dp2351
sg67
g2240
sg60
(lp2352
g53
(g74
g55
NtRp2353
(dp2354
g58
(dp2355
g78
g79
ssg67
g2349
sg60
(lp2356
S'HTTP_COOKIE'
p2357
asbag53
(g74
g55
NtRp2358
(dp2359
g58
(dp2360
g85
g86
ssg67
g2349
sg60
(lp2361
S':'
asbag53
(g74
g55
NtRp2362
(dp2363
g58
(dp2364
sg67
g2349
sg60
(lp2365
g53
(g54
g55
NtRp2366
(dp2367
g58
(dp2368
g66
I3
ssg67
g2362
sg60
(lp2369
g883
asbasbasbag53
(g69
g55
NtRp2370
(dp2371
g58
(dp2372
sg67
g2240
sg60
(lp2373
g53
(g74
g55
NtRp2374
(dp2375
g58
(dp2376
g78
g79
ssg67
g2370
sg60
(lp2377
S'HTTP_HOST'
p2378
asbag53
(g74
g55
NtRp2379
(dp2380
g58
(dp2381
g85
g86
ssg67
g2370
sg60
(lp2382
S':'
asbag53
(g74
g55
NtRp2383
(dp2384
g58
(dp2385
sg67
g2370
sg60
(lp2386
g53
(g54
g55
NtRp2387
(dp2388
g58
(dp2389
g66
I3
ssg67
g2383
sg60
(lp2390
g905
asbasbasbag53
(g69
g55
NtRp2391
(dp2392
g58
(dp2393
sg67
g2240
sg60
(lp2394
g53
(g74
g55
NtRp2395
(dp2396
g58
(dp2397
g78
g79
ssg67
g2391
sg60
(lp2398
S'HTTP_REFERER'
p2399
asbag53
(g74
g55
NtRp2400
(dp2401
g58
(dp2402
g85
g86
ssg67
g2391
sg60
(lp2403
S':'
asbag53
(g74
g55
NtRp2404
(dp2405
g58
(dp2406
sg67
g2391
sg60
(lp2407
g53
(g54
g55
NtRp2408
(dp2409
g58
(dp2410
g66
I3
ssg67
g2404
sg60
(lp2411
g927
asbasbasbag53
(g69
g55
NtRp2412
(dp2413
g58
(dp2414
sg67
g2240
sg60
(lp2415
g53
(g74
g55
NtRp2416
(dp2417
g58
(dp2418
g78
g79
ssg67
g2412
sg60
(lp2419
S'HTTP_USER_AGENT'
p2420
asbag53
(g74
g55
NtRp2421
(dp2422
g58
(dp2423
g85
g86
ssg67
g2412
sg60
(lp2424
S':'
asbag53
(g74
g55
NtRp2425
(dp2426
g58
(dp2427
sg67
g2412
sg60
(lp2428
g53
(g54
g55
NtRp2429
(dp2430
g58
(dp2431
g66
I3
ssg67
g2425
sg60
(lp2432
g949
asbasbasbag53
(g69
g55
NtRp2433
(dp2434
g58
(dp2435
sg67
g2240
sg60
(lp2436
g53
(g74
g55
NtRp2437
(dp2438
g58
(dp2439
g78
g79
ssg67
g2433
sg60
(lp2440
S'PATH_INFO'
p2441
asbag53
(g74
g55
NtRp2442
(dp2443
g58
(dp2444
g85
g86
ssg67
g2433
sg60
(lp2445
S':'
asbag53
(g74
g55
NtRp2446
(dp2447
g58
(dp2448
sg67
g2433
sg60
(lp2449
g53
(g54
g55
NtRp2450
(dp2451
g58
(dp2452
g66
I3
ssg67
g2446
sg60
(lp2453
g1013
asbasbasbag53
(g69
g55
NtRp2454
(dp2455
g58
(dp2456
sg67
g2240
sg60
(lp2457
g53
(g74
g55
NtRp2458
(dp2459
g58
(dp2460
g78
g79
ssg67
g2454
sg60
(lp2461
S'QUERY_STRING'
p2462
asbag53
(g74
g55
NtRp2463
(dp2464
g58
(dp2465
g85
g86
ssg67
g2454
sg60
(lp2466
S':'
asbag53
(g74
g55
NtRp2467
(dp2468
g58
(dp2469
sg67
g2454
sg60
(lp2470
g53
(g54
g55
NtRp2471
(dp2472
g58
(dp2473
g66
I3
ssg67
g2467
sg60
(lp2474
S''
asbasbasbag53
(g69
g55
NtRp2475
(dp2476
g58
(dp2477
sg67
g2240
sg60
(lp2478
g53
(g74
g55
NtRp2479
(dp2480
g58
(dp2481
g78
g79
ssg67
g2475
sg60
(lp2482
S'REMOTE_ADDR'
p2483
asbag53
(g74
g55
NtRp2484
(dp2485
g58
(dp2486
g85
g86
ssg67
g2475
sg60
(lp2487
S':'
asbag53
(g74
g55
NtRp2488
(dp2489
g58
(dp2490
sg67
g2475
sg60
(lp2491
g53
(g54
g55
NtRp2492
(dp2493
g58
(dp2494
g66
I3
ssg67
g2488
sg60
(lp2495
g186
asbasbasbag53
(g69
g55
NtRp2496
(dp2497
g58
(dp2498
sg67
g2240
sg60
(lp2499
g53
(g74
g55
NtRp2500
(dp2501
g58
(dp2502
g78
g79
ssg67
g2496
sg60
(lp2503
S'REMOTE_PORT'
p2504
asbag53
(g74
g55
NtRp2505
(dp2506
g58
(dp2507
g85
g86
ssg67
g2496
sg60
(lp2508
S':'
asbag53
(g74
g55
NtRp2509
(dp2510
g58
(dp2511
sg67
g2496
sg60
(lp2512
g53
(g54
g55
NtRp2513
(dp2514
g58
(dp2515
g66
I3
ssg67
g2509
sg60
(lp2516
g1077
asbasbasbag53
(g69
g55
NtRp2517
(dp2518
g58
(dp2519
sg67
g2240
sg60
(lp2520
g53
(g74
g55
NtRp2521
(dp2522
g58
(dp2523
g78
g79
ssg67
g2517
sg60
(lp2524
S'REQUEST_METHOD'
p2525
asbag53
(g74
g55
NtRp2526
(dp2527
g58
(dp2528
g85
g86
ssg67
g2517
sg60
(lp2529
S':'
asbag53
(g74
g55
NtRp2530
(dp2531
g58
(dp2532
sg67
g2517
sg60
(lp2533
g53
(g54
g55
NtRp2534
(dp2535
g58
(dp2536
g66
I3
ssg67
g2530
sg60
(lp2537
g1099
asbasbasbag53
(g69
g55
NtRp2538
(dp2539
g58
(dp2540
sg67
g2240
sg60
(lp2541
g53
(g74
g55
NtRp2542
(dp2543
g58
(dp2544
g78
g79
ssg67
g2538
sg60
(lp2545
S'REQUEST_URI'
p2546
asbag53
(g74
g55
NtRp2547
(dp2548
g58
(dp2549
g85
g86
ssg67
g2538
sg60
(lp2550
S':'
asbag53
(g74
g55
NtRp2551
(dp2552
g58
(dp2553
sg67
g2538
sg60
(lp2554
g53
(g54
g55
NtRp2555
(dp2556
g58
(dp2557
g66
I3
ssg67
g2551
sg60
(lp2558
g1013
asbasbasbag53
(g69
g55
NtRp2559
(dp2560
g58
(dp2561
sg67
g2240
sg60
(lp2562
g53
(g74
g55
NtRp2563
(dp2564
g58
(dp2565
g78
g79
ssg67
g2559
sg60
(lp2566
S'SCRIPT_NAME'
p2567
asbag53
(g74
g55
NtRp2568
(dp2569
g58
(dp2570
g85
g86
ssg67
g2559
sg60
(lp2571
S':'
asbag53
(g74
g55
NtRp2572
(dp2573
g58
(dp2574
sg67
g2559
sg60
(lp2575
g53
(g54
g55
NtRp2576
(dp2577
g58
(dp2578
g66
I3
ssg67
g2572
sg60
(lp2579
S''
asbasbasbag53
(g69
g55
NtRp2580
(dp2581
g58
(dp2582
sg67
g2240
sg60
(lp2583
g53
(g74
g55
NtRp2584
(dp2585
g58
(dp2586
g78
g79
ssg67
g2580
sg60
(lp2587
S'SERVER_NAME'
p2588
asbag53
(g74
g55
NtRp2589
(dp2590
g58
(dp2591
g85
g86
ssg67
g2580
sg60
(lp2592
S':'
asbag53
(g74
g55
NtRp2593
(dp2594
g58
(dp2595
sg67
g2580
sg60
(lp2596
g53
(g54
g55
NtRp2597
(dp2598
g58
(dp2599
g66
I3
ssg67
g2593
sg60
(lp2600
g1163
asbasbasbag53
(g69
g55
NtRp2601
(dp2602
g58
(dp2603
sg67
g2240
sg60
(lp2604
g53
(g74
g55
NtRp2605
(dp2606
g58
(dp2607
g78
g79
ssg67
g2601
sg60
(lp2608
S'SERVER_PORT'
p2609
asbag53
(g74
g55
NtRp2610
(dp2611
g58
(dp2612
g85
g86
ssg67
g2601
sg60
(lp2613
S':'
asbag53
(g74
g55
NtRp2614
(dp2615
g58
(dp2616
sg67
g2601
sg60
(lp2617
g53
(g54
g55
NtRp2618
(dp2619
g58
(dp2620
g66
I3
ssg67
g2614
sg60
(lp2621
g1185
asbasbasbag53
(g69
g55
NtRp2622
(dp2623
g58
(dp2624
sg67
g2240
sg60
(lp2625
g53
(g74
g55
NtRp2626
(dp2627
g58
(dp2628
g78
g79
ssg67
g2622
sg60
(lp2629
S'SERVER_PROTOCOL'
p2630
asbag53
(g74
g55
NtRp2631
(dp2632
g58
(dp2633
g85
g86
ssg67
g2622
sg60
(lp2634
S':'
asbag53
(g74
g55
NtRp2635
(dp2636
g58
(dp2637
sg67
g2622
sg60
(lp2638
g53
(g54
g55
NtRp2639
(dp2640
g58
(dp2641
g66
I3
ssg67
g2635
sg60
(lp2642
g1207
asbasbasbag53
(g69
g55
NtRp2643
(dp2644
g58
(dp2645
sg67
g2240
sg60
(lp2646
g53
(g74
g55
NtRp2647
(dp2648
g58
(dp2649
g78
g79
ssg67
g2643
sg60
(lp2650
S'SERVER_SOFTWARE'
p2651
asbag53
(g74
g55
NtRp2652
(dp2653
g58
(dp2654
g85
g86
ssg67
g2643
sg60
(lp2655
S':'
asbag53
(g74
g55
NtRp2656
(dp2657
g58
(dp2658
sg67
g2643
sg60
(lp2659
g53
(g54
g55
NtRp2660
(dp2661
g58
(dp2662
g66
I3
ssg67
g2656
sg60
(lp2663
g1229
asbasbasbag53
(g69
g55
NtRp2664
(dp2665
g58
(dp2666
sg67
g2240
sg60
(lp2667
g53
(g74
g55
NtRp2668
(dp2669
g58
(dp2670
g78
g79
ssg67
g2664
sg60
(lp2671
S'WEB2PY_ORIGINAL_URI'
p2672
asbag53
(g74
g55
NtRp2673
(dp2674
g58
(dp2675
g85
g86
ssg67
g2664
sg60
(lp2676
S':'
asbag53
(g74
g55
NtRp2677
(dp2678
g58
(dp2679
sg67
g2664
sg60
(lp2680
g53
(g54
g55
NtRp2681
(dp2682
g58
(dp2683
g66
I3
ssg67
g2677
sg60
(lp2684
g1273
asbasbasbag53
(g69
g55
NtRp2685
(dp2686
g58
(dp2687
sg67
g2240
sg60
(lp2688
g53
(g74
g55
NtRp2689
(dp2690
g58
(dp2691
g78
g79
ssg67
g2685
sg60
(lp2692
S'wsgi.errors'
p2693
asbag53
(g74
g55
NtRp2694
(dp2695
g58
(dp2696
g85
g86
ssg67
g2685
sg60
(lp2697
S':'
asbag53
(g74
g55
NtRp2698
(dp2699
g58
(dp2700
sg67
g2685
sg60
(lp2701
g53
(g54
g55
NtRp2702
(dp2703
g58
(dp2704
g66
I3
ssg67
g2698
sg60
(lp2705
S"<open file '<stderr>', mode 'w' at 0x4220b0>"
p2706
asbasbasbag53
(g69
g55
NtRp2707
(dp2708
g58
(dp2709
sg67
g2240
sg60
(lp2710
g53
(g74
g55
NtRp2711
(dp2712
g58
(dp2713
g78
g79
ssg67
g2707
sg60
(lp2714
S'wsgi.file_wrapper'
p2715
asbag53
(g74
g55
NtRp2716
(dp2717
g58
(dp2718
g85
g86
ssg67
g2707
sg60
(lp2719
S':'
asbag53
(g74
g55
NtRp2720
(dp2721
g58
(dp2722
sg67
g2707
sg60
(lp2723
g53
(g54
g55
NtRp2724
(dp2725
g58
(dp2726
g66
I3
ssg67
g2720
sg60
(lp2727
S'<class wsgiref.util.FileWrapper at 0x225e6c0>'
p2728
asbasbasbag53
(g69
g55
NtRp2729
(dp2730
g58
(dp2731
sg67
g2240
sg60
(lp2732
g53
(g74
g55
NtRp2733
(dp2734
g58
(dp2735
g78
g79
ssg67
g2729
sg60
(lp2736
S'wsgi.input'
p2737
asbag53
(g74
g55
NtRp2738
(dp2739
g58
(dp2740
g85
g86
ssg67
g2729
sg60
(lp2741
S':'
asbag53
(g74
g55
NtRp2742
(dp2743
g58
(dp2744
sg67
g2729
sg60
(lp2745
g53
(g54
g55
NtRp2746
(dp2747
g58
(dp2748
g66
I3
ssg67
g2742
sg60
(lp2749
S'<cStringIO.StringO object at 0xa1d1480>'
p2750
asbasbasbag53
(g69
g55
NtRp2751
(dp2752
g58
(dp2753
sg67
g2240
sg60
(lp2754
g53
(g74
g55
NtRp2755
(dp2756
g58
(dp2757
g78
g79
ssg67
g2751
sg60
(lp2758
S'wsgi.multiprocess'
p2759
asbag53
(g74
g55
NtRp2760
(dp2761
g58
(dp2762
g85
g86
ssg67
g2751
sg60
(lp2763
S':'
asbag53
(g74
g55
NtRp2764
(dp2765
g58
(dp2766
sg67
g2751
sg60
(lp2767
g53
(g54
g55
NtRp2768
(dp2769
g58
(dp2770
g66
I3
ssg67
g2764
sg60
(lp2771
g96
asbasbasbag53
(g69
g55
NtRp2772
(dp2773
g58
(dp2774
sg67
g2240
sg60
(lp2775
g53
(g74
g55
NtRp2776
(dp2777
g58
(dp2778
g78
g79
ssg67
g2772
sg60
(lp2779
S'wsgi.multithread'
p2780
asbag53
(g74
g55
NtRp2781
(dp2782
g58
(dp2783
g85
g86
ssg67
g2772
sg60
(lp2784
S':'
asbag53
(g74
g55
NtRp2785
(dp2786
g58
(dp2787
sg67
g2772
sg60
(lp2788
g53
(g54
g55
NtRp2789
(dp2790
g58
(dp2791
g66
I3
ssg67
g2785
sg60
(lp2792
g1491
asbasbasbag53
(g69
g55
NtRp2793
(dp2794
g58
(dp2795
sg67
g2240
sg60
(lp2796
g53
(g74
g55
NtRp2797
(dp2798
g58
(dp2799
g78
g79
ssg67
g2793
sg60
(lp2800
S'wsgi.run_once'
p2801
asbag53
(g74
g55
NtRp2802
(dp2803
g58
(dp2804
g85
g86
ssg67
g2793
sg60
(lp2805
S':'
asbag53
(g74
g55
NtRp2806
(dp2807
g58
(dp2808
sg67
g2793
sg60
(lp2809
g53
(g54
g55
NtRp2810
(dp2811
g58
(dp2812
g66
I3
ssg67
g2806
sg60
(lp2813
g96
asbasbasbag53
(g69
g55
NtRp2814
(dp2815
g58
(dp2816
sg67
g2240
sg60
(lp2817
g53
(g74
g55
NtRp2818
(dp2819
g58
(dp2820
g78
g79
ssg67
g2814
sg60
(lp2821
S'wsgi.url_scheme'
p2822
asbag53
(g74
g55
NtRp2823
(dp2824
g58
(dp2825
g85
g86
ssg67
g2814
sg60
(lp2826
S':'
asbag53
(g74
g55
NtRp2827
(dp2828
g58
(dp2829
sg67
g2814
sg60
(lp2830
g53
(g54
g55
NtRp2831
(dp2832
g58
(dp2833
g66
I3
ssg67
g2827
sg60
(lp2834
g1534
asbasbasbag53
(g69
g55
NtRp2835
(dp2836
g58
(dp2837
sg67
g2240
sg60
(lp2838
g53
(g74
g55
NtRp2839
(dp2840
g58
(dp2841
g78
g79
ssg67
g2835
sg60
(lp2842
S'wsgi.version'
p2843
asbag53
(g74
g55
NtRp2844
(dp2845
g58
(dp2846
g85
g86
ssg67
g2835
sg60
(lp2847
S':'
asbag53
(g74
g55
NtRp2848
(dp2849
g58
(dp2850
sg67
g2835
sg60
(lp2851
g53
(g54
g55
NtRp2852
(dp2853
g58
(dp2854
g66
I3
ssg67
g2848
sg60
(lp2855
S'1'
asbasbasbasbasbasbasbasbasbasbasbasbasbsS'frames'
p2856
(lp2857
(dp2858
S'file'
p2859
S'/users/udimilo/Documents/web2py/gluon/restricted.py'
p2860
sS'dump'
p2861
(dp2862
S'environment'
p2863
S"{'A': <class 'gluon.html.A'>, 'ALLOW_TOGGLE': 'true', 'A_button': <function A_button at 0xa0f16f0>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, 'CENTER': <class 'gluon.html.CENTER'>, ...}"
p2864
sS'ccode'
p2865
S'<code object <module> at 0xa10b3c8, file "/Users...plications/admin/controllers/default.py", line 3>'
p2866
ssS'lnum'
p2867
I205
sS'lines'
p2868
(dp2869
I200
S'    try:'
p2870
sI201
S'        if type(code) == types.CodeType:'
p2871
sI202
S'            ccode = code'
p2872
sI203
S'        else:'
p2873
sI204
S'            ccode = compile2(code,layer)'
p2874
sI205
S'        exec ccode in environment'
p2875
sI206
S'    except HTTP:'
p2876
sI207
S'        raise'
p2877
sI208
S'    except RestrictedError:'
p2878
sI209
S'        # do not encapsulate (obfuscate) the original RestrictedError'
p2879
ssS'call'
p2880
S"(code='# coding: utf8\\n\\nEXPERIMENTAL_STUFF = True\\n\\nif EX...\\n\\nresponse._vars=response._caller(reload_routes)\\n', environment={'A': <class 'gluon.html.A'>, 'ALLOW_TOGGLE': 'true', 'A_button': <function A_button at 0xa0f16f0>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, 'CENTER': <class 'gluon.html.CENTER'>, ...}, layer='/Users/udimilo/Documents/web2py/applications/admin/controllers/default.py')"
p2881
sS'func'
p2882
S'restricted'
p2883
sa(dp2884
g2859
S'/Users/udimilo/Documents/web2py/applications/admin/controllers/default.py'
p2885
sg2861
(dp2886
sg2867
I1352
sg2868
(dp2887
I1344
S'def reload_routes():'
p2888
sI1345
S'    """ Reload routes.py """'
p2889
sI1346
S'    import gluon.rewrite'
p2890
sI1347
S'    gluon.rewrite.load()'
p2891
sI1348
S"    redirect(URL('site'))"
p2892
sI1349
S''
sI1350
S''
sI1341
S'    else:'
p2893
sI1342
S'        return dict(form=T("Disabled"))'
p2894
sI1343
S''
ssg2880
S'()'
p2895
sg2882
S'<module>'
p2896
sa(dp2897
g2859
S'/users/udimilo/Documents/web2py/gluon/globals.py'
p2898
sg2861
(dp2899
S'self'
p2900
S'undefined'
p2901
sS'f'
S'<function reload_routes at 0x9ffcfb0>'
p2902
ssg2867
I173
sg2868
(dp2903
I168
S'        self.menu = []             # used by the default view layout'
p2904
sI169
S'        self.files = []            # used by web2py_ajax.html'
p2905
sI170
S'        self.generic_patterns = [] # patterns to allow generic views'
p2906
sI171
S"        self.delimiters = ('{{','}}')"
p2907
sI172
S'        self._vars = None'
p2908
sI173
S'        self._caller = lambda f: f()'
p2909
sI174
S'        self._view_environment = None'
p2910
sI175
S'        self._custom_commit = None'
p2911
sI176
S'        self._custom_rollback = None'
p2912
sI177
S''
ssg2880
S'(f=<function reload_routes at 0x9ffcfb0>)'
p2913
sg2882
S'<lambda>'
p2914
sa(dp2915
g2859
S'/Users/udimilo/Documents/web2py/applications/admin/controllers/default.py'
p2916
sg2861
(dp2917
S'gluon.rewrite.load'
p2918
S'<function load at 0x10322f0>'
p2919
sS'gluon'
p2920
S"<module 'gluon' from '/users/udimilo/Documents/web2py/gluon/__init__.pyc'>"
p2921
sS'gluon.rewrite'
p2922
S"<module 'gluon.rewrite' from '/users/udimilo/Documents/web2py/gluon/rewrite.pyc'>"
p2923
ssg2867
I1347
sg2868
(dp2924
I1344
S'def reload_routes():'
p2925
sI1345
S'    """ Reload routes.py """'
p2926
sI1346
S'    import gluon.rewrite'
p2927
sI1347
S'    gluon.rewrite.load()'
p2928
sI1348
S"    redirect(URL('site'))"
p2929
sI1349
S''
sI1350
S''
sI1341
S'    else:'
p2930
sI1342
S'        return dict(form=T("Disabled"))'
p2931
sI1343
S''
ssg2880
S'()'
p2932
sg2882
S'reload_routes'
p2933
sa(dp2934
g2859
S'/users/udimilo/Documents/web2py/gluon/rewrite.py'
p2935
sg2861
(dp2936
S'].append'
p2937
g2901
sS'k'
S"'.*/index.*)'"
p2938
sS'sym'
p2939
S"'routes_out'"
p2940
sS'p'
S"<Storage {'routes_out': [(<_sre.SRE_Pattern obje...xxxxxxxxxxx //--></html>', 'routes_onerror': []}>"
p2941
sS'global compile_regex'
p2942
S'<function compile_regex at 0x1032330>'
p2943
sS'v'
S"'.*/.*'"
p2944
ssg2867
I274
sg2868
(dp2945
I269
S'    p = _params_default(app)'
p2946
sI270
S''
sI271
S"    for sym in ('routes_app', 'routes_in', 'routes_out'):"
p2947
sI272
S'        if sym in symbols:'
p2948
sI273
S'            for (k, v) in symbols[sym]:'
p2949
sI274
S'                p[sym].append(compile_regex(k, v))'
p2950
sI275
S"    for sym in ('routes_onerror', 'routes_apps_raw',"
p2951
sI276
S"                'error_handler','error_message', 'error_message_ticket',"
p2952
sI277
S"                'default_application','default_controller', 'default_function',"
p2953
sI278
S"                'logging'):"
p2954
ssg2880
S'(routes=\'routes.py\', app=None, data="#!/usr/bin/python\\n# -*- coding: utf-8 -*-\\n\\n# def...n__\':\\n    import doctest\\n    doctest.testmod()\\n\\n\\n", rdict=None)'
p2955
sg2882
S'load'
p2956
sa(dp2957
g2859
S'/users/udimilo/Documents/web2py/gluon/rewrite.py'
p2958
sg2861
(dp2959
S're.compile'
p2960
S'<function compile at 0x6095f0>'
p2961
sS'global re'
p2962
S"<module 're' from '/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/re.pyc'>"
p2963
sS'k'
S"'^.*?:https?://[^:/]+:[a-z]+ .*/index.*)$'"
p2964
sS're.DOTALL'
p2965
S'16'
p2966
sS'v'
S"'.*/.*'"
p2967
ssg2867
I372
sg2868
(dp2968
I367
S'    for item in regex_at.findall(k):'
p2969
sI368
S"        k = k.replace(item, r'(?P<%s>\\w+)' % item[1:])"
p2970
sI369
S'    # same for replacement pattern, but with \\g'
p2971
sI370
S'    for item in regex_at.findall(v):'
p2972
sI371
S"        v = v.replace(item, r'\\g<%s>' % item[1:])"
p2973
sI372
S'    return (re.compile(k, re.DOTALL), v)'
p2974
sI373
S''
sI374
S'def load_routers(all_apps):'
p2975
sI375
S'    "load-time post-processing of routers"'
p2976
sI376
S''
ssg2880
S"(k='^.*?:https?://[^:/]+:[a-z]+ .*/index.*)$', v='.*/.*')"
p2977
sg2882
S'compile_regex'
p2978
sa(dp2979
g2859
S'/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/re.py'
p2980
sg2861
(dp2981
S'pattern'
p2982
S"'^.*?:https?://[^:/]+:[a-z]+ .*/index.*)$'"
p2983
sS'global _compile'
p2984
S'<function _compile at 0x6096f0>'
p2985
sS'flags'
p2986
S'16'
p2987
ssg2867
I188
sg2868
(dp2988
I192
S'    _cache.clear()'
p2989
sI183
S'        Empty matches are included in the result."""'
p2990
sI184
S'        return _compile(pattern, flags).finditer(string)'
p2991
sI185
S''
sI186
S'def compile(pattern, flags=0):'
p2992
sI187
S'    "Compile a regular expression pattern, returning a pattern object."'
p2993
sI188
S'    return _compile(pattern, flags)'
p2994
sI189
S''
sI190
S'def purge():'
p2995
sI191
S'    "Clear the regular expression cache"'
p2996
ssg2880
S"(pattern='^.*?:https?://[^:/]+:[a-z]+ .*/index.*)$', flags=16)"
p2997
sg2882
S'compile'
p2998
sa(dp2999
g2859
S'/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/re.py'
p3000
sg2861
(dp3001
S'v'
S"error('unbalanced parenthesis',)"
p3002
sS'global error'
p3003
S"<class 'sre_constants.error'>"
p3004
ssg2867
I241
sg2868
(dp3005
I236
S'    if not sre_compile.isstring(pattern):'
p3006
sI237
S'        raise TypeError, "first argument must be string or compiled pattern"'
p3007
sI238
S'    try:'
p3008
sI239
S'        p = sre_compile.compile(pattern, flags)'
p3009
sI240
S'    except error, v:'
p3010
sI241
S'        raise error, v # invalid expression'
p3011
sI242
S'    if len(_cache) >= _MAXCACHE:'
p3012
sI243
S'        _cache.clear()'
p3013
sI244
S'    _cache[cachekey] = p'
p3014
sI245
S'    return p'
p3015
ssg2880
S"(*key=('^.*?:https?://[^:/]+:[a-z]+ .*/index.*)$', 16))"
p3016
sg2882
S'_compile'
p3017
sasS'pyver'
p3018
S'Python 2.5.4: /Library/Frameworks/Python.framework/Versions/2.5/Resources/Python.app/Contents/MacOS/Python'
p3019
sS'session'
p3020
g53
(g54
g55
NtRp3021
(dp3022
g58
(dp3023
sg60
(lp3024
g53
(g62
g55
NtRp3025
(dp3026
g58
(dp3027
g66
I5
ssg67
Nsg60
(lp3028
g53
(g69
g55
NtRp3029
(dp3030
g58
(dp3031
sg67
g3025
sg60
(lp3032
g53
(g74
g55
NtRp3033
(dp3034
g58
(dp3035
g78
g79
ssg67
g3029
sg60
(lp3036
S'authorized'
p3037
asbag53
(g74
g55
NtRp3038
(dp3039
g58
(dp3040
g85
g86
ssg67
g3029
sg60
(lp3041
S':'
asbag53
(g74
g55
NtRp3042
(dp3043
g58
(dp3044
sg67
g3029
sg60
(lp3045
g53
(g54
g55
NtRp3046
(dp3047
g58
(dp3048
g66
I5
ssg67
g3042
sg60
(lp3049
g1491
asbasbasbag53
(g69
g55
NtRp3050
(dp3051
g58
(dp3052
sg67
g3025
sg60
(lp3053
g53
(g74
g55
NtRp3054
(dp3055
g58
(dp3056
g78
g79
ssg67
g3050
sg60
(lp3057
S'check_version'
p3058
asbag53
(g74
g55
NtRp3059
(dp3060
g58
(dp3061
g85
g86
ssg67
g3050
sg60
(lp3062
S':'
asbag53
(g74
g55
NtRp3063
(dp3064
g58
(dp3065
sg67
g3050
sg60
(lp3066
g53
(g54
g55
NtRp3067
(dp3068
g58
(dp3069
g66
I5
ssg67
g3063
sg60
(lp3070
g96
asbasbasbag53
(g69
g55
NtRp3071
(dp3072
g58
(dp3073
sg67
g3025
sg60
(lp3074
g53
(g74
g55
NtRp3075
(dp3076
g58
(dp3077
g78
g79
ssg67
g3071
sg60
(lp3078
S'last_time'
p3079
asbag53
(g74
g55
NtRp3080
(dp3081
g58
(dp3082
g85
g86
ssg67
g3071
sg60
(lp3083
S':'
asbag53
(g74
g55
NtRp3084
(dp3085
g58
(dp3086
sg67
g3071
sg60
(lp3087
g53
(g54
g55
NtRp3088
(dp3089
g58
(dp3090
g66
I5
ssg67
g3084
sg60
(lp3091
S'1332104315.7372911'
p3092
asbasbasbasbasbsS'etype'
p3093
S"<class 'sre_constants.error'>"
p3094
sS'date'
p3095
S'Sun Mar 18 16:58:35 2012'
p3096
sS'response'
p3097
g53
(g54
g55
NtRp3098
(dp3099
g58
(dp3100
sg60
(lp3101
g53
(g62
g55
NtRp3102
(dp3103
g58
(dp3104
g66
I5
ssg67
Nsg60
(lp3105
g53
(g69
g55
NtRp3106
(dp3107
g58
(dp3108
sg67
g3102
sg60
(lp3109
g53
(g74
g55
NtRp3110
(dp3111
g58
(dp3112
g78
g79
ssg67
g3106
sg60
(lp3113
g151
asbag53
(g74
g55
NtRp3114
(dp3115
g58
(dp3116
g85
g86
ssg67
g3106
sg60
(lp3117
S':'
asbag53
(g74
g55
NtRp3118
(dp3119
g58
(dp3120
sg67
g3106
sg60
(lp3121
g53
(g54
g55
NtRp3122
(dp3123
g58
(dp3124
g66
I5
ssg67
g3118
sg60
(lp3125
S'<cStringIO.StringO object at 0x9e9c120>'
p3126
asbasbasbag53
(g69
g55
NtRp3127
(dp3128
g58
(dp3129
sg67
g3102
sg60
(lp3130
g53
(g74
g55
NtRp3131
(dp3132
g58
(dp3133
g78
g79
ssg67
g3127
sg60
(lp3134
g217
asbag53
(g74
g55
NtRp3135
(dp3136
g58
(dp3137
g85
g86
ssg67
g3127
sg60
(lp3138
S':'
asbag53
(g74
g55
NtRp3139
(dp3140
g58
(dp3141
sg67
g3127
sg60
(lp3142
g53
(g54
g55
NtRp3143
(dp3144
g58
(dp3145
g66
I5
ssg67
g3139
sg60
(lp3146
g53
(g62
g55
NtRp3147
(dp3148
g58
(dp3149
g66
I4
ssg67
Nsg60
(lp3150
g53
(g69
g55
NtRp3151
(dp3152
g58
(dp3153
sg67
g3147
sg60
(lp3154
g53
(g74
g55
NtRp3155
(dp3156
g58
(dp3157
g78
g79
ssg67
g3151
sg60
(lp3158
S'session_id_admin'
p3159
asbag53
(g74
g55
NtRp3160
(dp3161
g58
(dp3162
g85
g86
ssg67
g3151
sg60
(lp3163
S':'
asbag53
(g74
g55
NtRp3164
(dp3165
g58
(dp3166
sg67
g3151
sg60
(lp3167
g53
(g54
g55
NtRp3168
(dp3169
g58
(dp3170
g66
I4
ssg67
g3164
sg60
(lp3171
g53
(g62
g55
NtRp3172
(dp3173
g58
(dp3174
g66
I3
ssg67
Nsg60
(lp3175
g53
(g69
g55
NtRp3176
(dp3177
g58
(dp3178
sg67
g3172
sg60
(lp3179
g53
(g74
g55
NtRp3180
(dp3181
g58
(dp3182
g78
g79
ssg67
g3176
sg60
(lp3183
g267
asbag53
(g74
g55
NtRp3184
(dp3185
g58
(dp3186
g85
g86
ssg67
g3176
sg60
(lp3187
S':'
asbag53
(g74
g55
NtRp3188
(dp3189
g58
(dp3190
sg67
g3176
sg60
(lp3191
g53
(g54
g55
NtRp3192
(dp3193
g58
(dp3194
g66
I3
ssg67
g3188
sg60
(lp3195
S''
asbasbasbag53
(g69
g55
NtRp3196
(dp3197
g58
(dp3198
sg67
g3172
sg60
(lp3199
g53
(g74
g55
NtRp3200
(dp3201
g58
(dp3202
g78
g79
ssg67
g3196
sg60
(lp3203
g288
asbag53
(g74
g55
NtRp3204
(dp3205
g58
(dp3206
g85
g86
ssg67
g3196
sg60
(lp3207
S':'
asbag53
(g74
g55
NtRp3208
(dp3209
g58
(dp3210
sg67
g3196
sg60
(lp3211
g53
(g54
g55
NtRp3212
(dp3213
g58
(dp3214
g66
I3
ssg67
g3208
sg60
(lp3215
S''
asbasbasbag53
(g69
g55
NtRp3216
(dp3217
g58
(dp3218
sg67
g3172
sg60
(lp3219
g53
(g74
g55
NtRp3220
(dp3221
g58
(dp3222
g78
g79
ssg67
g3216
sg60
(lp3223
g309
asbag53
(g74
g55
NtRp3224
(dp3225
g58
(dp3226
g85
g86
ssg67
g3216
sg60
(lp3227
S':'
asbag53
(g74
g55
NtRp3228
(dp3229
g58
(dp3230
sg67
g3216
sg60
(lp3231
g53
(g54
g55
NtRp3232
(dp3233
g58
(dp3234
g66
I3
ssg67
g3228
sg60
(lp3235
S''
asbasbasbag53
(g69
g55
NtRp3236
(dp3237
g58
(dp3238
sg67
g3172
sg60
(lp3239
g53
(g74
g55
NtRp3240
(dp3241
g58
(dp3242
g78
g79
ssg67
g3236
sg60
(lp3243
g330
asbag53
(g74
g55
NtRp3244
(dp3245
g58
(dp3246
g85
g86
ssg67
g3236
sg60
(lp3247
S':'
asbag53
(g74
g55
NtRp3248
(dp3249
g58
(dp3250
sg67
g3236
sg60
(lp3251
g53
(g54
g55
NtRp3252
(dp3253
g58
(dp3254
g66
I3
ssg67
g3248
sg60
(lp3255
S''
asbasbasbag53
(g69
g55
NtRp3256
(dp3257
g58
(dp3258
sg67
g3172
sg60
(lp3259
g53
(g74
g55
NtRp3260
(dp3261
g58
(dp3262
g78
g79
ssg67
g3256
sg60
(lp3263
g351
asbag53
(g74
g55
NtRp3264
(dp3265
g58
(dp3266
g85
g86
ssg67
g3256
sg60
(lp3267
S':'
asbag53
(g74
g55
NtRp3268
(dp3269
g58
(dp3270
sg67
g3256
sg60
(lp3271
g53
(g54
g55
NtRp3272
(dp3273
g58
(dp3274
g66
I3
ssg67
g3268
sg60
(lp3275
S'/'
asbasbasbag53
(g69
g55
NtRp3276
(dp3277
g58
(dp3278
sg67
g3172
sg60
(lp3279
g53
(g74
g55
NtRp3280
(dp3281
g58
(dp3282
g78
g79
ssg67
g3276
sg60
(lp3283
g372
asbag53
(g74
g55
NtRp3284
(dp3285
g58
(dp3286
g85
g86
ssg67
g3276
sg60
(lp3287
S':'
asbag53
(g74
g55
NtRp3288
(dp3289
g58
(dp3290
sg67
g3276
sg60
(lp3291
g53
(g54
g55
NtRp3292
(dp3293
g58
(dp3294
g66
I3
ssg67
g3288
sg60
(lp3295
S''
asbasbasbag53
(g69
g55
NtRp3296
(dp3297
g58
(dp3298
sg67
g3172
sg60
(lp3299
g53
(g74
g55
NtRp3300
(dp3301
g58
(dp3302
g78
g79
ssg67
g3296
sg60
(lp3303
g393
asbag53
(g74
g55
NtRp3304
(dp3305
g58
(dp3306
g85
g86
ssg67
g3296
sg60
(lp3307
S':'
asbag53
(g74
g55
NtRp3308
(dp3309
g58
(dp3310
sg67
g3296
sg60
(lp3311
g53
(g54
g55
NtRp3312
(dp3313
g58
(dp3314
g66
I3
ssg67
g3308
sg60
(lp3315
S''
asbasbasbasbasbasbasbasbasbasbasbag53
(g69
g55
NtRp3316
(dp3317
g58
(dp3318
sg67
g3102
sg60
(lp3319
g53
(g74
g55
NtRp3320
(dp3321
g58
(dp3322
g78
g79
ssg67
g3316
sg60
(lp3323
S'delimiters'
p3324
asbag53
(g74
g55
NtRp3325
(dp3326
g58
(dp3327
g85
g86
ssg67
g3316
sg60
(lp3328
S':'
asbag53
(g74
g55
NtRp3329
(dp3330
g58
(dp3331
sg67
g3316
sg60
(lp3332
g53
(g54
g55
NtRp3333
(dp3334
g58
(dp3335
g66
I5
ssg67
g3329
sg60
(lp3336
g53
(g62
g55
NtRp3337
(dp3338
g58
(dp3339
g66
I4
ssg67
Nsg60
(lp3340
g53
(g69
g55
NtRp3341
(dp3342
g58
(dp3343
sg67
g3337
sg60
(lp3344
g53
(g74
g55
NtRp3345
(dp3346
g58
(dp3347
sg67
g3341
sg60
(lp3348
g53
(g54
g55
NtRp3349
(dp3350
g58
(dp3351
g66
I4
ssg67
g3345
sg60
(lp3352
S'{{'
p3353
asbasbasbag53
(g69
g55
NtRp3354
(dp3355
g58
(dp3356
sg67
g3337
sg60
(lp3357
g53
(g74
g55
NtRp3358
(dp3359
g58
(dp3360
sg67
g3354
sg60
(lp3361
g53
(g54
g55
NtRp3362
(dp3363
g58
(dp3364
g66
I4
ssg67
g3358
sg60
(lp3365
S'}}'
p3366
asbasbasbasbasbasbasbag53
(g69
g55
NtRp3367
(dp3368
g58
(dp3369
sg67
g3102
sg60
(lp3370
g53
(g74
g55
NtRp3371
(dp3372
g58
(dp3373
g78
g79
ssg67
g3367
sg60
(lp3374
S'files'
p3375
asbag53
(g74
g55
NtRp3376
(dp3377
g58
(dp3378
g85
g86
ssg67
g3367
sg60
(lp3379
S':'
asbag53
(g74
g55
NtRp3380
(dp3381
g58
(dp3382
sg67
g3367
sg60
(lp3383
g53
(g54
g55
NtRp3384
(dp3385
g58
(dp3386
g66
I5
ssg67
g3380
sg60
(lp3387
g53
(g62
g55
NtRp3388
(dp3389
g58
(dp3390
g66
I4
ssg67
Nsg60
(lp3391
g53
(g69
g55
NtRp3392
(dp3393
g58
(dp3394
sg67
g3388
sg60
(lp3395
g53
(g74
g55
NtRp3396
(dp3397
g58
(dp3398
sg67
g3392
sg60
(lp3399
g53
(g54
g55
NtRp3400
(dp3401
g58
(dp3402
g66
I4
ssg67
g3396
sg60
(lp3403
S'/admin/static/plugin_multiselect/jquery.dimensions.js'
p3404
asbasbasbag53
(g69
g55
NtRp3405
(dp3406
g58
(dp3407
sg67
g3388
sg60
(lp3408
g53
(g74
g55
NtRp3409
(dp3410
g58
(dp3411
sg67
g3405
sg60
(lp3412
g53
(g54
g55
NtRp3413
(dp3414
g58
(dp3415
g66
I4
ssg67
g3409
sg60
(lp3416
S'/admin/static/plugin_multiselect/jquery.multiselect.js'
p3417
asbasbasbag53
(g69
g55
NtRp3418
(dp3419
g58
(dp3420
sg67
g3388
sg60
(lp3421
g53
(g74
g55
NtRp3422
(dp3423
g58
(dp3424
sg67
g3418
sg60
(lp3425
g53
(g54
g55
NtRp3426
(dp3427
g58
(dp3428
g66
I4
ssg67
g3422
sg60
(lp3429
S'/admin/static/plugin_multiselect/jquery.multiselect.css'
p3430
asbasbasbag53
(g69
g55
NtRp3431
(dp3432
g58
(dp3433
sg67
g3388
sg60
(lp3434
g53
(g74
g55
NtRp3435
(dp3436
g58
(dp3437
sg67
g3431
sg60
(lp3438
g53
(g54
g55
NtRp3439
(dp3440
g58
(dp3441
g66
I4
ssg67
g3435
sg60
(lp3442
S'/admin/static/plugin_multiselect/start.js'
p3443
asbasbasbasbasbasbasbag53
(g69
g55
NtRp3444
(dp3445
g58
(dp3446
sg67
g3102
sg60
(lp3447
g53
(g74
g55
NtRp3448
(dp3449
g58
(dp3450
g78
g79
ssg67
g3444
sg60
(lp3451
S'flash'
p3452
asbag53
(g74
g55
NtRp3453
(dp3454
g58
(dp3455
g85
g86
ssg67
g3444
sg60
(lp3456
S':'
asbag53
(g74
g55
NtRp3457
(dp3458
g58
(dp3459
sg67
g3444
sg60
(lp3460
g53
(g54
g55
NtRp3461
(dp3462
g58
(dp3463
g66
I5
ssg67
g3457
sg60
(lp3464
S''
asbasbasbag53
(g69
g55
NtRp3465
(dp3466
g58
(dp3467
sg67
g3102
sg60
(lp3468
g53
(g74
g55
NtRp3469
(dp3470
g58
(dp3471
g78
g79
ssg67
g3465
sg60
(lp3472
S'generic_patterns'
p3473
asbag53
(g74
g55
NtRp3474
(dp3475
g58
(dp3476
g85
g86
ssg67
g3465
sg60
(lp3477
S':'
asbag53
(g74
g55
NtRp3478
(dp3479
g58
(dp3480
sg67
g3465
sg60
(lp3481
g53
(g54
g55
NtRp3482
(dp3483
g58
(dp3484
g66
I5
ssg67
g3478
sg60
(lp3485
g53
(g62
g55
NtRp3486
(dp3487
g58
(dp3488
g66
I4
ssg67
Nsg60
(lp3489
sbasbasbasbag53
(g69
g55
NtRp3490
(dp3491
g58
(dp3492
sg67
g3102
sg60
(lp3493
g53
(g74
g55
NtRp3494
(dp3495
g58
(dp3496
g78
g79
ssg67
g3490
sg60
(lp3497
S'headers'
p3498
asbag53
(g74
g55
NtRp3499
(dp3500
g58
(dp3501
g85
g86
ssg67
g3490
sg60
(lp3502
S':'
asbag53
(g74
g55
NtRp3503
(dp3504
g58
(dp3505
sg67
g3490
sg60
(lp3506
g53
(g54
g55
NtRp3507
(dp3508
g58
(dp3509
g66
I5
ssg67
g3503
sg60
(lp3510
g53
(g62
g55
NtRp3511
(dp3512
g58
(dp3513
g66
I4
ssg67
Nsg60
(lp3514
g53
(g69
g55
NtRp3515
(dp3516
g58
(dp3517
sg67
g3511
sg60
(lp3518
g53
(g74
g55
NtRp3519
(dp3520
g58
(dp3521
g78
g79
ssg67
g3515
sg60
(lp3522
S'Cache-Control'
p3523
asbag53
(g74
g55
NtRp3524
(dp3525
g58
(dp3526
g85
g86
ssg67
g3515
sg60
(lp3527
S':'
asbag53
(g74
g55
NtRp3528
(dp3529
g58
(dp3530
sg67
g3515
sg60
(lp3531
g53
(g54
g55
NtRp3532
(dp3533
g58
(dp3534
g66
I4
ssg67
g3528
sg60
(lp3535
S'no-store, no-cache, must-revalidate, post-check=0, pre-check=0'
p3536
asbasbasbag53
(g69
g55
NtRp3537
(dp3538
g58
(dp3539
sg67
g3511
sg60
(lp3540
g53
(g74
g55
NtRp3541
(dp3542
g58
(dp3543
g78
g79
ssg67
g3537
sg60
(lp3544
S'Content-Type'
p3545
asbag53
(g74
g55
NtRp3546
(dp3547
g58
(dp3548
g85
g86
ssg67
g3537
sg60
(lp3549
S':'
asbag53
(g74
g55
NtRp3550
(dp3551
g58
(dp3552
sg67
g3537
sg60
(lp3553
g53
(g54
g55
NtRp3554
(dp3555
g58
(dp3556
g66
I4
ssg67
g3550
sg60
(lp3557
S'text/html; charset=utf-8'
p3558
asbasbasbag53
(g69
g55
NtRp3559
(dp3560
g58
(dp3561
sg67
g3511
sg60
(lp3562
g53
(g74
g55
NtRp3563
(dp3564
g58
(dp3565
g78
g79
ssg67
g3559
sg60
(lp3566
S'Expires'
p3567
asbag53
(g74
g55
NtRp3568
(dp3569
g58
(dp3570
g85
g86
ssg67
g3559
sg60
(lp3571
S':'
asbag53
(g74
g55
NtRp3572
(dp3573
g58
(dp3574
sg67
g3559
sg60
(lp3575
g53
(g54
g55
NtRp3576
(dp3577
g58
(dp3578
g66
I4
ssg67
g3572
sg60
(lp3579
S'Sun, 18 Mar 2012 20:58:35 GMT'
p3580
asbasbasbag53
(g69
g55
NtRp3581
(dp3582
g58
(dp3583
sg67
g3511
sg60
(lp3584
g53
(g74
g55
NtRp3585
(dp3586
g58
(dp3587
g78
g79
ssg67
g3581
sg60
(lp3588
S'Pragma'
p3589
asbag53
(g74
g55
NtRp3590
(dp3591
g58
(dp3592
g85
g86
ssg67
g3581
sg60
(lp3593
S':'
asbag53
(g74
g55
NtRp3594
(dp3595
g58
(dp3596
sg67
g3581
sg60
(lp3597
g53
(g54
g55
NtRp3598
(dp3599
g58
(dp3600
g66
I4
ssg67
g3594
sg60
(lp3601
S'no-cache'
p3602
asbasbasbag53
(g69
g55
NtRp3603
(dp3604
g58
(dp3605
sg67
g3511
sg60
(lp3606
g53
(g74
g55
NtRp3607
(dp3608
g58
(dp3609
g78
g79
ssg67
g3603
sg60
(lp3610
S'X-Powered-By'
p3611
asbag53
(g74
g55
NtRp3612
(dp3613
g58
(dp3614
g85
g86
ssg67
g3603
sg60
(lp3615
S':'
asbag53
(g74
g55
NtRp3616
(dp3617
g58
(dp3618
sg67
g3603
sg60
(lp3619
g53
(g54
g55
NtRp3620
(dp3621
g58
(dp3622
g66
I4
ssg67
g3616
sg60
(lp3623
S'web2py'
p3624
asbasbasbasbasbasbasbag53
(g69
g55
NtRp3625
(dp3626
g58
(dp3627
sg67
g3102
sg60
(lp3628
g53
(g74
g55
NtRp3629
(dp3630
g58
(dp3631
g78
g79
ssg67
g3625
sg60
(lp3632
S'menu'
p3633
asbag53
(g74
g55
NtRp3634
(dp3635
g58
(dp3636
g85
g86
ssg67
g3625
sg60
(lp3637
S':'
asbag53
(g74
g55
NtRp3638
(dp3639
g58
(dp3640
sg67
g3625
sg60
(lp3641
g53
(g54
g55
NtRp3642
(dp3643
g58
(dp3644
g66
I5
ssg67
g3638
sg60
(lp3645
g53
(g62
g55
NtRp3646
(dp3647
g58
(dp3648
g66
I4
ssg67
Nsg60
(lp3649
g53
(g69
g55
NtRp3650
(dp3651
g58
(dp3652
sg67
g3646
sg60
(lp3653
g53
(g74
g55
NtRp3654
(dp3655
g58
(dp3656
sg67
g3650
sg60
(lp3657
g53
(g54
g55
NtRp3658
(dp3659
g58
(dp3660
g66
I4
ssg67
g3654
sg60
(lp3661
g53
(g62
g55
NtRp3662
(dp3663
g58
(dp3664
g66
I3
ssg67
Nsg60
(lp3665
g53
(g69
g55
NtRp3666
(dp3667
g58
(dp3668
sg67
g3662
sg60
(lp3669
g53
(g74
g55
NtRp3670
(dp3671
g58
(dp3672
sg67
g3666
sg60
(lp3673
g53
(g54
g55
NtRp3674
(dp3675
g58
(dp3676
g66
I3
ssg67
g3670
sg60
(lp3677
cgluon.languages
lazyT_unpickle
p3678
(S's\x04\x00\x00\x00Site'
tRp3679
asbasbasbag53
(g69
g55
NtRp3680
(dp3681
g58
(dp3682
sg67
g3662
sg60
(lp3683
g53
(g74
g55
NtRp3684
(dp3685
g58
(dp3686
sg67
g3680
sg60
(lp3687
g53
(g54
g55
NtRp3688
(dp3689
g58
(dp3690
g66
I3
ssg67
g3684
sg60
(lp3691
g96
asbasbasbag53
(g69
g55
NtRp3692
(dp3693
g58
(dp3694
sg67
g3662
sg60
(lp3695
g53
(g74
g55
NtRp3696
(dp3697
g58
(dp3698
sg67
g3692
sg60
(lp3699
g53
(g54
g55
NtRp3700
(dp3701
g58
(dp3702
g66
I3
ssg67
g3696
sg60
(lp3703
S'/admin/default/site'
p3704
asbasbasbasbasbasbasbag53
(g69
g55
NtRp3705
(dp3706
g58
(dp3707
sg67
g3646
sg60
(lp3708
g53
(g74
g55
NtRp3709
(dp3710
g58
(dp3711
sg67
g3705
sg60
(lp3712
g53
(g54
g55
NtRp3713
(dp3714
g58
(dp3715
g66
I4
ssg67
g3709
sg60
(lp3716
g53
(g62
g55
NtRp3717
(dp3718
g58
(dp3719
g66
I3
ssg67
Nsg60
(lp3720
g53
(g69
g55
NtRp3721
(dp3722
g58
(dp3723
sg67
g3717
sg60
(lp3724
g53
(g74
g55
NtRp3725
(dp3726
g58
(dp3727
sg67
g3721
sg60
(lp3728
g53
(g54
g55
NtRp3729
(dp3730
g58
(dp3731
g66
I3
ssg67
g3725
sg60
(lp3732
g3678
(S's\x06\x00\x00\x00Logout'
tRp3733
asbasbasbag53
(g69
g55
NtRp3734
(dp3735
g58
(dp3736
sg67
g3717
sg60
(lp3737
g53
(g74
g55
NtRp3738
(dp3739
g58
(dp3740
sg67
g3734
sg60
(lp3741
g53
(g54
g55
NtRp3742
(dp3743
g58
(dp3744
g66
I3
ssg67
g3738
sg60
(lp3745
g96
asbasbasbag53
(g69
g55
NtRp3746
(dp3747
g58
(dp3748
sg67
g3717
sg60
(lp3749
g53
(g74
g55
NtRp3750
(dp3751
g58
(dp3752
sg67
g3746
sg60
(lp3753
g53
(g54
g55
NtRp3754
(dp3755
g58
(dp3756
g66
I3
ssg67
g3750
sg60
(lp3757
S'/admin/default/logout'
p3758
asbasbasbasbasbasbasbag53
(g69
g55
NtRp3759
(dp3760
g58
(dp3761
sg67
g3646
sg60
(lp3762
g53
(g74
g55
NtRp3763
(dp3764
g58
(dp3765
sg67
g3759
sg60
(lp3766
g53
(g54
g55
NtRp3767
(dp3768
g58
(dp3769
g66
I4
ssg67
g3763
sg60
(lp3770
g53
(g62
g55
NtRp3771
(dp3772
g58
(dp3773
g66
I3
ssg67
Nsg60
(lp3774
g53
(g69
g55
NtRp3775
(dp3776
g58
(dp3777
sg67
g3771
sg60
(lp3778
g53
(g74
g55
NtRp3779
(dp3780
g58
(dp3781
sg67
g3775
sg60
(lp3782
g53
(g54
g55
NtRp3783
(dp3784
g58
(dp3785
g66
I3
ssg67
g3779
sg60
(lp3786
g3678
(S's\x05\x00\x00\x00Debug'
tRp3787
asbasbasbag53
(g69
g55
NtRp3788
(dp3789
g58
(dp3790
sg67
g3771
sg60
(lp3791
g53
(g74
g55
NtRp3792
(dp3793
g58
(dp3794
sg67
g3788
sg60
(lp3795
g53
(g54
g55
NtRp3796
(dp3797
g58
(dp3798
g66
I3
ssg67
g3792
sg60
(lp3799
g96
asbasbasbag53
(g69
g55
NtRp3800
(dp3801
g58
(dp3802
sg67
g3771
sg60
(lp3803
g53
(g74
g55
NtRp3804
(dp3805
g58
(dp3806
sg67
g3800
sg60
(lp3807
g53
(g54
g55
NtRp3808
(dp3809
g58
(dp3810
g66
I3
ssg67
g3804
sg60
(lp3811
S'/admin/debug/interact'
p3812
asbasbasbasbasbasbasbag53
(g69
g55
NtRp3813
(dp3814
g58
(dp3815
sg67
g3646
sg60
(lp3816
g53
(g74
g55
NtRp3817
(dp3818
g58
(dp3819
sg67
g3813
sg60
(lp3820
g53
(g54
g55
NtRp3821
(dp3822
g58
(dp3823
g66
I4
ssg67
g3817
sg60
(lp3824
g53
(g62
g55
NtRp3825
(dp3826
g58
(dp3827
g66
I3
ssg67
Nsg60
(lp3828
g53
(g69
g55
NtRp3829
(dp3830
g58
(dp3831
sg67
g3825
sg60
(lp3832
g53
(g74
g55
NtRp3833
(dp3834
g58
(dp3835
sg67
g3829
sg60
(lp3836
g53
(g54
g55
NtRp3837
(dp3838
g58
(dp3839
g66
I3
ssg67
g3833
sg60
(lp3840
g3678
(S's\x04\x00\x00\x00Help'
tRp3841
asbasbasbag53
(g69
g55
NtRp3842
(dp3843
g58
(dp3844
sg67
g3825
sg60
(lp3845
g53
(g74
g55
NtRp3846
(dp3847
g58
(dp3848
sg67
g3842
sg60
(lp3849
g53
(g54
g55
NtRp3850
(dp3851
g58
(dp3852
g66
I3
ssg67
g3846
sg60
(lp3853
g96
asbasbasbag53
(g69
g55
NtRp3854
(dp3855
g58
(dp3856
sg67
g3825
sg60
(lp3857
g53
(g74
g55
NtRp3858
(dp3859
g58
(dp3860
sg67
g3854
sg60
(lp3861
g53
(g54
g55
NtRp3862
(dp3863
g58
(dp3864
g66
I3
ssg67
g3858
sg60
(lp3865
S'http://web2py.com/examples'
p3866
asbasbasbasbasbasbasbasbasbasbasbag53
(g69
g55
NtRp3867
(dp3868
g58
(dp3869
sg67
g3102
sg60
(lp3870
g53
(g74
g55
NtRp3871
(dp3872
g58
(dp3873
g78
g79
ssg67
g3867
sg60
(lp3874
S'meta'
p3875
asbag53
(g74
g55
NtRp3876
(dp3877
g58
(dp3878
g85
g86
ssg67
g3867
sg60
(lp3879
S':'
asbag53
(g74
g55
NtRp3880
(dp3881
g58
(dp3882
sg67
g3867
sg60
(lp3883
g53
(g54
g55
NtRp3884
(dp3885
g58
(dp3886
g66
I5
ssg67
g3880
sg60
(lp3887
g53
(g62
g55
NtRp3888
(dp3889
g58
(dp3890
g66
I4
ssg67
Nsg60
(lp3891
sbasbasbasbag53
(g69
g55
NtRp3892
(dp3893
g58
(dp3894
sg67
g3102
sg60
(lp3895
g53
(g74
g55
NtRp3896
(dp3897
g58
(dp3898
g78
g79
ssg67
g3892
sg60
(lp3899
S'postprocessing'
p3900
asbag53
(g74
g55
NtRp3901
(dp3902
g58
(dp3903
g85
g86
ssg67
g3892
sg60
(lp3904
S':'
asbag53
(g74
g55
NtRp3905
(dp3906
g58
(dp3907
sg67
g3892
sg60
(lp3908
g53
(g54
g55
NtRp3909
(dp3910
g58
(dp3911
g66
I5
ssg67
g3905
sg60
(lp3912
g53
(g62
g55
NtRp3913
(dp3914
g58
(dp3915
g66
I4
ssg67
Nsg60
(lp3916
sbasbasbasbag53
(g69
g55
NtRp3917
(dp3918
g58
(dp3919
sg67
g3102
sg60
(lp3920
g53
(g74
g55
NtRp3921
(dp3922
g58
(dp3923
g78
g79
ssg67
g3917
sg60
(lp3924
S'session_file'
p3925
asbag53
(g74
g55
NtRp3926
(dp3927
g58
(dp3928
g85
g86
ssg67
g3917
sg60
(lp3929
S':'
asbag53
(g74
g55
NtRp3930
(dp3931
g58
(dp3932
sg67
g3917
sg60
(lp3933
g53
(g54
g55
NtRp3934
(dp3935
g58
(dp3936
g66
I5
ssg67
g3930
sg60
(lp3937
S"<open file '/Users/udimilo/Documents/web2py/applications/admin/sessions/127.0.0.1-52792a20-d856-4035-8d0f-026eefd87da3', mode 'rb+' at 0x9ee9920>"
p3938
asbasbasbag53
(g69
g55
NtRp3939
(dp3940
g58
(dp3941
sg67
g3102
sg60
(lp3942
g53
(g74
g55
NtRp3943
(dp3944
g58
(dp3945
g78
g79
ssg67
g3939
sg60
(lp3946
S'session_filename'
p3947
asbag53
(g74
g55
NtRp3948
(dp3949
g58
(dp3950
g85
g86
ssg67
g3939
sg60
(lp3951
S':'
asbag53
(g74
g55
NtRp3952
(dp3953
g58
(dp3954
sg67
g3939
sg60
(lp3955
g53
(g54
g55
NtRp3956
(dp3957
g58
(dp3958
g66
I5
ssg67
g3952
sg60
(lp3959
S'/Users/udimilo/Documents/web2py/applications/admin/sessions/127.0.0.1-52792a20-d856-4035-8d0f-026eefd87da3'
p3960
asbasbasbag53
(g69
g55
NtRp3961
(dp3962
g58
(dp3963
sg67
g3102
sg60
(lp3964
g53
(g74
g55
NtRp3965
(dp3966
g58
(dp3967
g78
g79
ssg67
g3961
sg60
(lp3968
S'session_id'
p3969
asbag53
(g74
g55
NtRp3970
(dp3971
g58
(dp3972
g85
g86
ssg67
g3961
sg60
(lp3973
S':'
asbag53
(g74
g55
NtRp3974
(dp3975
g58
(dp3976
sg67
g3961
sg60
(lp3977
g53
(g54
g55
NtRp3978
(dp3979
g58
(dp3980
g66
I5
ssg67
g3974
sg60
(lp3981
S'127.0.0.1-52792a20-d856-4035-8d0f-026eefd87da3'
p3982
asbasbasbag53
(g69
g55
NtRp3983
(dp3984
g58
(dp3985
sg67
g3102
sg60
(lp3986
g53
(g74
g55
NtRp3987
(dp3988
g58
(dp3989
g78
g79
ssg67
g3983
sg60
(lp3990
S'session_id_name'
p3991
asbag53
(g74
g55
NtRp3992
(dp3993
g58
(dp3994
g85
g86
ssg67
g3983
sg60
(lp3995
S':'
asbag53
(g74
g55
NtRp3996
(dp3997
g58
(dp3998
sg67
g3983
sg60
(lp3999
g53
(g54
g55
NtRp4000
(dp4001
g58
(dp4002
g66
I5
ssg67
g3996
sg60
(lp4003
g3159
asbasbasbag53
(g69
g55
NtRp4004
(dp4005
g58
(dp4006
sg67
g3102
sg60
(lp4007
g53
(g74
g55
NtRp4008
(dp4009
g58
(dp4010
g78
g79
ssg67
g4004
sg60
(lp4011
S'session_locked'
p4012
asbag53
(g74
g55
NtRp4013
(dp4014
g58
(dp4015
g85
g86
ssg67
g4004
sg60
(lp4016
S':'
asbag53
(g74
g55
NtRp4017
(dp4018
g58
(dp4019
sg67
g4004
sg60
(lp4020
g53
(g54
g55
NtRp4021
(dp4022
g58
(dp4023
g66
I5
ssg67
g4017
sg60
(lp4024
g1491
asbasbasbag53
(g69
g55
NtRp4025
(dp4026
g58
(dp4027
sg67
g3102
sg60
(lp4028
g53
(g74
g55
NtRp4029
(dp4030
g58
(dp4031
g78
g79
ssg67
g4025
sg60
(lp4032
S'session_new'
p4033
asbag53
(g74
g55
NtRp4034
(dp4035
g58
(dp4036
g85
g86
ssg67
g4025
sg60
(lp4037
S':'
asbag53
(g74
g55
NtRp4038
(dp4039
g58
(dp4040
sg67
g4025
sg60
(lp4041
g53
(g54
g55
NtRp4042
(dp4043
g58
(dp4044
g66
I5
ssg67
g4038
sg60
(lp4045
g96
asbasbasbag53
(g69
g55
NtRp4046
(dp4047
g58
(dp4048
sg67
g3102
sg60
(lp4049
g53
(g74
g55
NtRp4050
(dp4051
g58
(dp4052
g78
g79
ssg67
g4046
sg60
(lp4053
S'status'
p4054
asbag53
(g74
g55
NtRp4055
(dp4056
g58
(dp4057
g85
g86
ssg67
g4046
sg60
(lp4058
S':'
asbag53
(g74
g55
NtRp4059
(dp4060
g58
(dp4061
sg67
g4046
sg60
(lp4062
g53
(g54
g55
NtRp4063
(dp4064
g58
(dp4065
g66
I5
ssg67
g4059
sg60
(lp4066
S'200'
p4067
asbasbasbag53
(g69
g55
NtRp4068
(dp4069
g58
(dp4070
sg67
g3102
sg60
(lp4071
g53
(g74
g55
NtRp4072
(dp4073
g58
(dp4074
g78
g79
ssg67
g4068
sg60
(lp4075
S'subtitle'
p4076
asbag53
(g74
g55
NtRp4077
(dp4078
g58
(dp4079
g85
g86
ssg67
g4068
sg60
(lp4080
S':'
asbag53
(g74
g55
NtRp4081
(dp4082
g58
(dp4083
sg67
g4068
sg60
(lp4084
g53
(g54
g55
NtRp4085
(dp4086
g58
(dp4087
g66
I5
ssg67
g4081
sg60
(lp4088
S'admin'
p4089
asbasbasbag53
(g69
g55
NtRp4090
(dp4091
g58
(dp4092
sg67
g3102
sg60
(lp4093
g53
(g74
g55
NtRp4094
(dp4095
g58
(dp4096
g78
g79
ssg67
g4090
sg60
(lp4097
S'title'
p4098
asbag53
(g74
g55
NtRp4099
(dp4100
g58
(dp4101
g85
g86
ssg67
g4090
sg60
(lp4102
S':'
asbag53
(g74
g55
NtRp4103
(dp4104
g58
(dp4105
sg67
g4090
sg60
(lp4106
g53
(g54
g55
NtRp4107
(dp4108
g58
(dp4109
g66
I5
ssg67
g4103
sg60
(lp4110
S'reload_routes '
p4111
asbasbasbag53
(g69
g55
NtRp4112
(dp4113
g58
(dp4114
sg67
g3102
sg60
(lp4115
g53
(g74
g55
NtRp4116
(dp4117
g58
(dp4118
g78
g79
ssg67
g4112
sg60
(lp4119
g2155
asbag53
(g74
g55
NtRp4120
(dp4121
g58
(dp4122
g85
g86
ssg67
g4112
sg60
(lp4123
S':'
asbag53
(g74
g55
NtRp4124
(dp4125
g58
(dp4126
sg67
g4112
sg60
(lp4127
g53
(g54
g55
NtRp4128
(dp4129
g58
(dp4130
g66
I5
ssg67
g4124
sg60
(lp4131
g2168
asbasbasbag53
(g69
g55
NtRp4132
(dp4133
g58
(dp4134
sg67
g3102
sg60
(lp4135
g53
(g74
g55
NtRp4136
(dp4137
g58
(dp4138
g78
g79
ssg67
g4132
sg60
(lp4139
S'view'
p4140
asbag53
(g74
g55
NtRp4141
(dp4142
g58
(dp4143
g85
g86
ssg67
g4132
sg60
(lp4144
S':'
asbag53
(g74
g55
NtRp4145
(dp4146
g58
(dp4147
sg67
g4132
sg60
(lp4148
g53
(g54
g55
NtRp4149
(dp4150
g58
(dp4151
g66
I5
ssg67
g4145
sg60
(lp4152
S'default/reload_routes.html'
p4153
asbasbasbasbasbsS'locals'
p4154
(dp4155
S'cachekey'
p4156
S"(<type 'str'>, '^.*?:https?://[^:/]+:[a-z]+ .*/index.*)$', 16)"
p4157
sS'pattern'
p4158
S"'^.*?:https?://[^:/]+:[a-z]+ .*/index.*)$'"
p4159
sS'p'
S'None'
p4160
sS'flags'
p4161
S'16'
p4162
sS'key'
p4163
S"('^.*?:https?://[^:/]+:[a-z]+ .*/index.*)$', 16)"
p4164
sS'v'
S"error('unbalanced parenthesis',)"
p4165
sssS'traceback'
p4166
S'Traceback (most recent call last):\n  File "/users/udimilo/Documents/web2py/gluon/restricted.py", line 205, in restricted\n    exec ccode in environment\n  File "/Users/udimilo/Documents/web2py/applications/admin/controllers/default.py", line 1352, in <module>\n  File "/users/udimilo/Documents/web2py/gluon/globals.py", line 173, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/udimilo/Documents/web2py/applications/admin/controllers/default.py", line 1347, in reload_routes\n    gluon.rewrite.load()\n  File "/users/udimilo/Documents/web2py/gluon/rewrite.py", line 274, in load\n    p[sym].append(compile_regex(k, v))\n  File "/users/udimilo/Documents/web2py/gluon/rewrite.py", line 372, in compile_regex\n    return (re.compile(k, re.DOTALL), v)\n  File "/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/re.py", line 188, in compile\n    return _compile(pattern, flags)\n  File "/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/re.py", line 241, in _compile\n    raise error, v # invalid expression\nerror: unbalanced parenthesis\n'
p4167
s.