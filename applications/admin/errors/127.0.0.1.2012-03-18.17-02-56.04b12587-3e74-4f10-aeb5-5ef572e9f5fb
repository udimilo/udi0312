(dp1
S'output'
p2
S"<type 'exceptions.SyntaxError'> invalid syntax (<string>, line 48)"
p3
sS'layer'
p4
S'/Users/udimilo/Documents/web2py/applications/admin/controllers/default.py'
p5
sS'code'
p6
S'# coding: utf8\n\nEXPERIMENTAL_STUFF = True\n\nif EXPERIMENTAL_STUFF:\n    is_mobile = request.user_agent().is_mobile\n    if is_mobile:\n        response.view = response.view.replace(\'default/\',\'default.mobile/\')\n        response.menu = []\n\nfrom gluon.admin import *\nfrom gluon.fileutils import abspath, read_file, write_file\nfrom glob import glob\nimport shutil\nimport platform\n\nif DEMO_MODE and request.function in [\'change_password\',\'pack\',\'pack_plugin\',\'upgrade_web2py\',\'uninstall\',\'cleanup\',\'compile_app\',\'remove_compiled_app\',\'delete\',\'delete_plugin\',\'create_file\',\'upload_file\',\'update_languages\',\'reload_routes\']:\n    session.flash = T(\'disabled in demo mode\')\n    redirect(URL(\'site\'))\n\nif not is_manager() and request.function in [\'change_password\',\'upgrade_web2py\']:\n    session.flash = T(\'disabled in multi user mode\')\n    redirect(URL(\'site\'))\n\nif FILTER_APPS and request.args(0) and not request.args(0) in FILTER_APPS:\n    session.flash = T(\'disabled in demo mode\')\n    redirect(URL(\'site\'))\n\ndef safe_open(a,b):\n    if DEMO_MODE and \'w\' in b:\n        class tmp:\n            def write(self,data): pass\n        return tmp()\n    return open(a,b)\n\ndef safe_read(a, b=\'r\'):\n    safe_file = safe_open(a, b)\n    try:\n        return safe_file.read()\n    finally:\n        safe_file.close()\n\ndef safe_write(a, value, b=\'w\'):\n    safe_file = safe_open(a, b)\n    try:\n        safe_file.write(value)\n    finally:\n        safe_file.close()\n\ndef get_app(name=None):\n    app = name or request.args(0)\n    if app and (not MULTI_USER_MODE or db(db.app.name==app)(db.app.owner==auth.user.id).count()):\n        return app\n    session.flash = \'App does not exist or your are not authorized\'\n    redirect(URL(\'site\'))\n\ndef index():\n    """ Index handler """\n\n    send = request.vars.send\n    if DEMO_MODE:\n        session.authorized = True\n        session.last_time = t0\n    if not send:\n        send = URL(\'site\')\n    if session.authorized:\n        redirect(send)\n    elif request.vars.password:\n        if verify_password(request.vars.password):\n            session.authorized = True\n            login_record(True)\n\n            if CHECK_VERSION:\n                session.check_version = True\n            else:\n                session.check_version = False\n\n            session.last_time = t0\n            if isinstance(send, list):  # ## why does this happen?\n                send = str(send[0])\n\n            redirect(send)\n        else:\n            times_denied = login_record(False)\n            if times_denied >= allowed_number_of_attempts:\n                response.flash = \\\n                    T(\'admin disabled because too many invalid login attempts\')\n            elif times_denied == allowed_number_of_attempts - 1:\n                response.flash = \\\n                    T(\'You have one more login attempt before you are locked out\')\n            else:\n                response.flash = T(\'invalid password.\')\n    return dict(send=send)\n\n\ndef check_version():\n    """ Checks if web2py is up to date """\n\n    session.forget()\n    session._unlock(response)\n\n    new_version, version_number = check_new_version(request.env.web2py_version,\n                                    WEB2PY_VERSION_URL)\n\n    if new_version == -1:\n        return A(T(\'Unable to check for upgrades\'), _href=WEB2PY_URL)\n    elif new_version != True:\n        return A(T(\'web2py is up to date\'), _href=WEB2PY_URL)\n    elif platform.system().lower() in (\'windows\',\'win32\',\'win64\') and os.path.exists("web2py.exe"):\n        return SPAN(\'You should upgrade to version %s\' % version_number)\n    else:\n        return sp_button(URL(\'upgrade_web2py\'), T(\'upgrade now\')) \\\n          + XML(\' <strong class="upgrade_version">%s</strong>\' % version_number)\n\n\ndef logout():\n    """ Logout handler """\n    session.authorized = None\n    if MULTI_USER_MODE:\n        redirect(URL(\'user/logout\'))\n    redirect(URL(\'index\'))\n\n\ndef change_password():\n\n    if session.pam_user:\n        session.flash = T(\'PAM authenticated user, cannot change password here\')\n        redirect(URL(\'site\'))\n    form=SQLFORM.factory(Field(\'current_admin_password\',\'password\'),\n                         Field(\'new_admin_password\',\'password\',requires=IS_STRONG()),\n                         Field(\'new_admin_password_again\',\'password\'))\n    if form.accepts(request.vars):\n        if not verify_password(request.vars.current_admin_password):\n            form.errors.current_admin_password = T(\'invalid password\')\n        elif form.vars.new_admin_password != form.vars.new_admin_password_again:\n            form.errors.new_admin_password_again = T(\'no match\')\n        else:\n            path = abspath(\'parameters_%s.py\' % request.env.server_port)\n            safe_write(path, \'password="%s"\' % CRYPT()(request.vars.new_admin_password)[0])\n            session.flash = T(\'password changed\')\n            redirect(URL(\'site\'))\n    return dict(form=form)\n\ndef site():\n    """ Site handler """\n\n    myversion = request.env.web2py_version\n\n    # Shortcut to make the elif statements more legible\n    file_or_appurl = \'file\' in request.vars or \'appurl\' in request.vars\n\n    if DEMO_MODE:\n        pass\n\n    elif request.vars.filename and not \'file\' in request.vars:\n        # create a new application\n        appname = cleanpath(request.vars.filename).replace(\'.\', \'_\')\n        if app_create(appname, request):\n            if MULTI_USER_MODE:\n                db.app.insert(name=appname,owner=auth.user.id)\n            session.flash = T(\'new application "%s" created\', appname)\n            redirect(URL(\'design\',args=appname))\n        else:\n            session.flash = \\\n                T(\'unable to create application "%s" (it may exist already)\', request.vars.filename)\n        redirect(URL(r=request))\n\n    elif file_or_appurl and not request.vars.filename:\n        # can\'t do anything without an app name\n        msg = \'you must specify a name for the uploaded application\'\n        response.flash = T(msg)\n\n    elif file_or_appurl and request.vars.filename:\n        # fetch an application via URL or file upload\n        f = None\n        if request.vars.appurl is not \'\':\n            try:\n                f = urllib.urlopen(request.vars.appurl)\n            except Exception, e:\n                session.flash = DIV(T(\'Unable to download app because:\'),PRE(str(e)))\n                redirect(URL(r=request))\n            fname = request.vars.appurl\n        elif request.vars.file is not \'\':\n            f = request.vars.file.file\n            fname = request.vars.file.filename\n\n        if f:\n            appname = cleanpath(request.vars.filename).replace(\'.\', \'_\')\n            installed = app_install(appname, f, request, fname,\n                                    overwrite=request.vars.overwrite_check)\n        if f and installed:\n            msg = \'application %(appname)s installed with md5sum: %(digest)s\'\n            session.flash = T(msg, dict(appname=appname,\n                                        digest=md5_hash(installed)))\n        elif f and request.vars.overwrite_check:\n            msg = \'unable to install application "%(appname)s"\'\n            session.flash = T(msg, dict(appname=request.vars.filename))\n\n        else:\n            msg = \'unable to install application "%(appname)s"\'\n            session.flash = T(msg, dict(appname=request.vars.filename))\n\n        redirect(URL(r=request))\n\n    regex = re.compile(\'^\\w+$\')\n\n    if is_manager():\n        apps = [f for f in os.listdir(apath(r=request)) if regex.match(f)]\n    else:\n        apps = [f.name for f in db(db.app.owner==auth.user_id).select()]\n\n    if FILTER_APPS:\n        apps = [f for f in apps if f in FILTER_APPS]\n\n    apps = sorted(apps,lambda a,b:cmp(a.upper(),b.upper()))\n\n    return dict(app=None, apps=apps, myversion=myversion)\n\n\ndef pack():\n    app = get_app()\n\n    if len(request.args) == 1:\n        fname = \'web2py.app.%s.w2p\' % app\n        filename = app_pack(app, request)\n    else:\n        fname = \'web2py.app.%s.compiled.w2p\' % app\n        filename = app_pack_compiled(app, request)\n\n    if filename:\n        response.headers[\'Content-Type\'] = \'application/w2p\'\n        disposition = \'attachment; filename=%s\' % fname\n        response.headers[\'Content-Disposition\'] = disposition\n        return safe_read(filename, \'rb\')\n    else:\n        session.flash = T(\'internal error\')\n        redirect(URL(\'site\'))\n\ndef pack_plugin():\n    app = get_app()\n    if len(request.args) == 2:\n        fname = \'web2py.plugin.%s.w2p\' % request.args[1]\n        filename = plugin_pack(app, request.args[1], request)\n    if filename:\n        response.headers[\'Content-Type\'] = \'application/w2p\'\n        disposition = \'attachment; filename=%s\' % fname\n        response.headers[\'Content-Disposition\'] = disposition\n        return safe_read(filename, \'rb\')\n    else:\n        session.flash = T(\'internal error\')\n        redirect(URL(\'plugin\',args=request.args))\n\ndef upgrade_web2py():\n    if \'upgrade\' in request.vars:\n        (success, error) = upgrade(request)\n        if success:\n            session.flash = T(\'web2py upgraded; please restart it\')\n        else:\n            session.flash = T(\'unable to upgrade because "%s"\', error)\n        redirect(URL(\'site\'))\n    elif \'noupgrade\' in request.vars:\n        redirect(URL(\'site\'))\n    return dict()\n\ndef uninstall():\n    app = get_app()\n    if \'delete\' in request.vars:\n        if MULTI_USER_MODE:\n            if is_manager() and db(db.app.name==app).delete():\n                pass\n            elif db(db.app.name==app)(db.app.owner==auth.user.id).delete():\n                pass\n            else:\n                session.flash = T(\'no permission to uninstall "%s"\', app)\n                redirect(URL(\'site\'))\n        if app_uninstall(app, request):\n            session.flash = T(\'application "%s" uninstalled\', app)\n        else:\n            session.flash = T(\'unable to uninstall "%s"\', app)\n        redirect(URL(\'site\'))\n    elif \'nodelete\' in request.vars:\n        redirect(URL(\'site\'))\n    return dict(app=app)\n\n\ndef cleanup():\n    app = get_app()\n    clean = app_cleanup(app, request)\n    if not clean:\n        session.flash = T("some files could not be removed")\n    else:\n        session.flash = T(\'cache, errors and sessions cleaned\')\n\n    redirect(URL(\'site\'))\n\n\ndef compile_app():\n    app = get_app()\n    c = app_compile(app, request)\n    if not c:\n        session.flash = T(\'application compiled\')\n    else:\n        session.flash = DIV(T(\'Cannot compile: there are errors in your app:\'),\n                              CODE(c))\n    redirect(URL(\'site\'))\n\n\ndef remove_compiled_app():\n    """ Remove the compiled application """\n    app = get_app()\n    remove_compiled_application(apath(app, r=request))\n    session.flash = T(\'compiled application removed\')\n    redirect(URL(\'site\'))\n\ndef delete():\n    """ Object delete handler """\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    sender = request.vars.sender\n\n    if isinstance(sender, list):  # ## fix a problem with Vista\n        sender = sender[0]\n\n    if \'nodelete\' in request.vars:\n        redirect(URL(sender))\n    elif \'delete\' in request.vars:\n        try:\n            os.unlink(apath(filename, r=request))\n            session.flash = T(\'file "%(filename)s" deleted\',\n                              dict(filename=filename))\n        except Exception:\n            session.flash = T(\'unable to delete file "%(filename)s"\',\n                              dict(filename=filename))\n        redirect(URL(sender))\n    return dict(filename=filename, sender=sender)\n\ndef enable():\n    app = get_app()\n    filename = os.path.join(apath(app, r=request),\'DISABLED\')\n    if os.path.exists(filename):\n        os.unlink(filename)\n        return SPAN(T(\'Disable\'),_style=\'color:green\')\n    else:\n        open(filename,\'wb\').write(time.ctime())\n        return SPAN(T(\'Enable\'),_style=\'color:red\')\n\ndef peek():\n    """ Visualize object code """\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    try:\n        data = safe_read(apath(filename, r=request)).replace(\'\\r\',\'\')\n    except IOError:\n        session.flash = T(\'file does not exist\')\n        redirect(URL(\'site\'))\n\n    extension = filename[filename.rfind(\'.\') + 1:].lower()\n\n    return dict(app=request.args[0],\n                filename=filename,\n                data=data,\n                extension=extension)\n\n\ndef test():\n    """ Execute controller tests """\n    app = get_app()\n    if len(request.args) > 1:\n        file = request.args[1]\n    else:\n        file = \'.*\\.py\'\n\n    controllers = listdir(apath(\'%s/controllers/\' % app, r=request), file + \'$\')\n\n    return dict(app=app, controllers=controllers)\n\ndef keepalive():\n    return \'\'\n\ndef search():\n    keywords=request.vars.keywords or \'\'\n    app = get_app()\n    def match(filename,keywords):\n        filename=os.path.join(apath(app, r=request),filename)\n        if keywords in read_file(filename,\'rb\'):\n            return True\n        return False\n    path = apath(request.args[0], r=request)\n    files1 = glob(os.path.join(path,\'*/*.py\'))\n    files2 = glob(os.path.join(path,\'*/*.html\'))\n    files3 = glob(os.path.join(path,\'*/*/*.html\'))\n    files=[x[len(path)+1:].replace(\'\\\\\',\'/\') for x in files1+files2+files3 if match(x,keywords)]\n    return response.json({\'files\':files})\n\ndef edit():\n    """ File edit handler """\n    # Load json only if it is ajax edited...\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    # Try to discover the file type\n    if filename[-3:] == \'.py\':\n        filetype = \'python\'\n    elif filename[-5:] == \'.html\':\n        filetype = \'html\'\n    elif filename[-5:] == \'.load\':\n        filetype = \'html\'\n    elif filename[-4:] == \'.css\':\n        filetype = \'css\'\n    elif filename[-3:] == \'.js\':\n        filetype = \'js\'\n    else:\n        filetype = \'html\'\n\n    # ## check if file is not there\n\n    path = apath(filename, r=request)\n\n    if (\'revert\' in request.vars) and os.path.exists(path + \'.bak\'):\n        try:\n            data = safe_read(path + \'.bak\')\n            data1 = safe_read(path)\n        except IOError:\n            session.flash = T(\'Invalid action\')\n            if \'from_ajax\' in request.vars:\n                 return response.json({\'error\': str(T(\'Invalid action\'))})\n            else:\n                redirect(URL(\'site\'))\n\n        safe_write(path, data)\n        file_hash = md5_hash(data)\n        saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n        safe_write(path + \'.bak\', data1)\n        response.flash = T(\'file "%s" of %s restored\', (filename, saved_on))\n    else:\n        try:\n            data = safe_read(path)\n        except IOError:\n            session.flash = T(\'Invalid action\')\n            if \'from_ajax\' in request.vars:\n                return response.json({\'error\': str(T(\'Invalid action\'))})\n            else:\n                redirect(URL(\'site\'))\n\n        file_hash = md5_hash(data)\n        saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n\n        if request.vars.file_hash and request.vars.file_hash != file_hash:\n            session.flash = T(\'file changed on disk\')\n            data = request.vars.data.replace(\'\\r\\n\', \'\\n\').strip() + \'\\n\'\n            safe_write(path + \'.1\', data)\n            if \'from_ajax\' in request.vars:\n                return response.json({\'error\': str(T(\'file changed on disk\')),\n                                      \'redirect\': URL(\'resolve\',\n                                                      args=request.args)})\n            else:\n                redirect(URL(\'resolve\', args=request.args))\n        elif request.vars.data:\n            safe_write(path + \'.bak\', data)\n            data = request.vars.data.replace(\'\\r\\n\', \'\\n\').strip() + \'\\n\'\n            safe_write(path, data)\n            file_hash = md5_hash(data)\n            saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n            response.flash = T(\'file saved on %s\', saved_on)\n\n    data_or_revert = (request.vars.data or request.vars.revert)\n\n    # Check compile errors\n    highlight = None\n    if filetype == \'python\' and request.vars.data:\n        import _ast\n        try:\n            code = request.vars.data.rstrip().replace(\'\\r\\n\',\'\\n\')+\'\\n\'\n            compile(code, path, "exec", _ast.PyCF_ONLY_AST)\n        except Exception, e:\n            start = sum([len(line)+1 for l, line\n                            in enumerate(request.vars.data.split("\\n"))\n                            if l < e.lineno-1])\n            if e.text and e.offset:\n                offset = e.offset - (len(e.text) - len(e.text.splitlines()[-1]))\n            else:\n                offset = 0\n            highlight = {\'start\': start, \'end\': start + offset + 1}\n            try:\n                ex_name = e.__class__.__name__\n            except:\n                ex_name = \'unknown exception!\'\n            response.flash = DIV(T(\'failed to compile file because:\'), BR(),\n                                 B(ex_name), T(\' at line %s\') % e.lineno,\n                                 offset and T(\' at char %s\') % offset or \'\',\n                                 PRE(str(e)))\n\n    if data_or_revert and request.args[1] == \'modules\':\n        # Lets try to reload the modules\n        try:\n            mopath = \'.\'.join(request.args[2:])[:-3]\n            exec \'import applications.%s.modules.%s\' % (request.args[0], mopath)\n            reload(sys.modules[\'applications.%s.modules.%s\'\n                    % (request.args[0], mopath)])\n        except Exception, e:\n            response.flash = DIV(T(\'failed to reload module because:\'),PRE(str(e)))\n\n    edit_controller = None\n    editviewlinks = None\n    view_link = None\n    if filetype == \'html\' and len(request.args) >= 3:\n        cfilename = os.path.join(request.args[0], \'controllers\',\n                                 request.args[2] + \'.py\')\n        if os.path.exists(apath(cfilename, r=request)):\n            edit_controller = URL(\'edit\', args=[cfilename])\n            view = request.args[3].replace(\'.html\',\'\')\n            view_link = URL(request.args[0],request.args[2],view)\n    elif filetype == \'python\' and request.args[1] == \'controllers\':\n        ## it\'s a controller file.\n        ## Create links to all of the associated view files.\n        app = get_app()\n        viewname = os.path.splitext(request.args[2])[0]\n        viewpath = os.path.join(app,\'views\',viewname)\n        aviewpath = apath(viewpath, r=request)\n        viewlist = []\n        if os.path.exists(aviewpath):\n            if os.path.isdir(aviewpath):\n                viewlist = glob(os.path.join(aviewpath,\'*.html\'))\n        elif os.path.exists(aviewpath+\'.html\'):\n            viewlist.append(aviewpath+\'.html\')\n        if len(viewlist):\n            editviewlinks = []\n            for v in viewlist:\n                vf = os.path.split(v)[-1]\n                vargs = "/".join([viewpath.replace(os.sep,"/"),vf])\n                editviewlinks.append(A(T(vf.split(".")[0]),\\\n                    _href=URL(\'edit\',args=[vargs])))\n\n    if len(request.args) > 2 and request.args[1] == \'controllers\':\n        controller = (request.args[2])[:-3]\n        functions = regex_expose.findall(data)\n    else:\n        (controller, functions) = (None, None)\n\n    if \'from_ajax\' in request.vars:\n        return response.json({\'file_hash\': file_hash, \'saved_on\': saved_on, \'functions\':functions, \'controller\': controller, \'application\': request.args[0], \'highlight\': highlight })\n    else:\n\n        editarea_preferences = {}\n        editarea_preferences[\'FONT_SIZE\'] = \'10\'\n        editarea_preferences[\'FULL_SCREEN\'] = \'false\'\n        editarea_preferences[\'ALLOW_TOGGLE\'] = \'true\'\n        editarea_preferences[\'REPLACE_TAB_BY_SPACES\'] = \'4\'\n        editarea_preferences[\'DISPLAY\'] = \'onload\'\n        for key in editarea_preferences:\n            if globals().has_key(key):\n                editarea_preferences[key]=globals()[key]\n        return dict(app=request.args[0],\n                    filename=filename,\n                    filetype=filetype,\n                    data=data,\n                    edit_controller=edit_controller,\n                    file_hash=file_hash,\n                    saved_on=saved_on,\n                    controller=controller,\n                    functions=functions,\n                    view_link=view_link,\n                    editarea_preferences=editarea_preferences,\n                    editviewlinks=editviewlinks)\n\ndef resolve():\n    """\n    """\n\n    filename = \'/\'.join(request.args)\n    # ## check if file is not there\n    path = apath(filename, r=request)\n    a = safe_read(path).split(\'\\n\')\n    try:\n        b = safe_read(path + \'.1\').split(\'\\n\')\n    except IOError:\n        session.flash = \'Other file, no longer there\'\n        redirect(URL(\'edit\', args=request.args))\n\n    d = difflib.ndiff(a, b)\n\n    def leading(line):\n        """  """\n\n        # TODO: we really need to comment this\n        z = \'\'\n        for (k, c) in enumerate(line):\n            if c == \' \':\n                z += \'&nbsp;\'\n            elif c == \' \\t\':\n                z += \'&nbsp;\'\n            elif k == 0 and c == \'?\':\n                pass\n            else:\n                break\n\n        return XML(z)\n\n    def getclass(item):\n        """ Determine item class """\n\n        if item[0] == \' \':\n            return \'normal\'\n        if item[0] == \'+\':\n            return \'plus\'\n        if item[0] == \'-\':\n            return \'minus\'\n\n    if request.vars:\n        c = \'\\n\'.join([item[2:].rstrip() for (i, item) in enumerate(d) if item[0] \\\n                           == \' \' or \'line%i\' % i in request.vars])\n        safe_write(path, c)\n        session.flash = \'files merged\'\n        redirect(URL(\'edit\', args=request.args))\n    else:\n        # Making the short circuit compatible with <= python2.4\n        gen_data = lambda index,item: not item[:1] in [\'+\',\'-\'] and "" \\\n                   or INPUT(_type=\'checkbox\',\n                            _name=\'line%i\' % index,\n                            value=item[0] == \'+\')\n\n        diff = TABLE(*[TR(TD(gen_data(i,item)),\n                          TD(item[0]),\n                          TD(leading(item[2:]),\n                          TT(item[2:].rstrip())), _class=getclass(item))\n                       for (i, item) in enumerate(d) if item[0] != \'?\'])\n\n    return dict(diff=diff, filename=filename)\n\n\ndef edit_language():\n    """ Edit language file """\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    from gluon.languages import read_dict, write_dict\n    strings = read_dict(apath(filename, r=request))\n    keys = sorted(strings.keys(),lambda x,y: cmp(x.lower(), y.lower()))\n    rows = []\n    rows.append(H2(T(\'Original/Translation\')))\n\n    for key in keys:\n        name = md5_hash(key)\n        if key==strings[key]:\n            _class=\'untranslated\'\n        else:\n            _class=\'translated\'\n        if len(key) <= 40:\n            elem = INPUT(_type=\'text\', _name=name,value=strings[key],\n                         _size=70,_class=_class)\n        else:\n            elem = TEXTAREA(_name=name, value=strings[key], _cols=70,\n                            _rows=5, _class=_class)\n\n        # Making the short circuit compatible with <= python2.4\n        k = (strings[key] != key) and key or B(key)\n\n        rows.append(P(k, BR(), elem, TAG.BUTTON(T(\'delete\'),\n                            _onclick=\'return delkey("%s")\' % name), _id=name))\n\n    rows.append(INPUT(_type=\'submit\', _value=T(\'update\')))\n    form = FORM(*rows)\n    if form.accepts(request.vars, keepvalues=True):\n        strs = dict()\n        for key in keys:\n            name = md5_hash(key)\n            if form.vars[name]==chr(127): continue\n            strs[key] = form.vars[name]\n        write_dict(apath(filename, r=request), strs)\n        session.flash = T(\'file saved on %(time)s\', dict(time=time.ctime()))\n        redirect(URL(r=request,args=request.args))\n    return dict(app=request.args[0], filename=filename, form=form)\n\n\ndef about():\n    """ Read about info """\n    app = get_app()\n    # ## check if file is not there\n    about = safe_read(apath(\'%s/ABOUT\' % app, r=request))\n    license = safe_read(apath(\'%s/LICENSE\' % app, r=request))\n    return dict(app=app, about=MARKMIN(about), license=MARKMIN(license))\n\n\ndef design():\n    """ Application design handler """\n    app = get_app()\n\n    if not response.flash and app == request.application:\n        msg = T(\'ATTENTION: you cannot edit the running application!\')\n        response.flash = msg\n\n    if request.vars.pluginfile!=None and not isinstance(request.vars.pluginfile,str):\n        filename=os.path.basename(request.vars.pluginfile.filename)\n        if plugin_install(app, request.vars.pluginfile.file,\n                          request, filename):\n            session.flash = T(\'new plugin installed\')\n            redirect(URL(\'design\',args=app))\n        else:\n            session.flash = \\\n                T(\'unable to create application "%s"\', request.vars.filename)\n        redirect(URL(r=request))\n    elif isinstance(request.vars.pluginfile,str):\n        session.flash = T(\'plugin not specified\')\n        redirect(URL(r=request))\n\n\n    # If we have only pyc files it means that\n    # we cannot design\n    if os.path.exists(apath(\'%s/compiled\' % app, r=request)):\n        session.flash = \\\n            T(\'application is compiled and cannot be designed\')\n        redirect(URL(\'site\'))\n\n    # Get all models\n    models = listdir(apath(\'%s/models/\' % app, r=request), \'.*\\.py$\')\n    models=[x.replace(\'\\\\\',\'/\') for x in models]\n    defines = {}\n    for m in models:\n        data = safe_read(apath(\'%s/models/%s\' % (app, m), r=request))\n        defines[m] = regex_tables.findall(data)\n        defines[m].sort()\n\n    # Get all controllers\n    controllers = sorted(listdir(apath(\'%s/controllers/\' % app, r=request), \'.*\\.py$\'))\n    controllers = [x.replace(\'\\\\\',\'/\') for x in controllers]\n    functions = {}\n    for c in controllers:\n        data = safe_read(apath(\'%s/controllers/%s\' % (app, c), r=request))\n        items = regex_expose.findall(data)\n        functions[c] = items\n\n    # Get all views\n    views = sorted(listdir(apath(\'%s/views/\' % app, r=request), \'[\\w/\\-]+(\\.\\w+)+$\'))\n    views = [x.replace(\'\\\\\',\'/\') for x in views if not x.endswith(\'.bak\')]\n    extend = {}\n    include = {}\n    for c in views:\n        data = safe_read(apath(\'%s/views/%s\' % (app, c), r=request))\n        items = regex_extend.findall(data)\n\n        if items:\n            extend[c] = items[0][1]\n\n        items = regex_include.findall(data)\n        include[c] = [i[1] for i in items]\n\n    # Get all modules\n    modules = listdir(apath(\'%s/modules/\' % app, r=request), \'.*\\.py$\')\n    modules = modules=[x.replace(\'\\\\\',\'/\') for x in modules]\n    modules.sort()\n\n    # Get all static files\n    statics = listdir(apath(\'%s/static/\' % app, r=request), \'[^\\.#].*\')\n    statics = [x.replace(\'\\\\\',\'/\') for x in statics]\n    statics.sort()\n\n    # Get all languages\n    languages = listdir(apath(\'%s/languages/\' % app, r=request), \'[\\w-]*\\.py\')\n\n    #Get crontab\n    cronfolder = apath(\'%s/cron\' % app, r=request)\n    if not os.path.exists(cronfolder): os.mkdir(cronfolder)\n    crontab = apath(\'%s/cron/crontab\' % app, r=request)\n    if not os.path.exists(crontab):\n        safe_write(crontab, \'#crontab\')\n\n    plugins=[]\n    def filter_plugins(items,plugins):\n        plugins+=[item[7:].split(\'/\')[0].split(\'.\')[0] for item in items if item.startswith(\'plugin_\')]\n        plugins[:]=list(set(plugins))\n        plugins.sort()\n        return [item for item in items if not item.startswith(\'plugin_\')]\n\n    return dict(app=app,\n                models=filter_plugins(models,plugins),\n                defines=defines,\n                controllers=filter_plugins(controllers,plugins),\n                functions=functions,\n                views=filter_plugins(views,plugins),\n                modules=filter_plugins(modules,plugins),\n                extend=extend,\n                include=include,\n                statics=filter_plugins(statics,plugins),\n                languages=languages,\n                crontab=crontab,\n                plugins=plugins)\n\ndef delete_plugin():\n    """ Object delete handler """\n    app=request.args(0)\n    plugin = request.args(1)\n    plugin_name=\'plugin_\'+plugin\n    if \'nodelete\' in request.vars:\n        redirect(URL(\'design\',args=app))\n    elif \'delete\' in request.vars:\n        try:\n            for folder in [\'models\',\'views\',\'controllers\',\'static\',\'modules\']:\n                path=os.path.join(apath(app,r=request),folder)\n                for item in os.listdir(path):\n                    if item.rsplit(\'.\',1)[0] == plugin_name:\n                        filename=os.path.join(path,item)\n                        if os.path.isdir(filename):\n                            shutil.rmtree(filename)\n                        else:\n                            os.unlink(filename)\n            session.flash = T(\'plugin "%(plugin)s" deleted\',\n                              dict(plugin=plugin))\n        except Exception:\n            session.flash = T(\'unable to delete file plugin "%(plugin)s"\',\n                              dict(plugin=plugin))\n        redirect(URL(\'design\',args=request.args(0)))\n    return dict(plugin=plugin)\n\ndef plugin():\n    """ Application design handler """\n    app = get_app()\n    plugin = request.args(1)\n\n    if not response.flash and app == request.application:\n        msg = T(\'ATTENTION: you cannot edit the running application!\')\n        response.flash = msg\n\n    # If we have only pyc files it means that\n    # we cannot design\n    if os.path.exists(apath(\'%s/compiled\' % app, r=request)):\n        session.flash = \\\n            T(\'application is compiled and cannot be designed\')\n        redirect(URL(\'site\'))\n\n    # Get all models\n    models = listdir(apath(\'%s/models/\' % app, r=request), \'.*\\.py$\')\n    models=[x.replace(\'\\\\\',\'/\') for x in models]\n    defines = {}\n    for m in models:\n        data = safe_read(apath(\'%s/models/%s\' % (app, m), r=request))\n        defines[m] = regex_tables.findall(data)\n        defines[m].sort()\n\n    # Get all controllers\n    controllers = sorted(listdir(apath(\'%s/controllers/\' % app, r=request), \'.*\\.py$\'))\n    controllers = [x.replace(\'\\\\\',\'/\') for x in controllers]\n    functions = {}\n    for c in controllers:\n        data = safe_read(apath(\'%s/controllers/%s\' % (app, c), r=request))\n        items = regex_expose.findall(data)\n        functions[c] = items\n\n    # Get all views\n    views = sorted(listdir(apath(\'%s/views/\' % app, r=request), \'[\\w/\\-]+\\.\\w+$\'))\n    views = [x.replace(\'\\\\\',\'/\') for x in views]\n    extend = {}\n    include = {}\n    for c in views:\n        data = safe_read(apath(\'%s/views/%s\' % (app, c), r=request))\n        items = regex_extend.findall(data)\n        if items:\n            extend[c] = items[0][1]\n\n        items = regex_include.findall(data)\n        include[c] = [i[1] for i in items]\n\n    # Get all modules\n    modules = listdir(apath(\'%s/modules/\' % app, r=request), \'.*\\.py$\')\n    modules = modules=[x.replace(\'\\\\\',\'/\') for x in modules]\n    modules.sort()\n\n    # Get all static files\n    statics = listdir(apath(\'%s/static/\' % app, r=request), \'[^\\.#].*\')\n    statics = [x.replace(\'\\\\\',\'/\') for x in statics]\n    statics.sort()\n\n    # Get all languages\n    languages = listdir(apath(\'%s/languages/\' % app, r=request), \'[\\w-]*\\.py\')\n\n    #Get crontab\n    crontab = apath(\'%s/cron/crontab\' % app, r=request)\n    if not os.path.exists(crontab):\n        safe_write(crontab, \'#crontab\')\n\n    def filter_plugins(items):\n        regex=re.compile(\'^plugin_\'+plugin+\'(/.*|\\..*)?$\')\n        return [item for item in items if regex.match(item)]\n\n    return dict(app=app,\n                models=filter_plugins(models),\n                defines=defines,\n                controllers=filter_plugins(controllers),\n                functions=functions,\n                views=filter_plugins(views),\n                modules=filter_plugins(modules),\n                extend=extend,\n                include=include,\n                statics=filter_plugins(statics),\n                languages=languages,\n                crontab=crontab)\n\n\ndef create_file():\n    """ Create files handler """\n    try:\n        app = get_app(name=request.vars.location.split(\'/\')[0])\n        path = apath(request.vars.location, r=request)\n        filename = re.sub(\'[^\\w./-]+\', \'_\', request.vars.filename)\n\n        if path[-11:] == \'/languages/\':\n            # Handle language files\n            if len(filename) == 0:\n                raise SyntaxError\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n            app = path.split(\'/\')[-3]\n            path=os.path.join(apath(app, r=request),\'languages\',filename)\n            if not os.path.exists(path):\n                safe_write(path, \'\')\n            findT(apath(app, r=request), filename[:-3])\n            session.flash = T(\'language file "%(filename)s" created/updated\',\n                              dict(filename=filename))\n            redirect(request.vars.sender)\n\n        elif path[-8:] == \'/models/\':\n            # Handle python models\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = \'# coding: utf8\\n\'\n\n        elif path[-13:] == \'/controllers/\':\n            # Handle python controllers\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = \'# coding: utf8\\n# %s\\ndef index(): return dict(message="hello from %s")\'\n            text = text % (T(\'try something like\'), filename)\n\n        elif path[-7:] == \'/views/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            # Handle template (html) views\n            if filename.find(\'.\')<0:\n                filename += \'.html\'\n            extension = filename.split(\'.\')[-1].lower()\n\n            if len(filename) == 5:\n                raise SyntaxError\n\n            msg = T(\'This is the %(filename)s template\',\n                    dict(filename=filename))\n            if extension == \'html\':\n                text = dedent("""\n                   {{extend \'layout.html\'}}\n                   <h1>%s</h1>\n                   {{=BEAUTIFY(response._vars)}}""" % msg)\n            else:\n                generic = os.path.join(path,\'generic.\'+extension)\n                if os.path.exists(generic):\n                    text = read_file(generic)\n                else:\n                    text = \'\'\n\n        elif path[-9:] == \'/modules/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            # Handle python module files\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = dedent("""\n                   #!/usr/bin/env python\n                   # coding: utf8\n                   from gluon import *\\n""")\n\n        elif path[-8:] == \'/static/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            text = \'\'\n        else:\n            redirect(request.vars.sender)\n\n        full_filename = os.path.join(path, filename)\n        dirpath = os.path.dirname(full_filename)\n\n        if not os.path.exists(dirpath):\n            os.makedirs(dirpath)\n\n        if os.path.exists(full_filename):\n            raise SyntaxError\n\n        safe_write(full_filename, text)\n        session.flash = T(\'file "%(filename)s" created\',\n                          dict(filename=full_filename[len(path):]))\n        redirect(URL(\'edit\',\n                 args=[os.path.join(request.vars.location, filename)]))\n    except Exception, e:\n        if not isinstance(e,HTTP):\n            session.flash = T(\'cannot create file\')\n\n    redirect(request.vars.sender)\n\n\ndef upload_file():\n    """ File uploading handler """\n\n    try:\n        filename = None\n        app = get_app(name=request.vars.location.split(\'/\')[0])\n        path = apath(request.vars.location, r=request)\n\n        if request.vars.filename:\n            filename = re.sub(\'[^\\w\\./]+\', \'_\', request.vars.filename)\n        else:\n            filename = os.path.split(request.vars.file.filename)[-1]\n\n        if path[-8:] == \'/models/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-9:] == \'/modules/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-13:] == \'/controllers/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-7:] == \'/views/\' and not filename[-5:] == \'.html\':\n            filename += \'.html\'\n\n        if path[-11:] == \'/languages/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        filename = os.path.join(path, filename)\n        dirpath = os.path.dirname(filename)\n\n        if not os.path.exists(dirpath):\n            os.makedirs(dirpath)\n\n        safe_write(filename, request.vars.file.file.read(), \'wb\')\n        session.flash = T(\'file "%(filename)s" uploaded\',\n                          dict(filename=filename[len(path):]))\n    except Exception:\n        if filename:\n            d = dict(filename = filename[len(path):])\n        else:\n            d = dict(filename = \'unkown\')\n        session.flash = T(\'cannot upload file "%(filename)s"\', d)\n\n    redirect(request.vars.sender)\n\n\ndef errors():\n    """ Error handler """\n    import operator\n    import os\n    import pickle\n    import hashlib\n\n    app = get_app()\n\n    method = request.args(1) or \'new\'\n    db_ready = {}\n    db_ready[\'status\'] = get_ticket_storage(app)\n    db_ready[\'errmessage\'] = "No ticket_storage.txt found under /private folder"\n    db_ready[\'errlink\'] = "http://web2py.com/books/default/chapter/29/13#Collecting-tickets"\n\n    if method == \'new\':\n        errors_path = apath(\'%s/errors\' % app, r=request)\n\n        delete_hashes = []\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                delete_hashes.append(item[7:])\n\n        hash2error = dict()\n\n        for fn in listdir(errors_path, \'^\\w.*\'):\n            fullpath = os.path.join(errors_path, fn)\n            if not os.path.isfile(fullpath): continue\n            try:\n                fullpath_file = open(fullpath, \'r\')\n                try:\n                    error = pickle.load(fullpath_file)\n                finally:\n                    fullpath_file.close()\n            except IOError:\n                continue\n\n            hash = hashlib.md5(error[\'traceback\']).hexdigest()\n\n            if hash in delete_hashes:\n                os.unlink(fullpath)\n            else:\n                try:\n                    hash2error[hash][\'count\'] += 1\n                except KeyError:\n                    error_lines = error[\'traceback\'].split("\\n")\n                    last_line = error_lines[-2]\n                    error_causer = os.path.split(error[\'layer\'])[1]\n                    hash2error[hash] = dict(count=1, pickel=error,\n                                            causer=error_causer,\n                                            last_line=last_line,\n                                            hash=hash,ticket=fn)\n\n        decorated = [(x[\'count\'], x) for x in hash2error.values()]\n        decorated.sort(key=operator.itemgetter(0), reverse=True)\n\n        return dict(errors = [x[1] for x in decorated], app=app, method=method, db_ready=db_ready)\n\n    elif method == \'dbnew\':\n        errors_path = apath(\'%s/errors\' % app, r=request)\n        tk_db, tk_table = get_ticket_storage(app)\n\n        delete_hashes = []\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                delete_hashes.append(item[7:])\n\n        hash2error = dict()\n\n        for fn in tk_db(tk_table.id>0).select():\n            try:\n                error = pickle.loads(fn.ticket_data)\n            except AttributeError:\n                tk_db(tk_table.id == fn.id).delete()\n                tk_db.commit()\n\n            hash = hashlib.md5(error[\'traceback\']).hexdigest()\n\n            if hash in delete_hashes:\n                tk_db(tk_table.id == fn.id).delete()\n                tk_db.commit()\n            else:\n                try:\n                    hash2error[\'hash\'][\'count\'] += 1\n                except KeyError:\n                    error_lines = error[\'traceback\'].split("\\n")\n                    last_line = error_lines[-2]\n                    error_causer = os.path.split(error[\'layer\'])[1]\n                    hash2error[hash] = dict(count=1, pickel=error,\n                                            causer=error_causer,\n                                            last_line=last_line,\n                                            hash=hash,ticket=fn.ticket_id)\n\n        decorated = [(x[\'count\'], x) for x in hash2error.values()]\n\n        decorated.sort(key=operator.itemgetter(0), reverse=True)\n\n        return dict(errors = [x[1] for x in decorated], app=app, method=method)\n\n    elif method == \'dbold\':\n        tk_db, tk_table = get_ticket_storage(app)\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                tk_db(tk_table.ticket_id == item[7:]).delete()\n                tk_db.commit()\n        tickets_ = tk_db(tk_table.id>0).select(tk_table.ticket_id, tk_table.created_datetime, orderby=~tk_table.created_datetime)\n        tickets = [row.ticket_id for row in tickets_]\n        times = dict([(row.ticket_id, row.created_datetime) for row in tickets_])\n\n        return dict(app=app, tickets=tickets, method=method, times=times)\n\n    else:\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                os.unlink(apath(\'%s/errors/%s\' % (app, item[7:]), r=request))\n        func = lambda p: os.stat(apath(\'%s/errors/%s\' % \\\n                                           (app, p), r=request)).st_mtime\n        tickets = sorted(listdir(apath(\'%s/errors/\' % app, r=request), \'^\\w.*\'),\n                         key=func,\n                         reverse=True)\n\n        return dict(app=app, tickets=tickets, method=method, db_ready=db_ready)\n\ndef get_ticket_storage(app):\n    private_folder = apath(\'%s/private\' % app, r=request)\n    ticket_file = os.path.join(private_folder, \'ticket_storage.txt\')\n    if os.path.exists(ticket_file):\n        db_string = open(ticket_file).read()\n        db_string = db_string.strip().replace(\'\\r\',\'\').replace(\'\\n\',\'\')\n    else:\n        return False\n    tickets_table = \'web2py_ticket\'\n    tablename = tickets_table + \'_\' + app\n    db_path = apath(\'%s/databases\' % app, r=request)\n    ticketsdb = DAL(db_string, folder=db_path, auto_import=True)\n    if not ticketsdb.get(tablename):\n        table = ticketsdb.define_table(\n                tablename,\n                Field(\'ticket_id\', length=100),\n                Field(\'ticket_data\', \'text\'),\n                Field(\'created_datetime\', \'datetime\'),\n                )\n    return ticketsdb , ticketsdb.get(tablename)\n\ndef make_link(path):\n    """ Create a link from a path """\n    tryFile = path.replace(\'\\\\\', \'/\')\n\n    if os.path.isabs(tryFile) and os.path.isfile(tryFile):\n        (folder, filename) = os.path.split(tryFile)\n        (base, ext) = os.path.splitext(filename)\n        app = get_app()\n\n        editable = {\'controllers\': \'.py\', \'models\': \'.py\', \'views\': \'.html\'}\n        for key in editable.keys():\n            check_extension = folder.endswith("%s/%s" % (app,key))\n            if ext.lower() == editable[key] and check_extension:\n                return A(\'"\' + tryFile + \'"\',\n                         _href=URL(r=request,\n                         f=\'edit/%s/%s/%s\' % (app, key, filename))).xml()\n    return \'\'\n\n\ndef make_links(traceback):\n    """ Make links using the given traceback """\n\n    lwords = traceback.split(\'"\')\n\n    # Making the short circuit compatible with <= python2.4\n    result = (len(lwords) != 0) and lwords[0] or \'\'\n\n    i = 1\n\n    while i < len(lwords):\n        link = make_link(lwords[i])\n\n        if link == \'\':\n            result += \'"\' + lwords[i]\n        else:\n            result += link\n\n            if i + 1 < len(lwords):\n                result += lwords[i + 1]\n                i = i + 1\n\n        i = i + 1\n\n    return result\n\n\nclass TRACEBACK(object):\n    """ Generate the traceback """\n\n    def __init__(self, text):\n        """ TRACEBACK constructor """\n\n        self.s = make_links(CODE(text).xml())\n\n    def xml(self):\n        """ Returns the xml """\n\n        return self.s\n\n\ndef ticket():\n    """ Ticket handler """\n\n    if len(request.args) != 2:\n        session.flash = T(\'invalid ticket\')\n        redirect(URL(\'site\'))\n\n    app = get_app()\n    myversion = request.env.web2py_version\n    ticket = request.args[1]\n    e = RestrictedError()\n    e.load(request, app, ticket)\n\n    return dict(app=app,\n                ticket=ticket,\n                output=e.output,\n                traceback=(e.traceback and TRACEBACK(e.traceback)),\n                snapshot=e.snapshot,\n                code=e.code,\n                layer=e.layer,\n                myversion=myversion)\n\ndef ticketdb():\n    """ Ticket handler """\n\n    if len(request.args) != 2:\n        session.flash = T(\'invalid ticket\')\n        redirect(URL(\'site\'))\n\n    app = get_app()\n    myversion = request.env.web2py_version\n    ticket = request.args[1]\n    e = RestrictedError()\n    request.tickets_db = get_ticket_storage(app)[0]\n    e.load(request, app, ticket)\n    response.view = \'default/ticket.html\'\n    return dict(app=app,\n                ticket=ticket,\n                output=e.output,\n                traceback=(e.traceback and TRACEBACK(e.traceback)),\n                snapshot=e.snapshot,\n                code=e.code,\n                layer=e.layer,\n                myversion=myversion)\n\ndef error():\n    """ Generate a ticket (for testing) """\n    raise RuntimeError(\'admin ticket generator at your service\')\n\ndef update_languages():\n    """ Update available languages """\n\n    app = get_app()\n    update_all_languages(apath(app, r=request))\n    session.flash = T(\'Language files (static strings) updated\')\n    redirect(URL(\'design\',args=app,anchor=\'languages\'))\n\n\ndef twitter():\n    session.forget()\n    session._unlock(response)\n    import gluon.tools\n    import gluon.contrib.simplejson as sj\n    try:\n        if TWITTER_HASH:\n            page = urllib.urlopen("http://search.twitter.com/search.json?q=%%40%s" % TWITTER_HASH).read()\n            data = sj.loads(page  , encoding="utf-8")[\'results\']\n            d = dict()\n            for e in data:\n                d[e["id"]] = e\n            r = reversed(sorted(d))\n            return dict(tweets = [d[k] for k in r])\n        else:\n            return \'disabled\'\n    except Exception, e:\n        return DIV(T(\'Unable to download because:\'),BR(),str(e))\n\n\ndef user():\n    if MULTI_USER_MODE:\n        if not db(db.auth_user).count():\n            auth.settings.registration_requires_approval = False\n        return dict(form=auth())\n    else:\n        return dict(form=T("Disabled"))\n\ndef reload_routes():\n    """ Reload routes.py """\n    import gluon.rewrite\n    gluon.rewrite.load()\n    redirect(URL(\'site\'))\n\n\n\nresponse._vars=response._caller(reload_routes)\n'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'__getslice__'
p12
S"<method-wrapper '__getslice__' of exceptions.SyntaxError object at 0x9ee38f0>"
p13
sS'text'
p14
S'"\\t\\t\\t\\t(r\'.*/udi0312/default/(?P<any>.*)\', \'/\\\\g<any>\'),\\n"'
p15
sS'__str__'
p16
S"<method-wrapper '__str__' of exceptions.SyntaxError object at 0x9ee38f0>"
p17
sS'__reduce__'
p18
S'<built-in method __reduce__ of exceptions.SyntaxError object at 0x9ee38f0>'
p19
sS'__dict__'
p20
S'{}'
p21
sS'__init__'
p22
S"<method-wrapper '__init__' of exceptions.SyntaxError object at 0x9ee38f0>"
p23
sS'__setattr__'
p24
S"<method-wrapper '__setattr__' of exceptions.SyntaxError object at 0x9ee38f0>"
p25
sS'__reduce_ex__'
p26
S'<built-in method __reduce_ex__ of exceptions.SyntaxError object at 0x9ee38f0>'
p27
sS'__new__'
p28
S'<built-in method __new__ of type object at 0x100320>'
p29
sS'__class__'
p30
S"<type 'exceptions.SyntaxError'>"
p31
sS'filename'
p32
S"'<string>'"
p33
sS'lineno'
p34
S'48'
p35
sS'msg'
p36
S"'invalid syntax'"
p37
sS'__doc__'
p38
S"'Invalid syntax.'"
p39
sS'__getitem__'
p40
S"<method-wrapper '__getitem__' of exceptions.SyntaxError object at 0x9ee38f0>"
p41
sS'__setstate__'
p42
S'<built-in method __setstate__ of exceptions.SyntaxError object at 0x9ee38f0>'
p43
sS'__getattribute__'
p44
S"<method-wrapper '__getattribute__' of exceptions.SyntaxError object at 0x9ee38f0>"
p45
sS'print_file_and_line'
p46
S'None'
p47
sS'args'
p48
S'(\'invalid syntax\', (\'<string>\', 48, 5, "\\t\\t\\t\\t(r\'.*/udi0312/default/(?P<any>.*)\', \'/\\\\g<any>\'),\\n"))'
p49
sS'offset'
p50
S'5'
sS'__delattr__'
p51
S"<method-wrapper '__delattr__' of exceptions.SyntaxError object at 0x9ee38f0>"
p52
sS'__repr__'
p53
S"<method-wrapper '__repr__' of exceptions.SyntaxError object at 0x9ee38f0>"
p54
sS'__hash__'
p55
S"<method-wrapper '__hash__' of exceptions.SyntaxError object at 0x9ee38f0>"
p56
ssS'evalue'
p57
S'invalid syntax (<string>, line 48)'
p58
sS'request'
p59
ccopy_reg
_reconstructor
p60
(cgluon.html
BEAUTIFY
p61
c__builtin__
object
p62
NtRp63
(dp64
S'attributes'
p65
(dp66
sS'components'
p67
(lp68
g60
(cgluon.html
TABLE
p69
g62
NtRp70
(dp71
g65
(dp72
S'level'
p73
I5
ssS'parent'
p74
Nsg67
(lp75
g60
(cgluon.html
TR
p76
g62
NtRp77
(dp78
g65
(dp79
sg74
g70
sg67
(lp80
g60
(cgluon.html
TD
p81
g62
NtRp82
(dp83
g65
(dp84
S'_style'
p85
S'font-weight:bold;vertical-align:top'
p86
ssg74
g77
sg67
(lp87
S'ajax'
p88
asbag60
(g81
g62
NtRp89
(dp90
g65
(dp91
S'_valign'
p92
S'top'
p93
ssg74
g77
sg67
(lp94
S':'
asbag60
(g81
g62
NtRp95
(dp96
g65
(dp97
sg74
g77
sg67
(lp98
g60
(g61
g62
NtRp99
(dp100
g65
(dp101
g73
I5
ssg74
g95
sg67
(lp102
S'False'
p103
asbasbasbag60
(g76
g62
NtRp104
(dp105
g65
(dp106
sg74
g70
sg67
(lp107
g60
(g81
g62
NtRp108
(dp109
g65
(dp110
g85
g86
ssg74
g104
sg67
(lp111
S'application'
p112
asbag60
(g81
g62
NtRp113
(dp114
g65
(dp115
g92
g93
ssg74
g104
sg67
(lp116
S':'
asbag60
(g81
g62
NtRp117
(dp118
g65
(dp119
sg74
g104
sg67
(lp120
g60
(g61
g62
NtRp121
(dp122
g65
(dp123
g73
I5
ssg74
g117
sg67
(lp124
S'admin'
p125
asbasbasbag60
(g76
g62
NtRp126
(dp127
g65
(dp128
sg74
g70
sg67
(lp129
g60
(g81
g62
NtRp130
(dp131
g65
(dp132
g85
g86
ssg74
g126
sg67
(lp133
g48
asbag60
(g81
g62
NtRp134
(dp135
g65
(dp136
g92
g93
ssg74
g126
sg67
(lp137
S':'
asbag60
(g81
g62
NtRp138
(dp139
g65
(dp140
sg74
g126
sg67
(lp141
g60
(g61
g62
NtRp142
(dp143
g65
(dp144
g73
I5
ssg74
g138
sg67
(lp145
g60
(g69
g62
NtRp146
(dp147
g65
(dp148
g73
I4
ssg74
Nsg67
(lp149
sbasbasbasbag60
(g76
g62
NtRp150
(dp151
g65
(dp152
sg74
g70
sg67
(lp153
g60
(g81
g62
NtRp154
(dp155
g65
(dp156
g85
g86
ssg74
g150
sg67
(lp157
S'body'
p158
asbag60
(g81
g62
NtRp159
(dp160
g65
(dp161
g92
g93
ssg74
g150
sg67
(lp162
S':'
asbag60
(g81
g62
NtRp163
(dp164
g65
(dp165
sg74
g150
sg67
(lp166
g60
(g61
g62
NtRp167
(dp168
g65
(dp169
g73
I5
ssg74
g163
sg67
(lp170
S'<cStringIO.StringO object at 0x8e1a2e0>'
p171
asbasbasbag60
(g76
g62
NtRp172
(dp173
g65
(dp174
sg74
g70
sg67
(lp175
g60
(g81
g62
NtRp176
(dp177
g65
(dp178
g85
g86
ssg74
g172
sg67
(lp179
S'client'
p180
asbag60
(g81
g62
NtRp181
(dp182
g65
(dp183
g92
g93
ssg74
g172
sg67
(lp184
S':'
asbag60
(g81
g62
NtRp185
(dp186
g65
(dp187
sg74
g172
sg67
(lp188
g60
(g61
g62
NtRp189
(dp190
g65
(dp191
g73
I5
ssg74
g185
sg67
(lp192
S'127.0.0.1'
p193
asbasbasbag60
(g76
g62
NtRp194
(dp195
g65
(dp196
sg74
g70
sg67
(lp197
g60
(g81
g62
NtRp198
(dp199
g65
(dp200
g85
g86
ssg74
g194
sg67
(lp201
S'controller'
p202
asbag60
(g81
g62
NtRp203
(dp204
g65
(dp205
g92
g93
ssg74
g194
sg67
(lp206
S':'
asbag60
(g81
g62
NtRp207
(dp208
g65
(dp209
sg74
g194
sg67
(lp210
g60
(g61
g62
NtRp211
(dp212
g65
(dp213
g73
I5
ssg74
g207
sg67
(lp214
S'default'
p215
asbasbasbag60
(g76
g62
NtRp216
(dp217
g65
(dp218
sg74
g70
sg67
(lp219
g60
(g81
g62
NtRp220
(dp221
g65
(dp222
g85
g86
ssg74
g216
sg67
(lp223
S'cookies'
p224
asbag60
(g81
g62
NtRp225
(dp226
g65
(dp227
g92
g93
ssg74
g216
sg67
(lp228
S':'
asbag60
(g81
g62
NtRp229
(dp230
g65
(dp231
sg74
g216
sg67
(lp232
g60
(g61
g62
NtRp233
(dp234
g65
(dp235
g73
I5
ssg74
g229
sg67
(lp236
g60
(g69
g62
NtRp237
(dp238
g65
(dp239
g73
I4
ssg74
Nsg67
(lp240
g60
(g76
g62
NtRp241
(dp242
g65
(dp243
sg74
g237
sg67
(lp244
g60
(g81
g62
NtRp245
(dp246
g65
(dp247
g85
g86
ssg74
g241
sg67
(lp248
S'session_id_admin'
p249
asbag60
(g81
g62
NtRp250
(dp251
g65
(dp252
g92
g93
ssg74
g241
sg67
(lp253
S':'
asbag60
(g81
g62
NtRp254
(dp255
g65
(dp256
sg74
g241
sg67
(lp257
g60
(g61
g62
NtRp258
(dp259
g65
(dp260
g73
I4
ssg74
g254
sg67
(lp261
g60
(g69
g62
NtRp262
(dp263
g65
(dp264
g73
I3
ssg74
Nsg67
(lp265
g60
(g76
g62
NtRp266
(dp267
g65
(dp268
sg74
g262
sg67
(lp269
g60
(g81
g62
NtRp270
(dp271
g65
(dp272
g85
g86
ssg74
g266
sg67
(lp273
S'comment'
p274
asbag60
(g81
g62
NtRp275
(dp276
g65
(dp277
g92
g93
ssg74
g266
sg67
(lp278
S':'
asbag60
(g81
g62
NtRp279
(dp280
g65
(dp281
sg74
g266
sg67
(lp282
g60
(g61
g62
NtRp283
(dp284
g65
(dp285
g73
I3
ssg74
g279
sg67
(lp286
S''
asbasbasbag60
(g76
g62
NtRp287
(dp288
g65
(dp289
sg74
g262
sg67
(lp290
g60
(g81
g62
NtRp291
(dp292
g65
(dp293
g85
g86
ssg74
g287
sg67
(lp294
S'domain'
p295
asbag60
(g81
g62
NtRp296
(dp297
g65
(dp298
g92
g93
ssg74
g287
sg67
(lp299
S':'
asbag60
(g81
g62
NtRp300
(dp301
g65
(dp302
sg74
g287
sg67
(lp303
g60
(g61
g62
NtRp304
(dp305
g65
(dp306
g73
I3
ssg74
g300
sg67
(lp307
S''
asbasbasbag60
(g76
g62
NtRp308
(dp309
g65
(dp310
sg74
g262
sg67
(lp311
g60
(g81
g62
NtRp312
(dp313
g65
(dp314
g85
g86
ssg74
g308
sg67
(lp315
S'expires'
p316
asbag60
(g81
g62
NtRp317
(dp318
g65
(dp319
g92
g93
ssg74
g308
sg67
(lp320
S':'
asbag60
(g81
g62
NtRp321
(dp322
g65
(dp323
sg74
g308
sg67
(lp324
g60
(g61
g62
NtRp325
(dp326
g65
(dp327
g73
I3
ssg74
g321
sg67
(lp328
S''
asbasbasbag60
(g76
g62
NtRp329
(dp330
g65
(dp331
sg74
g262
sg67
(lp332
g60
(g81
g62
NtRp333
(dp334
g65
(dp335
g85
g86
ssg74
g329
sg67
(lp336
S'max-age'
p337
asbag60
(g81
g62
NtRp338
(dp339
g65
(dp340
g92
g93
ssg74
g329
sg67
(lp341
S':'
asbag60
(g81
g62
NtRp342
(dp343
g65
(dp344
sg74
g329
sg67
(lp345
g60
(g61
g62
NtRp346
(dp347
g65
(dp348
g73
I3
ssg74
g342
sg67
(lp349
S''
asbasbasbag60
(g76
g62
NtRp350
(dp351
g65
(dp352
sg74
g262
sg67
(lp353
g60
(g81
g62
NtRp354
(dp355
g65
(dp356
g85
g86
ssg74
g350
sg67
(lp357
S'path'
p358
asbag60
(g81
g62
NtRp359
(dp360
g65
(dp361
g92
g93
ssg74
g350
sg67
(lp362
S':'
asbag60
(g81
g62
NtRp363
(dp364
g65
(dp365
sg74
g350
sg67
(lp366
g60
(g61
g62
NtRp367
(dp368
g65
(dp369
g73
I3
ssg74
g363
sg67
(lp370
S''
asbasbasbag60
(g76
g62
NtRp371
(dp372
g65
(dp373
sg74
g262
sg67
(lp374
g60
(g81
g62
NtRp375
(dp376
g65
(dp377
g85
g86
ssg74
g371
sg67
(lp378
S'secure'
p379
asbag60
(g81
g62
NtRp380
(dp381
g65
(dp382
g92
g93
ssg74
g371
sg67
(lp383
S':'
asbag60
(g81
g62
NtRp384
(dp385
g65
(dp386
sg74
g371
sg67
(lp387
g60
(g61
g62
NtRp388
(dp389
g65
(dp390
g73
I3
ssg74
g384
sg67
(lp391
S''
asbasbasbag60
(g76
g62
NtRp392
(dp393
g65
(dp394
sg74
g262
sg67
(lp395
g60
(g81
g62
NtRp396
(dp397
g65
(dp398
g85
g86
ssg74
g392
sg67
(lp399
S'version'
p400
asbag60
(g81
g62
NtRp401
(dp402
g65
(dp403
g92
g93
ssg74
g392
sg67
(lp404
S':'
asbag60
(g81
g62
NtRp405
(dp406
g65
(dp407
sg74
g392
sg67
(lp408
g60
(g61
g62
NtRp409
(dp410
g65
(dp411
g73
I3
ssg74
g405
sg67
(lp412
S''
asbasbasbasbasbasbasbag60
(g76
g62
NtRp413
(dp414
g65
(dp415
sg74
g237
sg67
(lp416
g60
(g81
g62
NtRp417
(dp418
g65
(dp419
g85
g86
ssg74
g413
sg67
(lp420
S'session_id_udi0312'
p421
asbag60
(g81
g62
NtRp422
(dp423
g65
(dp424
g92
g93
ssg74
g413
sg67
(lp425
S':'
asbag60
(g81
g62
NtRp426
(dp427
g65
(dp428
sg74
g413
sg67
(lp429
g60
(g61
g62
NtRp430
(dp431
g65
(dp432
g73
I4
ssg74
g426
sg67
(lp433
g60
(g69
g62
NtRp434
(dp435
g65
(dp436
g73
I3
ssg74
Nsg67
(lp437
g60
(g76
g62
NtRp438
(dp439
g65
(dp440
sg74
g434
sg67
(lp441
g60
(g81
g62
NtRp442
(dp443
g65
(dp444
g85
g86
ssg74
g438
sg67
(lp445
g274
asbag60
(g81
g62
NtRp446
(dp447
g65
(dp448
g92
g93
ssg74
g438
sg67
(lp449
S':'
asbag60
(g81
g62
NtRp450
(dp451
g65
(dp452
sg74
g438
sg67
(lp453
g60
(g61
g62
NtRp454
(dp455
g65
(dp456
g73
I3
ssg74
g450
sg67
(lp457
S''
asbasbasbag60
(g76
g62
NtRp458
(dp459
g65
(dp460
sg74
g434
sg67
(lp461
g60
(g81
g62
NtRp462
(dp463
g65
(dp464
g85
g86
ssg74
g458
sg67
(lp465
g295
asbag60
(g81
g62
NtRp466
(dp467
g65
(dp468
g92
g93
ssg74
g458
sg67
(lp469
S':'
asbag60
(g81
g62
NtRp470
(dp471
g65
(dp472
sg74
g458
sg67
(lp473
g60
(g61
g62
NtRp474
(dp475
g65
(dp476
g73
I3
ssg74
g470
sg67
(lp477
S''
asbasbasbag60
(g76
g62
NtRp478
(dp479
g65
(dp480
sg74
g434
sg67
(lp481
g60
(g81
g62
NtRp482
(dp483
g65
(dp484
g85
g86
ssg74
g478
sg67
(lp485
g316
asbag60
(g81
g62
NtRp486
(dp487
g65
(dp488
g92
g93
ssg74
g478
sg67
(lp489
S':'
asbag60
(g81
g62
NtRp490
(dp491
g65
(dp492
sg74
g478
sg67
(lp493
g60
(g61
g62
NtRp494
(dp495
g65
(dp496
g73
I3
ssg74
g490
sg67
(lp497
S''
asbasbasbag60
(g76
g62
NtRp498
(dp499
g65
(dp500
sg74
g434
sg67
(lp501
g60
(g81
g62
NtRp502
(dp503
g65
(dp504
g85
g86
ssg74
g498
sg67
(lp505
g337
asbag60
(g81
g62
NtRp506
(dp507
g65
(dp508
g92
g93
ssg74
g498
sg67
(lp509
S':'
asbag60
(g81
g62
NtRp510
(dp511
g65
(dp512
sg74
g498
sg67
(lp513
g60
(g61
g62
NtRp514
(dp515
g65
(dp516
g73
I3
ssg74
g510
sg67
(lp517
S''
asbasbasbag60
(g76
g62
NtRp518
(dp519
g65
(dp520
sg74
g434
sg67
(lp521
g60
(g81
g62
NtRp522
(dp523
g65
(dp524
g85
g86
ssg74
g518
sg67
(lp525
g358
asbag60
(g81
g62
NtRp526
(dp527
g65
(dp528
g92
g93
ssg74
g518
sg67
(lp529
S':'
asbag60
(g81
g62
NtRp530
(dp531
g65
(dp532
sg74
g518
sg67
(lp533
g60
(g61
g62
NtRp534
(dp535
g65
(dp536
g73
I3
ssg74
g530
sg67
(lp537
S''
asbasbasbag60
(g76
g62
NtRp538
(dp539
g65
(dp540
sg74
g434
sg67
(lp541
g60
(g81
g62
NtRp542
(dp543
g65
(dp544
g85
g86
ssg74
g538
sg67
(lp545
g379
asbag60
(g81
g62
NtRp546
(dp547
g65
(dp548
g92
g93
ssg74
g538
sg67
(lp549
S':'
asbag60
(g81
g62
NtRp550
(dp551
g65
(dp552
sg74
g538
sg67
(lp553
g60
(g61
g62
NtRp554
(dp555
g65
(dp556
g73
I3
ssg74
g550
sg67
(lp557
S''
asbasbasbag60
(g76
g62
NtRp558
(dp559
g65
(dp560
sg74
g434
sg67
(lp561
g60
(g81
g62
NtRp562
(dp563
g65
(dp564
g85
g86
ssg74
g558
sg67
(lp565
g400
asbag60
(g81
g62
NtRp566
(dp567
g65
(dp568
g92
g93
ssg74
g558
sg67
(lp569
S':'
asbag60
(g81
g62
NtRp570
(dp571
g65
(dp572
sg74
g558
sg67
(lp573
g60
(g61
g62
NtRp574
(dp575
g65
(dp576
g73
I3
ssg74
g570
sg67
(lp577
S''
asbasbasbasbasbasbasbasbasbasbasbag60
(g76
g62
NtRp578
(dp579
g65
(dp580
sg74
g70
sg67
(lp581
g60
(g81
g62
NtRp582
(dp583
g65
(dp584
g85
g86
ssg74
g578
sg67
(lp585
S'env'
p586
asbag60
(g81
g62
NtRp587
(dp588
g65
(dp589
g92
g93
ssg74
g578
sg67
(lp590
S':'
asbag60
(g81
g62
NtRp591
(dp592
g65
(dp593
sg74
g578
sg67
(lp594
g60
(g61
g62
NtRp595
(dp596
g65
(dp597
g73
I5
ssg74
g591
sg67
(lp598
g60
(g69
g62
NtRp599
(dp600
g65
(dp601
g73
I4
ssg74
Nsg67
(lp602
g60
(g76
g62
NtRp603
(dp604
g65
(dp605
sg74
g599
sg67
(lp606
g60
(g81
g62
NtRp607
(dp608
g65
(dp609
g85
g86
ssg74
g603
sg67
(lp610
S'app_folders'
p611
asbag60
(g81
g62
NtRp612
(dp613
g65
(dp614
g92
g93
ssg74
g603
sg67
(lp615
S':'
asbag60
(g81
g62
NtRp616
(dp617
g65
(dp618
sg74
g603
sg67
(lp619
g60
(g61
g62
NtRp620
(dp621
g65
(dp622
g73
I4
ssg74
g616
sg67
(lp623
S"set(['/Users/udimilo/Documents/web2py/applications/udi0312/', '/Users/udimilo/Documents/web2py/applications/admin/'])"
p624
asbasbasbag60
(g76
g62
NtRp625
(dp626
g65
(dp627
sg74
g599
sg67
(lp628
g60
(g81
g62
NtRp629
(dp630
g65
(dp631
g85
g86
ssg74
g625
sg67
(lp632
S'applications_parent'
p633
asbag60
(g81
g62
NtRp634
(dp635
g65
(dp636
g92
g93
ssg74
g625
sg67
(lp637
S':'
asbag60
(g81
g62
NtRp638
(dp639
g65
(dp640
sg74
g625
sg67
(lp641
g60
(g61
g62
NtRp642
(dp643
g65
(dp644
g73
I4
ssg74
g638
sg67
(lp645
S'/Users/udimilo/Documents/web2py'
p646
asbasbasbag60
(g76
g62
NtRp647
(dp648
g65
(dp649
sg74
g599
sg67
(lp650
g60
(g81
g62
NtRp651
(dp652
g65
(dp653
g85
g86
ssg74
g647
sg67
(lp654
S'cmd_args'
p655
asbag60
(g81
g62
NtRp656
(dp657
g65
(dp658
g92
g93
ssg74
g647
sg67
(lp659
S':'
asbag60
(g81
g62
NtRp660
(dp661
g65
(dp662
sg74
g647
sg67
(lp663
g60
(g61
g62
NtRp664
(dp665
g65
(dp666
g73
I4
ssg74
g660
sg67
(lp667
g60
(g69
g62
NtRp668
(dp669
g65
(dp670
g73
I3
ssg74
Nsg67
(lp671
sbasbasbasbag60
(g76
g62
NtRp672
(dp673
g65
(dp674
sg74
g599
sg67
(lp675
g60
(g81
g62
NtRp676
(dp677
g65
(dp678
g85
g86
ssg74
g672
sg67
(lp679
S'cmd_options'
p680
asbag60
(g81
g62
NtRp681
(dp682
g65
(dp683
g92
g93
ssg74
g672
sg67
(lp684
S':'
asbag60
(g81
g62
NtRp685
(dp686
g65
(dp687
sg74
g672
sg67
(lp688
g60
(g61
g62
NtRp689
(dp690
g65
(dp691
g73
I4
ssg74
g685
sg67
(lp692
S"<Values at 0x23196e8: {'verbose': False, 'ip': '127.0.0.1', 'shutdown_timeout': 5, 'taskbar': False, 'nocron': False, 'pid_filename': 'httpserver.pid', 'maxthreads': None, 'softcron': False, 'server_name': 'Udi-Milos-MacBook-Pro.local', 'bpython': False, 'nogui': False, 'port': 8000, 'extcron': False, 'debuglevel': 30, 'test': None, 'folder': '/Users/udimilo/Documents/web2py', 'config': '', 'import_models': False, 'winservice': '', 'shell': None, 'run': '', 'log_filename': 'httpserver.log', 'args': [''], 'socket_timeout': 5, 'ssl_ca_certificate': None, 'scheduler': None, 'profiler_filename': None, 'ssl_private_key': '', 'password': '<ask>', 'request_queue_size': 5, 'ssl_certificate': '', 'cronjob': False, 'numthreads': None, 'quiet': False, 'interfaces': None, 'minthreads': None, 'timeout': 10, 'plain': False, 'nobanner': False}>"
p693
asbasbasbag60
(g76
g62
NtRp694
(dp695
g65
(dp696
sg74
g599
sg67
(lp697
g60
(g81
g62
NtRp698
(dp699
g65
(dp700
g85
g86
ssg74
g694
sg67
(lp701
S'db_sessions'
p702
asbag60
(g81
g62
NtRp703
(dp704
g65
(dp705
g92
g93
ssg74
g694
sg67
(lp706
S':'
asbag60
(g81
g62
NtRp707
(dp708
g65
(dp709
sg74
g694
sg67
(lp710
g60
(g61
g62
NtRp711
(dp712
g65
(dp713
g73
I4
ssg74
g707
sg67
(lp714
S'set([])'
p715
asbasbasbag60
(g76
g62
NtRp716
(dp717
g65
(dp718
sg74
g599
sg67
(lp719
g60
(g81
g62
NtRp720
(dp721
g65
(dp722
g85
g86
ssg74
g716
sg67
(lp723
S'debugging'
p724
asbag60
(g81
g62
NtRp725
(dp726
g65
(dp727
g92
g93
ssg74
g716
sg67
(lp728
S':'
asbag60
(g81
g62
NtRp729
(dp730
g65
(dp731
sg74
g716
sg67
(lp732
g60
(g61
g62
NtRp733
(dp734
g65
(dp735
g73
I4
ssg74
g729
sg67
(lp736
g103
asbasbasbag60
(g76
g62
NtRp737
(dp738
g65
(dp739
sg74
g599
sg67
(lp740
g60
(g81
g62
NtRp741
(dp742
g65
(dp743
g85
g86
ssg74
g737
sg67
(lp744
S'gluon_parent'
p745
asbag60
(g81
g62
NtRp746
(dp747
g65
(dp748
g92
g93
ssg74
g737
sg67
(lp749
S':'
asbag60
(g81
g62
NtRp750
(dp751
g65
(dp752
sg74
g737
sg67
(lp753
g60
(g61
g62
NtRp754
(dp755
g65
(dp756
g73
I4
ssg74
g750
sg67
(lp757
S'/Users/udimilo/Documents/web2py'
p758
asbasbasbag60
(g76
g62
NtRp759
(dp760
g65
(dp761
sg74
g599
sg67
(lp762
g60
(g81
g62
NtRp763
(dp764
g65
(dp765
g85
g86
ssg74
g759
sg67
(lp766
S'http_accept'
p767
asbag60
(g81
g62
NtRp768
(dp769
g65
(dp770
g92
g93
ssg74
g759
sg67
(lp771
S':'
asbag60
(g81
g62
NtRp772
(dp773
g65
(dp774
sg74
g759
sg67
(lp775
g60
(g61
g62
NtRp776
(dp777
g65
(dp778
g73
I4
ssg74
g772
sg67
(lp779
S'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
p780
asbasbasbag60
(g76
g62
NtRp781
(dp782
g65
(dp783
sg74
g599
sg67
(lp784
g60
(g81
g62
NtRp785
(dp786
g65
(dp787
g85
g86
ssg74
g781
sg67
(lp788
S'http_accept_charset'
p789
asbag60
(g81
g62
NtRp790
(dp791
g65
(dp792
g92
g93
ssg74
g781
sg67
(lp793
S':'
asbag60
(g81
g62
NtRp794
(dp795
g65
(dp796
sg74
g781
sg67
(lp797
g60
(g61
g62
NtRp798
(dp799
g65
(dp800
g73
I4
ssg74
g794
sg67
(lp801
S'ISO-8859-1,utf-8;q=0.7,*;q=0.3'
p802
asbasbasbag60
(g76
g62
NtRp803
(dp804
g65
(dp805
sg74
g599
sg67
(lp806
g60
(g81
g62
NtRp807
(dp808
g65
(dp809
g85
g86
ssg74
g803
sg67
(lp810
S'http_accept_encoding'
p811
asbag60
(g81
g62
NtRp812
(dp813
g65
(dp814
g92
g93
ssg74
g803
sg67
(lp815
S':'
asbag60
(g81
g62
NtRp816
(dp817
g65
(dp818
sg74
g803
sg67
(lp819
g60
(g61
g62
NtRp820
(dp821
g65
(dp822
g73
I4
ssg74
g816
sg67
(lp823
S'gzip,deflate,sdch'
p824
asbasbasbag60
(g76
g62
NtRp825
(dp826
g65
(dp827
sg74
g599
sg67
(lp828
g60
(g81
g62
NtRp829
(dp830
g65
(dp831
g85
g86
ssg74
g825
sg67
(lp832
S'http_accept_language'
p833
asbag60
(g81
g62
NtRp834
(dp835
g65
(dp836
g92
g93
ssg74
g825
sg67
(lp837
S':'
asbag60
(g81
g62
NtRp838
(dp839
g65
(dp840
sg74
g825
sg67
(lp841
g60
(g61
g62
NtRp842
(dp843
g65
(dp844
g73
I4
ssg74
g838
sg67
(lp845
S'en-US,en;q=0.8'
p846
asbasbasbag60
(g76
g62
NtRp847
(dp848
g65
(dp849
sg74
g599
sg67
(lp850
g60
(g81
g62
NtRp851
(dp852
g65
(dp853
g85
g86
ssg74
g847
sg67
(lp854
S'http_connection'
p855
asbag60
(g81
g62
NtRp856
(dp857
g65
(dp858
g92
g93
ssg74
g847
sg67
(lp859
S':'
asbag60
(g81
g62
NtRp860
(dp861
g65
(dp862
sg74
g847
sg67
(lp863
g60
(g61
g62
NtRp864
(dp865
g65
(dp866
g73
I4
ssg74
g860
sg67
(lp867
S'keep-alive'
p868
asbasbasbag60
(g76
g62
NtRp869
(dp870
g65
(dp871
sg74
g599
sg67
(lp872
g60
(g81
g62
NtRp873
(dp874
g65
(dp875
g85
g86
ssg74
g869
sg67
(lp876
S'http_cookie'
p877
asbag60
(g81
g62
NtRp878
(dp879
g65
(dp880
g92
g93
ssg74
g869
sg67
(lp881
S':'
asbag60
(g81
g62
NtRp882
(dp883
g65
(dp884
sg74
g869
sg67
(lp885
g60
(g61
g62
NtRp886
(dp887
g65
(dp888
g73
I4
ssg74
g882
sg67
(lp889
S'session_id_admin=127.0.0.1-52792a20-d856-4035-8d0f-026eefd87da3; session_id_udi0312=127.0.0.1-fcd6a577-d448-4882-b7bc-f353da84ba3b'
p890
asbasbasbag60
(g76
g62
NtRp891
(dp892
g65
(dp893
sg74
g599
sg67
(lp894
g60
(g81
g62
NtRp895
(dp896
g65
(dp897
g85
g86
ssg74
g891
sg67
(lp898
S'http_host'
p899
asbag60
(g81
g62
NtRp900
(dp901
g65
(dp902
g92
g93
ssg74
g891
sg67
(lp903
S':'
asbag60
(g81
g62
NtRp904
(dp905
g65
(dp906
sg74
g891
sg67
(lp907
g60
(g61
g62
NtRp908
(dp909
g65
(dp910
g73
I4
ssg74
g904
sg67
(lp911
S'127.0.0.1:8000'
p912
asbasbasbag60
(g76
g62
NtRp913
(dp914
g65
(dp915
sg74
g599
sg67
(lp916
g60
(g81
g62
NtRp917
(dp918
g65
(dp919
g85
g86
ssg74
g913
sg67
(lp920
S'http_referer'
p921
asbag60
(g81
g62
NtRp922
(dp923
g65
(dp924
g92
g93
ssg74
g913
sg67
(lp925
S':'
asbag60
(g81
g62
NtRp926
(dp927
g65
(dp928
sg74
g913
sg67
(lp929
g60
(g61
g62
NtRp930
(dp931
g65
(dp932
g73
I4
ssg74
g926
sg67
(lp933
S'http://127.0.0.1:8000/admin/default/site'
p934
asbasbasbag60
(g76
g62
NtRp935
(dp936
g65
(dp937
sg74
g599
sg67
(lp938
g60
(g81
g62
NtRp939
(dp940
g65
(dp941
g85
g86
ssg74
g935
sg67
(lp942
S'http_user_agent'
p943
asbag60
(g81
g62
NtRp944
(dp945
g65
(dp946
g92
g93
ssg74
g935
sg67
(lp947
S':'
asbag60
(g81
g62
NtRp948
(dp949
g65
(dp950
sg74
g935
sg67
(lp951
g60
(g61
g62
NtRp952
(dp953
g65
(dp954
g73
I4
ssg74
g948
sg67
(lp955
S'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.79 Safari/535.11'
p956
asbasbasbag60
(g76
g62
NtRp957
(dp958
g65
(dp959
sg74
g599
sg67
(lp960
g60
(g81
g62
NtRp961
(dp962
g65
(dp963
g85
g86
ssg74
g957
sg67
(lp964
S'is_jython'
p965
asbag60
(g81
g62
NtRp966
(dp967
g65
(dp968
g92
g93
ssg74
g957
sg67
(lp969
S':'
asbag60
(g81
g62
NtRp970
(dp971
g65
(dp972
sg74
g957
sg67
(lp973
g60
(g61
g62
NtRp974
(dp975
g65
(dp976
g73
I4
ssg74
g970
sg67
(lp977
g103
asbasbasbag60
(g76
g62
NtRp978
(dp979
g65
(dp980
sg74
g599
sg67
(lp981
g60
(g81
g62
NtRp982
(dp983
g65
(dp984
g85
g86
ssg74
g978
sg67
(lp985
S'is_pypy'
p986
asbag60
(g81
g62
NtRp987
(dp988
g65
(dp989
g92
g93
ssg74
g978
sg67
(lp990
S':'
asbag60
(g81
g62
NtRp991
(dp992
g65
(dp993
sg74
g978
sg67
(lp994
g60
(g61
g62
NtRp995
(dp996
g65
(dp997
g73
I4
ssg74
g991
sg67
(lp998
g103
asbasbasbag60
(g76
g62
NtRp999
(dp1000
g65
(dp1001
sg74
g599
sg67
(lp1002
g60
(g81
g62
NtRp1003
(dp1004
g65
(dp1005
g85
g86
ssg74
g999
sg67
(lp1006
S'path_info'
p1007
asbag60
(g81
g62
NtRp1008
(dp1009
g65
(dp1010
g92
g93
ssg74
g999
sg67
(lp1011
S':'
asbag60
(g81
g62
NtRp1012
(dp1013
g65
(dp1014
sg74
g999
sg67
(lp1015
g60
(g61
g62
NtRp1016
(dp1017
g65
(dp1018
g73
I4
ssg74
g1012
sg67
(lp1019
S'/admin/default/reload_routes'
p1020
asbasbasbag60
(g76
g62
NtRp1021
(dp1022
g65
(dp1023
sg74
g599
sg67
(lp1024
g60
(g81
g62
NtRp1025
(dp1026
g65
(dp1027
g85
g86
ssg74
g1021
sg67
(lp1028
S'query_string'
p1029
asbag60
(g81
g62
NtRp1030
(dp1031
g65
(dp1032
g92
g93
ssg74
g1021
sg67
(lp1033
S':'
asbag60
(g81
g62
NtRp1034
(dp1035
g65
(dp1036
sg74
g1021
sg67
(lp1037
g60
(g61
g62
NtRp1038
(dp1039
g65
(dp1040
g73
I4
ssg74
g1034
sg67
(lp1041
S''
asbasbasbag60
(g76
g62
NtRp1042
(dp1043
g65
(dp1044
sg74
g599
sg67
(lp1045
g60
(g81
g62
NtRp1046
(dp1047
g65
(dp1048
g85
g86
ssg74
g1042
sg67
(lp1049
S'remote_addr'
p1050
asbag60
(g81
g62
NtRp1051
(dp1052
g65
(dp1053
g92
g93
ssg74
g1042
sg67
(lp1054
S':'
asbag60
(g81
g62
NtRp1055
(dp1056
g65
(dp1057
sg74
g1042
sg67
(lp1058
g60
(g61
g62
NtRp1059
(dp1060
g65
(dp1061
g73
I4
ssg74
g1055
sg67
(lp1062
g193
asbasbasbag60
(g76
g62
NtRp1063
(dp1064
g65
(dp1065
sg74
g599
sg67
(lp1066
g60
(g81
g62
NtRp1067
(dp1068
g65
(dp1069
g85
g86
ssg74
g1063
sg67
(lp1070
S'remote_port'
p1071
asbag60
(g81
g62
NtRp1072
(dp1073
g65
(dp1074
g92
g93
ssg74
g1063
sg67
(lp1075
S':'
asbag60
(g81
g62
NtRp1076
(dp1077
g65
(dp1078
sg74
g1063
sg67
(lp1079
g60
(g61
g62
NtRp1080
(dp1081
g65
(dp1082
g73
I4
ssg74
g1076
sg67
(lp1083
S'49595'
p1084
asbasbasbag60
(g76
g62
NtRp1085
(dp1086
g65
(dp1087
sg74
g599
sg67
(lp1088
g60
(g81
g62
NtRp1089
(dp1090
g65
(dp1091
g85
g86
ssg74
g1085
sg67
(lp1092
S'request_method'
p1093
asbag60
(g81
g62
NtRp1094
(dp1095
g65
(dp1096
g92
g93
ssg74
g1085
sg67
(lp1097
S':'
asbag60
(g81
g62
NtRp1098
(dp1099
g65
(dp1100
sg74
g1085
sg67
(lp1101
g60
(g61
g62
NtRp1102
(dp1103
g65
(dp1104
g73
I4
ssg74
g1098
sg67
(lp1105
S'GET'
p1106
asbasbasbag60
(g76
g62
NtRp1107
(dp1108
g65
(dp1109
sg74
g599
sg67
(lp1110
g60
(g81
g62
NtRp1111
(dp1112
g65
(dp1113
g85
g86
ssg74
g1107
sg67
(lp1114
S'request_uri'
p1115
asbag60
(g81
g62
NtRp1116
(dp1117
g65
(dp1118
g92
g93
ssg74
g1107
sg67
(lp1119
S':'
asbag60
(g81
g62
NtRp1120
(dp1121
g65
(dp1122
sg74
g1107
sg67
(lp1123
g60
(g61
g62
NtRp1124
(dp1125
g65
(dp1126
g73
I4
ssg74
g1120
sg67
(lp1127
g1020
asbasbasbag60
(g76
g62
NtRp1128
(dp1129
g65
(dp1130
sg74
g599
sg67
(lp1131
g60
(g81
g62
NtRp1132
(dp1133
g65
(dp1134
g85
g86
ssg74
g1128
sg67
(lp1135
S'script_name'
p1136
asbag60
(g81
g62
NtRp1137
(dp1138
g65
(dp1139
g92
g93
ssg74
g1128
sg67
(lp1140
S':'
asbag60
(g81
g62
NtRp1141
(dp1142
g65
(dp1143
sg74
g1128
sg67
(lp1144
g60
(g61
g62
NtRp1145
(dp1146
g65
(dp1147
g73
I4
ssg74
g1141
sg67
(lp1148
S''
asbasbasbag60
(g76
g62
NtRp1149
(dp1150
g65
(dp1151
sg74
g599
sg67
(lp1152
g60
(g81
g62
NtRp1153
(dp1154
g65
(dp1155
g85
g86
ssg74
g1149
sg67
(lp1156
S'server_name'
p1157
asbag60
(g81
g62
NtRp1158
(dp1159
g65
(dp1160
g92
g93
ssg74
g1149
sg67
(lp1161
S':'
asbag60
(g81
g62
NtRp1162
(dp1163
g65
(dp1164
sg74
g1149
sg67
(lp1165
g60
(g61
g62
NtRp1166
(dp1167
g65
(dp1168
g73
I4
ssg74
g1162
sg67
(lp1169
S'Udi-Milos-MacBook-Pro.local'
p1170
asbasbasbag60
(g76
g62
NtRp1171
(dp1172
g65
(dp1173
sg74
g599
sg67
(lp1174
g60
(g81
g62
NtRp1175
(dp1176
g65
(dp1177
g85
g86
ssg74
g1171
sg67
(lp1178
S'server_port'
p1179
asbag60
(g81
g62
NtRp1180
(dp1181
g65
(dp1182
g92
g93
ssg74
g1171
sg67
(lp1183
S':'
asbag60
(g81
g62
NtRp1184
(dp1185
g65
(dp1186
sg74
g1171
sg67
(lp1187
g60
(g61
g62
NtRp1188
(dp1189
g65
(dp1190
g73
I4
ssg74
g1184
sg67
(lp1191
S'8000'
p1192
asbasbasbag60
(g76
g62
NtRp1193
(dp1194
g65
(dp1195
sg74
g599
sg67
(lp1196
g60
(g81
g62
NtRp1197
(dp1198
g65
(dp1199
g85
g86
ssg74
g1193
sg67
(lp1200
S'server_protocol'
p1201
asbag60
(g81
g62
NtRp1202
(dp1203
g65
(dp1204
g92
g93
ssg74
g1193
sg67
(lp1205
S':'
asbag60
(g81
g62
NtRp1206
(dp1207
g65
(dp1208
sg74
g1193
sg67
(lp1209
g60
(g61
g62
NtRp1210
(dp1211
g65
(dp1212
g73
I4
ssg74
g1206
sg67
(lp1213
S'HTTP/1.1'
p1214
asbasbasbag60
(g76
g62
NtRp1215
(dp1216
g65
(dp1217
sg74
g599
sg67
(lp1218
g60
(g81
g62
NtRp1219
(dp1220
g65
(dp1221
g85
g86
ssg74
g1215
sg67
(lp1222
S'server_software'
p1223
asbag60
(g81
g62
NtRp1224
(dp1225
g65
(dp1226
g92
g93
ssg74
g1215
sg67
(lp1227
S':'
asbag60
(g81
g62
NtRp1228
(dp1229
g65
(dp1230
sg74
g1215
sg67
(lp1231
g60
(g61
g62
NtRp1232
(dp1233
g65
(dp1234
g73
I4
ssg74
g1228
sg67
(lp1235
S'Rocket 1.2.4'
p1236
asbasbasbag60
(g76
g62
NtRp1237
(dp1238
g65
(dp1239
sg74
g599
sg67
(lp1240
g60
(g81
g62
NtRp1241
(dp1242
g65
(dp1243
g85
g86
ssg74
g1237
sg67
(lp1244
S'web2py_crontype'
p1245
asbag60
(g81
g62
NtRp1246
(dp1247
g65
(dp1248
g92
g93
ssg74
g1237
sg67
(lp1249
S':'
asbag60
(g81
g62
NtRp1250
(dp1251
g65
(dp1252
sg74
g1237
sg67
(lp1253
g60
(g61
g62
NtRp1254
(dp1255
g65
(dp1256
g73
I4
ssg74
g1250
sg67
(lp1257
S'hard'
p1258
asbasbasbag60
(g76
g62
NtRp1259
(dp1260
g65
(dp1261
sg74
g599
sg67
(lp1262
g60
(g81
g62
NtRp1263
(dp1264
g65
(dp1265
g85
g86
ssg74
g1259
sg67
(lp1266
S'web2py_original_uri'
p1267
asbag60
(g81
g62
NtRp1268
(dp1269
g65
(dp1270
g92
g93
ssg74
g1259
sg67
(lp1271
S':'
asbag60
(g81
g62
NtRp1272
(dp1273
g65
(dp1274
sg74
g1259
sg67
(lp1275
g60
(g61
g62
NtRp1276
(dp1277
g65
(dp1278
g73
I4
ssg74
g1272
sg67
(lp1279
S'/admin/default/reload_routes'
p1280
asbasbasbag60
(g76
g62
NtRp1281
(dp1282
g65
(dp1283
sg74
g599
sg67
(lp1284
g60
(g81
g62
NtRp1285
(dp1286
g65
(dp1287
g85
g86
ssg74
g1281
sg67
(lp1288
S'web2py_path'
p1289
asbag60
(g81
g62
NtRp1290
(dp1291
g65
(dp1292
g92
g93
ssg74
g1281
sg67
(lp1293
S':'
asbag60
(g81
g62
NtRp1294
(dp1295
g65
(dp1296
sg74
g1281
sg67
(lp1297
g60
(g61
g62
NtRp1298
(dp1299
g65
(dp1300
g73
I4
ssg74
g1294
sg67
(lp1301
g646
asbasbasbag60
(g76
g62
NtRp1302
(dp1303
g65
(dp1304
sg74
g599
sg67
(lp1305
g60
(g81
g62
NtRp1306
(dp1307
g65
(dp1308
g85
g86
ssg74
g1302
sg67
(lp1309
S'web2py_version'
p1310
asbag60
(g81
g62
NtRp1311
(dp1312
g65
(dp1313
g92
g93
ssg74
g1302
sg67
(lp1314
S':'
asbag60
(g81
g62
NtRp1315
(dp1316
g65
(dp1317
sg74
g1302
sg67
(lp1318
g60
(g61
g62
NtRp1319
(dp1320
g65
(dp1321
g73
I4
ssg74
g1315
sg67
(lp1322
g60
(g69
g62
NtRp1323
(dp1324
g65
(dp1325
g73
I3
ssg74
Nsg67
(lp1326
g60
(g76
g62
NtRp1327
(dp1328
g65
(dp1329
sg74
g1323
sg67
(lp1330
g60
(g81
g62
NtRp1331
(dp1332
g65
(dp1333
sg74
g1327
sg67
(lp1334
g60
(g61
g62
NtRp1335
(dp1336
g65
(dp1337
g73
I3
ssg74
g1331
sg67
(lp1338
S'1'
asbasbasbag60
(g76
g62
NtRp1339
(dp1340
g65
(dp1341
sg74
g1323
sg67
(lp1342
g60
(g81
g62
NtRp1343
(dp1344
g65
(dp1345
sg74
g1339
sg67
(lp1346
g60
(g61
g62
NtRp1347
(dp1348
g65
(dp1349
g73
I3
ssg74
g1343
sg67
(lp1350
S'99'
p1351
asbasbasbag60
(g76
g62
NtRp1352
(dp1353
g65
(dp1354
sg74
g1323
sg67
(lp1355
g60
(g81
g62
NtRp1356
(dp1357
g65
(dp1358
sg74
g1352
sg67
(lp1359
g60
(g61
g62
NtRp1360
(dp1361
g65
(dp1362
g73
I3
ssg74
g1356
sg67
(lp1363
S'7'
asbasbasbag60
(g76
g62
NtRp1364
(dp1365
g65
(dp1366
sg74
g1323
sg67
(lp1367
g60
(g81
g62
NtRp1368
(dp1369
g65
(dp1370
sg74
g1364
sg67
(lp1371
g60
(g61
g62
NtRp1372
(dp1373
g65
(dp1374
g73
I3
ssg74
g1368
sg67
(lp1375
S'datetime.datetime(2012, 3, 4, 22, 12, 8)'
p1376
asbasbasbag60
(g76
g62
NtRp1377
(dp1378
g65
(dp1379
sg74
g1323
sg67
(lp1380
g60
(g81
g62
NtRp1381
(dp1382
g65
(dp1383
sg74
g1377
sg67
(lp1384
g60
(g61
g62
NtRp1385
(dp1386
g65
(dp1387
g73
I3
ssg74
g1381
sg67
(lp1388
S'stable'
p1389
asbasbasbasbasbasbasbag60
(g76
g62
NtRp1390
(dp1391
g65
(dp1392
sg74
g599
sg67
(lp1393
g60
(g81
g62
NtRp1394
(dp1395
g65
(dp1396
g85
g86
ssg74
g1390
sg67
(lp1397
S'wsgi_errors'
p1398
asbag60
(g81
g62
NtRp1399
(dp1400
g65
(dp1401
g92
g93
ssg74
g1390
sg67
(lp1402
S':'
asbag60
(g81
g62
NtRp1403
(dp1404
g65
(dp1405
sg74
g1390
sg67
(lp1406
g60
(g61
g62
NtRp1407
(dp1408
g65
(dp1409
g73
I4
ssg74
g1403
sg67
(lp1410
S"<open file '<stderr>', mode 'w' at 0x4220b0>"
p1411
asbasbasbag60
(g76
g62
NtRp1412
(dp1413
g65
(dp1414
sg74
g599
sg67
(lp1415
g60
(g81
g62
NtRp1416
(dp1417
g65
(dp1418
g85
g86
ssg74
g1412
sg67
(lp1419
S'wsgi_file_wrapper'
p1420
asbag60
(g81
g62
NtRp1421
(dp1422
g65
(dp1423
g92
g93
ssg74
g1412
sg67
(lp1424
S':'
asbag60
(g81
g62
NtRp1425
(dp1426
g65
(dp1427
sg74
g1412
sg67
(lp1428
g60
(g61
g62
NtRp1429
(dp1430
g65
(dp1431
g73
I4
ssg74
g1425
sg67
(lp1432
S'<class wsgiref.util.FileWrapper at 0x225e6c0>'
p1433
asbasbasbag60
(g76
g62
NtRp1434
(dp1435
g65
(dp1436
sg74
g599
sg67
(lp1437
g60
(g81
g62
NtRp1438
(dp1439
g65
(dp1440
g85
g86
ssg74
g1434
sg67
(lp1441
S'wsgi_input'
p1442
asbag60
(g81
g62
NtRp1443
(dp1444
g65
(dp1445
g92
g93
ssg74
g1434
sg67
(lp1446
S':'
asbag60
(g81
g62
NtRp1447
(dp1448
g65
(dp1449
sg74
g1434
sg67
(lp1450
g60
(g61
g62
NtRp1451
(dp1452
g65
(dp1453
g73
I4
ssg74
g1447
sg67
(lp1454
S'<socket._fileobject object at 0xa131db0>'
p1455
asbasbasbag60
(g76
g62
NtRp1456
(dp1457
g65
(dp1458
sg74
g599
sg67
(lp1459
g60
(g81
g62
NtRp1460
(dp1461
g65
(dp1462
g85
g86
ssg74
g1456
sg67
(lp1463
S'wsgi_multiprocess'
p1464
asbag60
(g81
g62
NtRp1465
(dp1466
g65
(dp1467
g92
g93
ssg74
g1456
sg67
(lp1468
S':'
asbag60
(g81
g62
NtRp1469
(dp1470
g65
(dp1471
sg74
g1456
sg67
(lp1472
g60
(g61
g62
NtRp1473
(dp1474
g65
(dp1475
g73
I4
ssg74
g1469
sg67
(lp1476
g103
asbasbasbag60
(g76
g62
NtRp1477
(dp1478
g65
(dp1479
sg74
g599
sg67
(lp1480
g60
(g81
g62
NtRp1481
(dp1482
g65
(dp1483
g85
g86
ssg74
g1477
sg67
(lp1484
S'wsgi_multithread'
p1485
asbag60
(g81
g62
NtRp1486
(dp1487
g65
(dp1488
g92
g93
ssg74
g1477
sg67
(lp1489
S':'
asbag60
(g81
g62
NtRp1490
(dp1491
g65
(dp1492
sg74
g1477
sg67
(lp1493
g60
(g61
g62
NtRp1494
(dp1495
g65
(dp1496
g73
I4
ssg74
g1490
sg67
(lp1497
S'True'
p1498
asbasbasbag60
(g76
g62
NtRp1499
(dp1500
g65
(dp1501
sg74
g599
sg67
(lp1502
g60
(g81
g62
NtRp1503
(dp1504
g65
(dp1505
g85
g86
ssg74
g1499
sg67
(lp1506
S'wsgi_run_once'
p1507
asbag60
(g81
g62
NtRp1508
(dp1509
g65
(dp1510
g92
g93
ssg74
g1499
sg67
(lp1511
S':'
asbag60
(g81
g62
NtRp1512
(dp1513
g65
(dp1514
sg74
g1499
sg67
(lp1515
g60
(g61
g62
NtRp1516
(dp1517
g65
(dp1518
g73
I4
ssg74
g1512
sg67
(lp1519
g103
asbasbasbag60
(g76
g62
NtRp1520
(dp1521
g65
(dp1522
sg74
g599
sg67
(lp1523
g60
(g81
g62
NtRp1524
(dp1525
g65
(dp1526
g85
g86
ssg74
g1520
sg67
(lp1527
S'wsgi_url_scheme'
p1528
asbag60
(g81
g62
NtRp1529
(dp1530
g65
(dp1531
g92
g93
ssg74
g1520
sg67
(lp1532
S':'
asbag60
(g81
g62
NtRp1533
(dp1534
g65
(dp1535
sg74
g1520
sg67
(lp1536
g60
(g61
g62
NtRp1537
(dp1538
g65
(dp1539
g73
I4
ssg74
g1533
sg67
(lp1540
S'http'
p1541
asbasbasbag60
(g76
g62
NtRp1542
(dp1543
g65
(dp1544
sg74
g599
sg67
(lp1545
g60
(g81
g62
NtRp1546
(dp1547
g65
(dp1548
g85
g86
ssg74
g1542
sg67
(lp1549
S'wsgi_version'
p1550
asbag60
(g81
g62
NtRp1551
(dp1552
g65
(dp1553
g92
g93
ssg74
g1542
sg67
(lp1554
S':'
asbag60
(g81
g62
NtRp1555
(dp1556
g65
(dp1557
sg74
g1542
sg67
(lp1558
g60
(g61
g62
NtRp1559
(dp1560
g65
(dp1561
g73
I4
ssg74
g1555
sg67
(lp1562
g60
(g69
g62
NtRp1563
(dp1564
g65
(dp1565
g73
I3
ssg74
Nsg67
(lp1566
g60
(g76
g62
NtRp1567
(dp1568
g65
(dp1569
sg74
g1563
sg67
(lp1570
g60
(g81
g62
NtRp1571
(dp1572
g65
(dp1573
sg74
g1567
sg67
(lp1574
g60
(g61
g62
NtRp1575
(dp1576
g65
(dp1577
g73
I3
ssg74
g1571
sg67
(lp1578
S'1'
asbasbasbag60
(g76
g62
NtRp1579
(dp1580
g65
(dp1581
sg74
g1563
sg67
(lp1582
g60
(g81
g62
NtRp1583
(dp1584
g65
(dp1585
sg74
g1579
sg67
(lp1586
g60
(g61
g62
NtRp1587
(dp1588
g65
(dp1589
g73
I3
ssg74
g1583
sg67
(lp1590
S'0'
asbasbasbasbasbasbasbasbasbasbasbag60
(g76
g62
NtRp1591
(dp1592
g65
(dp1593
sg74
g70
sg67
(lp1594
g60
(g81
g62
NtRp1595
(dp1596
g65
(dp1597
g85
g86
ssg74
g1591
sg67
(lp1598
S'extension'
p1599
asbag60
(g81
g62
NtRp1600
(dp1601
g65
(dp1602
g92
g93
ssg74
g1591
sg67
(lp1603
S':'
asbag60
(g81
g62
NtRp1604
(dp1605
g65
(dp1606
sg74
g1591
sg67
(lp1607
g60
(g61
g62
NtRp1608
(dp1609
g65
(dp1610
g73
I5
ssg74
g1604
sg67
(lp1611
S'html'
p1612
asbasbasbag60
(g76
g62
NtRp1613
(dp1614
g65
(dp1615
sg74
g70
sg67
(lp1616
g60
(g81
g62
NtRp1617
(dp1618
g65
(dp1619
g85
g86
ssg74
g1613
sg67
(lp1620
S'folder'
p1621
asbag60
(g81
g62
NtRp1622
(dp1623
g65
(dp1624
g92
g93
ssg74
g1613
sg67
(lp1625
S':'
asbag60
(g81
g62
NtRp1626
(dp1627
g65
(dp1628
sg74
g1613
sg67
(lp1629
g60
(g61
g62
NtRp1630
(dp1631
g65
(dp1632
g73
I5
ssg74
g1626
sg67
(lp1633
S'/Users/udimilo/Documents/web2py/applications/admin/'
p1634
asbasbasbag60
(g76
g62
NtRp1635
(dp1636
g65
(dp1637
sg74
g70
sg67
(lp1638
g60
(g81
g62
NtRp1639
(dp1640
g65
(dp1641
g85
g86
ssg74
g1635
sg67
(lp1642
S'function'
p1643
asbag60
(g81
g62
NtRp1644
(dp1645
g65
(dp1646
g92
g93
ssg74
g1635
sg67
(lp1647
S':'
asbag60
(g81
g62
NtRp1648
(dp1649
g65
(dp1650
sg74
g1635
sg67
(lp1651
g60
(g61
g62
NtRp1652
(dp1653
g65
(dp1654
g73
I5
ssg74
g1648
sg67
(lp1655
S'reload_routes'
p1656
asbasbasbag60
(g76
g62
NtRp1657
(dp1658
g65
(dp1659
sg74
g70
sg67
(lp1660
g60
(g81
g62
NtRp1661
(dp1662
g65
(dp1663
g85
g86
ssg74
g1657
sg67
(lp1664
S'get_vars'
p1665
asbag60
(g81
g62
NtRp1666
(dp1667
g65
(dp1668
g92
g93
ssg74
g1657
sg67
(lp1669
S':'
asbag60
(g81
g62
NtRp1670
(dp1671
g65
(dp1672
sg74
g1657
sg67
(lp1673
g60
(g61
g62
NtRp1674
(dp1675
g65
(dp1676
g73
I5
ssg74
g1670
sg67
(lp1677
g60
(g69
g62
NtRp1678
(dp1679
g65
(dp1680
g73
I4
ssg74
Nsg67
(lp1681
sbasbasbasbag60
(g76
g62
NtRp1682
(dp1683
g65
(dp1684
sg74
g70
sg67
(lp1685
g60
(g81
g62
NtRp1686
(dp1687
g65
(dp1688
g85
g86
ssg74
g1682
sg67
(lp1689
S'global_settings'
p1690
asbag60
(g81
g62
NtRp1691
(dp1692
g65
(dp1693
g92
g93
ssg74
g1682
sg67
(lp1694
S':'
asbag60
(g81
g62
NtRp1695
(dp1696
g65
(dp1697
sg74
g1682
sg67
(lp1698
g60
(g61
g62
NtRp1699
(dp1700
g65
(dp1701
g73
I5
ssg74
g1695
sg67
(lp1702
g60
(g69
g62
NtRp1703
(dp1704
g65
(dp1705
g73
I4
ssg74
Nsg67
(lp1706
g60
(g76
g62
NtRp1707
(dp1708
g65
(dp1709
sg74
g1703
sg67
(lp1710
g60
(g81
g62
NtRp1711
(dp1712
g65
(dp1713
g85
g86
ssg74
g1707
sg67
(lp1714
g611
asbag60
(g81
g62
NtRp1715
(dp1716
g65
(dp1717
g92
g93
ssg74
g1707
sg67
(lp1718
S':'
asbag60
(g81
g62
NtRp1719
(dp1720
g65
(dp1721
sg74
g1707
sg67
(lp1722
g60
(g61
g62
NtRp1723
(dp1724
g65
(dp1725
g73
I4
ssg74
g1719
sg67
(lp1726
S"set(['/Users/udimilo/Documents/web2py/applications/udi0312/', '/Users/udimilo/Documents/web2py/applications/admin/'])"
p1727
asbasbasbag60
(g76
g62
NtRp1728
(dp1729
g65
(dp1730
sg74
g1703
sg67
(lp1731
g60
(g81
g62
NtRp1732
(dp1733
g65
(dp1734
g85
g86
ssg74
g1728
sg67
(lp1735
g633
asbag60
(g81
g62
NtRp1736
(dp1737
g65
(dp1738
g92
g93
ssg74
g1728
sg67
(lp1739
S':'
asbag60
(g81
g62
NtRp1740
(dp1741
g65
(dp1742
sg74
g1728
sg67
(lp1743
g60
(g61
g62
NtRp1744
(dp1745
g65
(dp1746
g73
I4
ssg74
g1740
sg67
(lp1747
g646
asbasbasbag60
(g76
g62
NtRp1748
(dp1749
g65
(dp1750
sg74
g1703
sg67
(lp1751
g60
(g81
g62
NtRp1752
(dp1753
g65
(dp1754
g85
g86
ssg74
g1748
sg67
(lp1755
g655
asbag60
(g81
g62
NtRp1756
(dp1757
g65
(dp1758
g92
g93
ssg74
g1748
sg67
(lp1759
S':'
asbag60
(g81
g62
NtRp1760
(dp1761
g65
(dp1762
sg74
g1748
sg67
(lp1763
g60
(g61
g62
NtRp1764
(dp1765
g65
(dp1766
g73
I4
ssg74
g1760
sg67
(lp1767
g60
(g69
g62
NtRp1768
(dp1769
g65
(dp1770
g73
I3
ssg74
Nsg67
(lp1771
sbasbasbasbag60
(g76
g62
NtRp1772
(dp1773
g65
(dp1774
sg74
g1703
sg67
(lp1775
g60
(g81
g62
NtRp1776
(dp1777
g65
(dp1778
g85
g86
ssg74
g1772
sg67
(lp1779
g680
asbag60
(g81
g62
NtRp1780
(dp1781
g65
(dp1782
g92
g93
ssg74
g1772
sg67
(lp1783
S':'
asbag60
(g81
g62
NtRp1784
(dp1785
g65
(dp1786
sg74
g1772
sg67
(lp1787
g60
(g61
g62
NtRp1788
(dp1789
g65
(dp1790
g73
I4
ssg74
g1784
sg67
(lp1791
S"<Values at 0x23196e8: {'verbose': False, 'ip': '127.0.0.1', 'shutdown_timeout': 5, 'taskbar': False, 'nocron': False, 'pid_filename': 'httpserver.pid', 'maxthreads': None, 'softcron': False, 'server_name': 'Udi-Milos-MacBook-Pro.local', 'bpython': False, 'nogui': False, 'port': 8000, 'extcron': False, 'debuglevel': 30, 'test': None, 'folder': '/Users/udimilo/Documents/web2py', 'config': '', 'import_models': False, 'winservice': '', 'shell': None, 'run': '', 'log_filename': 'httpserver.log', 'args': [''], 'socket_timeout': 5, 'ssl_ca_certificate': None, 'scheduler': None, 'profiler_filename': None, 'ssl_private_key': '', 'password': '<ask>', 'request_queue_size': 5, 'ssl_certificate': '', 'cronjob': False, 'numthreads': None, 'quiet': False, 'interfaces': None, 'minthreads': None, 'timeout': 10, 'plain': False, 'nobanner': False}>"
p1792
asbasbasbag60
(g76
g62
NtRp1793
(dp1794
g65
(dp1795
sg74
g1703
sg67
(lp1796
g60
(g81
g62
NtRp1797
(dp1798
g65
(dp1799
g85
g86
ssg74
g1793
sg67
(lp1800
g702
asbag60
(g81
g62
NtRp1801
(dp1802
g65
(dp1803
g92
g93
ssg74
g1793
sg67
(lp1804
S':'
asbag60
(g81
g62
NtRp1805
(dp1806
g65
(dp1807
sg74
g1793
sg67
(lp1808
g60
(g61
g62
NtRp1809
(dp1810
g65
(dp1811
g73
I4
ssg74
g1805
sg67
(lp1812
S'set([])'
p1813
asbasbasbag60
(g76
g62
NtRp1814
(dp1815
g65
(dp1816
sg74
g1703
sg67
(lp1817
g60
(g81
g62
NtRp1818
(dp1819
g65
(dp1820
g85
g86
ssg74
g1814
sg67
(lp1821
g724
asbag60
(g81
g62
NtRp1822
(dp1823
g65
(dp1824
g92
g93
ssg74
g1814
sg67
(lp1825
S':'
asbag60
(g81
g62
NtRp1826
(dp1827
g65
(dp1828
sg74
g1814
sg67
(lp1829
g60
(g61
g62
NtRp1830
(dp1831
g65
(dp1832
g73
I4
ssg74
g1826
sg67
(lp1833
g103
asbasbasbag60
(g76
g62
NtRp1834
(dp1835
g65
(dp1836
sg74
g1703
sg67
(lp1837
g60
(g81
g62
NtRp1838
(dp1839
g65
(dp1840
g85
g86
ssg74
g1834
sg67
(lp1841
g745
asbag60
(g81
g62
NtRp1842
(dp1843
g65
(dp1844
g92
g93
ssg74
g1834
sg67
(lp1845
S':'
asbag60
(g81
g62
NtRp1846
(dp1847
g65
(dp1848
sg74
g1834
sg67
(lp1849
g60
(g61
g62
NtRp1850
(dp1851
g65
(dp1852
g73
I4
ssg74
g1846
sg67
(lp1853
g758
asbasbasbag60
(g76
g62
NtRp1854
(dp1855
g65
(dp1856
sg74
g1703
sg67
(lp1857
g60
(g81
g62
NtRp1858
(dp1859
g65
(dp1860
g85
g86
ssg74
g1854
sg67
(lp1861
g965
asbag60
(g81
g62
NtRp1862
(dp1863
g65
(dp1864
g92
g93
ssg74
g1854
sg67
(lp1865
S':'
asbag60
(g81
g62
NtRp1866
(dp1867
g65
(dp1868
sg74
g1854
sg67
(lp1869
g60
(g61
g62
NtRp1870
(dp1871
g65
(dp1872
g73
I4
ssg74
g1866
sg67
(lp1873
g103
asbasbasbag60
(g76
g62
NtRp1874
(dp1875
g65
(dp1876
sg74
g1703
sg67
(lp1877
g60
(g81
g62
NtRp1878
(dp1879
g65
(dp1880
g85
g86
ssg74
g1874
sg67
(lp1881
g986
asbag60
(g81
g62
NtRp1882
(dp1883
g65
(dp1884
g92
g93
ssg74
g1874
sg67
(lp1885
S':'
asbag60
(g81
g62
NtRp1886
(dp1887
g65
(dp1888
sg74
g1874
sg67
(lp1889
g60
(g61
g62
NtRp1890
(dp1891
g65
(dp1892
g73
I4
ssg74
g1886
sg67
(lp1893
g103
asbasbasbag60
(g76
g62
NtRp1894
(dp1895
g65
(dp1896
sg74
g1703
sg67
(lp1897
g60
(g81
g62
NtRp1898
(dp1899
g65
(dp1900
g85
g86
ssg74
g1894
sg67
(lp1901
g1245
asbag60
(g81
g62
NtRp1902
(dp1903
g65
(dp1904
g92
g93
ssg74
g1894
sg67
(lp1905
S':'
asbag60
(g81
g62
NtRp1906
(dp1907
g65
(dp1908
sg74
g1894
sg67
(lp1909
g60
(g61
g62
NtRp1910
(dp1911
g65
(dp1912
g73
I4
ssg74
g1906
sg67
(lp1913
g1258
asbasbasbag60
(g76
g62
NtRp1914
(dp1915
g65
(dp1916
sg74
g1703
sg67
(lp1917
g60
(g81
g62
NtRp1918
(dp1919
g65
(dp1920
g85
g86
ssg74
g1914
sg67
(lp1921
g1310
asbag60
(g81
g62
NtRp1922
(dp1923
g65
(dp1924
g92
g93
ssg74
g1914
sg67
(lp1925
S':'
asbag60
(g81
g62
NtRp1926
(dp1927
g65
(dp1928
sg74
g1914
sg67
(lp1929
g60
(g61
g62
NtRp1930
(dp1931
g65
(dp1932
g73
I4
ssg74
g1926
sg67
(lp1933
g60
(g69
g62
NtRp1934
(dp1935
g65
(dp1936
g73
I3
ssg74
Nsg67
(lp1937
g60
(g76
g62
NtRp1938
(dp1939
g65
(dp1940
sg74
g1934
sg67
(lp1941
g60
(g81
g62
NtRp1942
(dp1943
g65
(dp1944
sg74
g1938
sg67
(lp1945
g60
(g61
g62
NtRp1946
(dp1947
g65
(dp1948
g73
I3
ssg74
g1942
sg67
(lp1949
S'1'
asbasbasbag60
(g76
g62
NtRp1950
(dp1951
g65
(dp1952
sg74
g1934
sg67
(lp1953
g60
(g81
g62
NtRp1954
(dp1955
g65
(dp1956
sg74
g1950
sg67
(lp1957
g60
(g61
g62
NtRp1958
(dp1959
g65
(dp1960
g73
I3
ssg74
g1954
sg67
(lp1961
S'99'
p1962
asbasbasbag60
(g76
g62
NtRp1963
(dp1964
g65
(dp1965
sg74
g1934
sg67
(lp1966
g60
(g81
g62
NtRp1967
(dp1968
g65
(dp1969
sg74
g1963
sg67
(lp1970
g60
(g61
g62
NtRp1971
(dp1972
g65
(dp1973
g73
I3
ssg74
g1967
sg67
(lp1974
S'7'
asbasbasbag60
(g76
g62
NtRp1975
(dp1976
g65
(dp1977
sg74
g1934
sg67
(lp1978
g60
(g81
g62
NtRp1979
(dp1980
g65
(dp1981
sg74
g1975
sg67
(lp1982
g60
(g61
g62
NtRp1983
(dp1984
g65
(dp1985
g73
I3
ssg74
g1979
sg67
(lp1986
S'datetime.datetime(2012, 3, 4, 22, 12, 8)'
p1987
asbasbasbag60
(g76
g62
NtRp1988
(dp1989
g65
(dp1990
sg74
g1934
sg67
(lp1991
g60
(g81
g62
NtRp1992
(dp1993
g65
(dp1994
sg74
g1988
sg67
(lp1995
g60
(g61
g62
NtRp1996
(dp1997
g65
(dp1998
g73
I3
ssg74
g1992
sg67
(lp1999
g1389
asbasbasbasbasbasbasbasbasbasbasbag60
(g76
g62
NtRp2000
(dp2001
g65
(dp2002
sg74
g70
sg67
(lp2003
g60
(g81
g62
NtRp2004
(dp2005
g65
(dp2006
g85
g86
ssg74
g2000
sg67
(lp2007
S'is_https'
p2008
asbag60
(g81
g62
NtRp2009
(dp2010
g65
(dp2011
g92
g93
ssg74
g2000
sg67
(lp2012
S':'
asbag60
(g81
g62
NtRp2013
(dp2014
g65
(dp2015
sg74
g2000
sg67
(lp2016
g60
(g61
g62
NtRp2017
(dp2018
g65
(dp2019
g73
I5
ssg74
g2013
sg67
(lp2020
g103
asbasbasbag60
(g76
g62
NtRp2021
(dp2022
g65
(dp2023
sg74
g70
sg67
(lp2024
g60
(g81
g62
NtRp2025
(dp2026
g65
(dp2027
g85
g86
ssg74
g2021
sg67
(lp2028
S'is_local'
p2029
asbag60
(g81
g62
NtRp2030
(dp2031
g65
(dp2032
g92
g93
ssg74
g2021
sg67
(lp2033
S':'
asbag60
(g81
g62
NtRp2034
(dp2035
g65
(dp2036
sg74
g2021
sg67
(lp2037
g60
(g61
g62
NtRp2038
(dp2039
g65
(dp2040
g73
I5
ssg74
g2034
sg67
(lp2041
g1498
asbasbasbag60
(g76
g62
NtRp2042
(dp2043
g65
(dp2044
sg74
g70
sg67
(lp2045
g60
(g81
g62
NtRp2046
(dp2047
g65
(dp2048
g85
g86
ssg74
g2042
sg67
(lp2049
S'is_restful'
p2050
asbag60
(g81
g62
NtRp2051
(dp2052
g65
(dp2053
g92
g93
ssg74
g2042
sg67
(lp2054
S':'
asbag60
(g81
g62
NtRp2055
(dp2056
g65
(dp2057
sg74
g2042
sg67
(lp2058
g60
(g61
g62
NtRp2059
(dp2060
g65
(dp2061
g73
I5
ssg74
g2055
sg67
(lp2062
g103
asbasbasbag60
(g76
g62
NtRp2063
(dp2064
g65
(dp2065
sg74
g70
sg67
(lp2066
g60
(g81
g62
NtRp2067
(dp2068
g65
(dp2069
g85
g86
ssg74
g2063
sg67
(lp2070
S'now'
p2071
asbag60
(g81
g62
NtRp2072
(dp2073
g65
(dp2074
g92
g93
ssg74
g2063
sg67
(lp2075
S':'
asbag60
(g81
g62
NtRp2076
(dp2077
g65
(dp2078
sg74
g2063
sg67
(lp2079
g60
(g61
g62
NtRp2080
(dp2081
g65
(dp2082
g73
I5
ssg74
g2076
sg67
(lp2083
S'datetime.datetime(2012, 3, 18, 17, 2, 56, 863676)'
p2084
asbasbasbag60
(g76
g62
NtRp2085
(dp2086
g65
(dp2087
sg74
g70
sg67
(lp2088
g60
(g81
g62
NtRp2089
(dp2090
g65
(dp2091
g85
g86
ssg74
g2085
sg67
(lp2092
S'post_vars'
p2093
asbag60
(g81
g62
NtRp2094
(dp2095
g65
(dp2096
g92
g93
ssg74
g2085
sg67
(lp2097
S':'
asbag60
(g81
g62
NtRp2098
(dp2099
g65
(dp2100
sg74
g2085
sg67
(lp2101
g60
(g61
g62
NtRp2102
(dp2103
g65
(dp2104
g73
I5
ssg74
g2098
sg67
(lp2105
g60
(g69
g62
NtRp2106
(dp2107
g65
(dp2108
g73
I4
ssg74
Nsg67
(lp2109
sbasbasbasbag60
(g76
g62
NtRp2110
(dp2111
g65
(dp2112
sg74
g70
sg67
(lp2113
g60
(g81
g62
NtRp2114
(dp2115
g65
(dp2116
g85
g86
ssg74
g2110
sg67
(lp2117
S'url'
p2118
asbag60
(g81
g62
NtRp2119
(dp2120
g65
(dp2121
g92
g93
ssg74
g2110
sg67
(lp2122
S':'
asbag60
(g81
g62
NtRp2123
(dp2124
g65
(dp2125
sg74
g2110
sg67
(lp2126
g60
(g61
g62
NtRp2127
(dp2128
g65
(dp2129
g73
I5
ssg74
g2123
sg67
(lp2130
S'/admin/default/reload_routes'
p2131
asbasbasbag60
(g76
g62
NtRp2132
(dp2133
g65
(dp2134
sg74
g70
sg67
(lp2135
g60
(g81
g62
NtRp2136
(dp2137
g65
(dp2138
g85
g86
ssg74
g2132
sg67
(lp2139
S'utcnow'
p2140
asbag60
(g81
g62
NtRp2141
(dp2142
g65
(dp2143
g92
g93
ssg74
g2132
sg67
(lp2144
S':'
asbag60
(g81
g62
NtRp2145
(dp2146
g65
(dp2147
sg74
g2132
sg67
(lp2148
g60
(g61
g62
NtRp2149
(dp2150
g65
(dp2151
g73
I5
ssg74
g2145
sg67
(lp2152
S'datetime.datetime(2012, 3, 18, 21, 2, 56, 863691)'
p2153
asbasbasbag60
(g76
g62
NtRp2154
(dp2155
g65
(dp2156
sg74
g70
sg67
(lp2157
g60
(g81
g62
NtRp2158
(dp2159
g65
(dp2160
g85
g86
ssg74
g2154
sg67
(lp2161
S'uuid'
p2162
asbag60
(g81
g62
NtRp2163
(dp2164
g65
(dp2165
g92
g93
ssg74
g2154
sg67
(lp2166
S':'
asbag60
(g81
g62
NtRp2167
(dp2168
g65
(dp2169
sg74
g2154
sg67
(lp2170
g60
(g61
g62
NtRp2171
(dp2172
g65
(dp2173
g73
I5
ssg74
g2167
sg67
(lp2174
S'admin/127.0.0.1.2012-03-18.17-02-56.04b12587-3e74-4f10-aeb5-5ef572e9f5fb'
p2175
asbasbasbag60
(g76
g62
NtRp2176
(dp2177
g65
(dp2178
sg74
g70
sg67
(lp2179
g60
(g81
g62
NtRp2180
(dp2181
g65
(dp2182
g85
g86
ssg74
g2176
sg67
(lp2183
S'vars'
p2184
asbag60
(g81
g62
NtRp2185
(dp2186
g65
(dp2187
g92
g93
ssg74
g2176
sg67
(lp2188
S':'
asbag60
(g81
g62
NtRp2189
(dp2190
g65
(dp2191
sg74
g2176
sg67
(lp2192
g60
(g61
g62
NtRp2193
(dp2194
g65
(dp2195
g73
I5
ssg74
g2189
sg67
(lp2196
g60
(g69
g62
NtRp2197
(dp2198
g65
(dp2199
g73
I4
ssg74
Nsg67
(lp2200
sbasbasbasbag60
(g76
g62
NtRp2201
(dp2202
g65
(dp2203
sg74
g70
sg67
(lp2204
g60
(g81
g62
NtRp2205
(dp2206
g65
(dp2207
g85
g86
ssg74
g2201
sg67
(lp2208
S'wsgi'
p2209
asbag60
(g81
g62
NtRp2210
(dp2211
g65
(dp2212
g92
g93
ssg74
g2201
sg67
(lp2213
S':'
asbag60
(g81
g62
NtRp2214
(dp2215
g65
(dp2216
sg74
g2201
sg67
(lp2217
g60
(g61
g62
NtRp2218
(dp2219
g65
(dp2220
g73
I5
ssg74
g2214
sg67
(lp2221
g60
(g69
g62
NtRp2222
(dp2223
g65
(dp2224
g73
I4
ssg74
Nsg67
(lp2225
g60
(g76
g62
NtRp2226
(dp2227
g65
(dp2228
sg74
g2222
sg67
(lp2229
g60
(g81
g62
NtRp2230
(dp2231
g65
(dp2232
g85
g86
ssg74
g2226
sg67
(lp2233
S'environ'
p2234
asbag60
(g81
g62
NtRp2235
(dp2236
g65
(dp2237
g92
g93
ssg74
g2226
sg67
(lp2238
S':'
asbag60
(g81
g62
NtRp2239
(dp2240
g65
(dp2241
sg74
g2226
sg67
(lp2242
g60
(g61
g62
NtRp2243
(dp2244
g65
(dp2245
g73
I4
ssg74
g2239
sg67
(lp2246
g60
(g69
g62
NtRp2247
(dp2248
g65
(dp2249
g73
I3
ssg74
Nsg67
(lp2250
g60
(g76
g62
NtRp2251
(dp2252
g65
(dp2253
sg74
g2247
sg67
(lp2254
g60
(g81
g62
NtRp2255
(dp2256
g65
(dp2257
g85
g86
ssg74
g2251
sg67
(lp2258
S'HTTP_ACCEPT'
p2259
asbag60
(g81
g62
NtRp2260
(dp2261
g65
(dp2262
g92
g93
ssg74
g2251
sg67
(lp2263
S':'
asbag60
(g81
g62
NtRp2264
(dp2265
g65
(dp2266
sg74
g2251
sg67
(lp2267
g60
(g61
g62
NtRp2268
(dp2269
g65
(dp2270
g73
I3
ssg74
g2264
sg67
(lp2271
g780
asbasbasbag60
(g76
g62
NtRp2272
(dp2273
g65
(dp2274
sg74
g2247
sg67
(lp2275
g60
(g81
g62
NtRp2276
(dp2277
g65
(dp2278
g85
g86
ssg74
g2272
sg67
(lp2279
S'HTTP_ACCEPT_CHARSET'
p2280
asbag60
(g81
g62
NtRp2281
(dp2282
g65
(dp2283
g92
g93
ssg74
g2272
sg67
(lp2284
S':'
asbag60
(g81
g62
NtRp2285
(dp2286
g65
(dp2287
sg74
g2272
sg67
(lp2288
g60
(g61
g62
NtRp2289
(dp2290
g65
(dp2291
g73
I3
ssg74
g2285
sg67
(lp2292
g802
asbasbasbag60
(g76
g62
NtRp2293
(dp2294
g65
(dp2295
sg74
g2247
sg67
(lp2296
g60
(g81
g62
NtRp2297
(dp2298
g65
(dp2299
g85
g86
ssg74
g2293
sg67
(lp2300
S'HTTP_ACCEPT_ENCODING'
p2301
asbag60
(g81
g62
NtRp2302
(dp2303
g65
(dp2304
g92
g93
ssg74
g2293
sg67
(lp2305
S':'
asbag60
(g81
g62
NtRp2306
(dp2307
g65
(dp2308
sg74
g2293
sg67
(lp2309
g60
(g61
g62
NtRp2310
(dp2311
g65
(dp2312
g73
I3
ssg74
g2306
sg67
(lp2313
g824
asbasbasbag60
(g76
g62
NtRp2314
(dp2315
g65
(dp2316
sg74
g2247
sg67
(lp2317
g60
(g81
g62
NtRp2318
(dp2319
g65
(dp2320
g85
g86
ssg74
g2314
sg67
(lp2321
S'HTTP_ACCEPT_LANGUAGE'
p2322
asbag60
(g81
g62
NtRp2323
(dp2324
g65
(dp2325
g92
g93
ssg74
g2314
sg67
(lp2326
S':'
asbag60
(g81
g62
NtRp2327
(dp2328
g65
(dp2329
sg74
g2314
sg67
(lp2330
g60
(g61
g62
NtRp2331
(dp2332
g65
(dp2333
g73
I3
ssg74
g2327
sg67
(lp2334
g846
asbasbasbag60
(g76
g62
NtRp2335
(dp2336
g65
(dp2337
sg74
g2247
sg67
(lp2338
g60
(g81
g62
NtRp2339
(dp2340
g65
(dp2341
g85
g86
ssg74
g2335
sg67
(lp2342
S'HTTP_CONNECTION'
p2343
asbag60
(g81
g62
NtRp2344
(dp2345
g65
(dp2346
g92
g93
ssg74
g2335
sg67
(lp2347
S':'
asbag60
(g81
g62
NtRp2348
(dp2349
g65
(dp2350
sg74
g2335
sg67
(lp2351
g60
(g61
g62
NtRp2352
(dp2353
g65
(dp2354
g73
I3
ssg74
g2348
sg67
(lp2355
g868
asbasbasbag60
(g76
g62
NtRp2356
(dp2357
g65
(dp2358
sg74
g2247
sg67
(lp2359
g60
(g81
g62
NtRp2360
(dp2361
g65
(dp2362
g85
g86
ssg74
g2356
sg67
(lp2363
S'HTTP_COOKIE'
p2364
asbag60
(g81
g62
NtRp2365
(dp2366
g65
(dp2367
g92
g93
ssg74
g2356
sg67
(lp2368
S':'
asbag60
(g81
g62
NtRp2369
(dp2370
g65
(dp2371
sg74
g2356
sg67
(lp2372
g60
(g61
g62
NtRp2373
(dp2374
g65
(dp2375
g73
I3
ssg74
g2369
sg67
(lp2376
g890
asbasbasbag60
(g76
g62
NtRp2377
(dp2378
g65
(dp2379
sg74
g2247
sg67
(lp2380
g60
(g81
g62
NtRp2381
(dp2382
g65
(dp2383
g85
g86
ssg74
g2377
sg67
(lp2384
S'HTTP_HOST'
p2385
asbag60
(g81
g62
NtRp2386
(dp2387
g65
(dp2388
g92
g93
ssg74
g2377
sg67
(lp2389
S':'
asbag60
(g81
g62
NtRp2390
(dp2391
g65
(dp2392
sg74
g2377
sg67
(lp2393
g60
(g61
g62
NtRp2394
(dp2395
g65
(dp2396
g73
I3
ssg74
g2390
sg67
(lp2397
g912
asbasbasbag60
(g76
g62
NtRp2398
(dp2399
g65
(dp2400
sg74
g2247
sg67
(lp2401
g60
(g81
g62
NtRp2402
(dp2403
g65
(dp2404
g85
g86
ssg74
g2398
sg67
(lp2405
S'HTTP_REFERER'
p2406
asbag60
(g81
g62
NtRp2407
(dp2408
g65
(dp2409
g92
g93
ssg74
g2398
sg67
(lp2410
S':'
asbag60
(g81
g62
NtRp2411
(dp2412
g65
(dp2413
sg74
g2398
sg67
(lp2414
g60
(g61
g62
NtRp2415
(dp2416
g65
(dp2417
g73
I3
ssg74
g2411
sg67
(lp2418
g934
asbasbasbag60
(g76
g62
NtRp2419
(dp2420
g65
(dp2421
sg74
g2247
sg67
(lp2422
g60
(g81
g62
NtRp2423
(dp2424
g65
(dp2425
g85
g86
ssg74
g2419
sg67
(lp2426
S'HTTP_USER_AGENT'
p2427
asbag60
(g81
g62
NtRp2428
(dp2429
g65
(dp2430
g92
g93
ssg74
g2419
sg67
(lp2431
S':'
asbag60
(g81
g62
NtRp2432
(dp2433
g65
(dp2434
sg74
g2419
sg67
(lp2435
g60
(g61
g62
NtRp2436
(dp2437
g65
(dp2438
g73
I3
ssg74
g2432
sg67
(lp2439
g956
asbasbasbag60
(g76
g62
NtRp2440
(dp2441
g65
(dp2442
sg74
g2247
sg67
(lp2443
g60
(g81
g62
NtRp2444
(dp2445
g65
(dp2446
g85
g86
ssg74
g2440
sg67
(lp2447
S'PATH_INFO'
p2448
asbag60
(g81
g62
NtRp2449
(dp2450
g65
(dp2451
g92
g93
ssg74
g2440
sg67
(lp2452
S':'
asbag60
(g81
g62
NtRp2453
(dp2454
g65
(dp2455
sg74
g2440
sg67
(lp2456
g60
(g61
g62
NtRp2457
(dp2458
g65
(dp2459
g73
I3
ssg74
g2453
sg67
(lp2460
g1020
asbasbasbag60
(g76
g62
NtRp2461
(dp2462
g65
(dp2463
sg74
g2247
sg67
(lp2464
g60
(g81
g62
NtRp2465
(dp2466
g65
(dp2467
g85
g86
ssg74
g2461
sg67
(lp2468
S'QUERY_STRING'
p2469
asbag60
(g81
g62
NtRp2470
(dp2471
g65
(dp2472
g92
g93
ssg74
g2461
sg67
(lp2473
S':'
asbag60
(g81
g62
NtRp2474
(dp2475
g65
(dp2476
sg74
g2461
sg67
(lp2477
g60
(g61
g62
NtRp2478
(dp2479
g65
(dp2480
g73
I3
ssg74
g2474
sg67
(lp2481
S''
asbasbasbag60
(g76
g62
NtRp2482
(dp2483
g65
(dp2484
sg74
g2247
sg67
(lp2485
g60
(g81
g62
NtRp2486
(dp2487
g65
(dp2488
g85
g86
ssg74
g2482
sg67
(lp2489
S'REMOTE_ADDR'
p2490
asbag60
(g81
g62
NtRp2491
(dp2492
g65
(dp2493
g92
g93
ssg74
g2482
sg67
(lp2494
S':'
asbag60
(g81
g62
NtRp2495
(dp2496
g65
(dp2497
sg74
g2482
sg67
(lp2498
g60
(g61
g62
NtRp2499
(dp2500
g65
(dp2501
g73
I3
ssg74
g2495
sg67
(lp2502
g193
asbasbasbag60
(g76
g62
NtRp2503
(dp2504
g65
(dp2505
sg74
g2247
sg67
(lp2506
g60
(g81
g62
NtRp2507
(dp2508
g65
(dp2509
g85
g86
ssg74
g2503
sg67
(lp2510
S'REMOTE_PORT'
p2511
asbag60
(g81
g62
NtRp2512
(dp2513
g65
(dp2514
g92
g93
ssg74
g2503
sg67
(lp2515
S':'
asbag60
(g81
g62
NtRp2516
(dp2517
g65
(dp2518
sg74
g2503
sg67
(lp2519
g60
(g61
g62
NtRp2520
(dp2521
g65
(dp2522
g73
I3
ssg74
g2516
sg67
(lp2523
g1084
asbasbasbag60
(g76
g62
NtRp2524
(dp2525
g65
(dp2526
sg74
g2247
sg67
(lp2527
g60
(g81
g62
NtRp2528
(dp2529
g65
(dp2530
g85
g86
ssg74
g2524
sg67
(lp2531
S'REQUEST_METHOD'
p2532
asbag60
(g81
g62
NtRp2533
(dp2534
g65
(dp2535
g92
g93
ssg74
g2524
sg67
(lp2536
S':'
asbag60
(g81
g62
NtRp2537
(dp2538
g65
(dp2539
sg74
g2524
sg67
(lp2540
g60
(g61
g62
NtRp2541
(dp2542
g65
(dp2543
g73
I3
ssg74
g2537
sg67
(lp2544
g1106
asbasbasbag60
(g76
g62
NtRp2545
(dp2546
g65
(dp2547
sg74
g2247
sg67
(lp2548
g60
(g81
g62
NtRp2549
(dp2550
g65
(dp2551
g85
g86
ssg74
g2545
sg67
(lp2552
S'REQUEST_URI'
p2553
asbag60
(g81
g62
NtRp2554
(dp2555
g65
(dp2556
g92
g93
ssg74
g2545
sg67
(lp2557
S':'
asbag60
(g81
g62
NtRp2558
(dp2559
g65
(dp2560
sg74
g2545
sg67
(lp2561
g60
(g61
g62
NtRp2562
(dp2563
g65
(dp2564
g73
I3
ssg74
g2558
sg67
(lp2565
g1020
asbasbasbag60
(g76
g62
NtRp2566
(dp2567
g65
(dp2568
sg74
g2247
sg67
(lp2569
g60
(g81
g62
NtRp2570
(dp2571
g65
(dp2572
g85
g86
ssg74
g2566
sg67
(lp2573
S'SCRIPT_NAME'
p2574
asbag60
(g81
g62
NtRp2575
(dp2576
g65
(dp2577
g92
g93
ssg74
g2566
sg67
(lp2578
S':'
asbag60
(g81
g62
NtRp2579
(dp2580
g65
(dp2581
sg74
g2566
sg67
(lp2582
g60
(g61
g62
NtRp2583
(dp2584
g65
(dp2585
g73
I3
ssg74
g2579
sg67
(lp2586
S''
asbasbasbag60
(g76
g62
NtRp2587
(dp2588
g65
(dp2589
sg74
g2247
sg67
(lp2590
g60
(g81
g62
NtRp2591
(dp2592
g65
(dp2593
g85
g86
ssg74
g2587
sg67
(lp2594
S'SERVER_NAME'
p2595
asbag60
(g81
g62
NtRp2596
(dp2597
g65
(dp2598
g92
g93
ssg74
g2587
sg67
(lp2599
S':'
asbag60
(g81
g62
NtRp2600
(dp2601
g65
(dp2602
sg74
g2587
sg67
(lp2603
g60
(g61
g62
NtRp2604
(dp2605
g65
(dp2606
g73
I3
ssg74
g2600
sg67
(lp2607
g1170
asbasbasbag60
(g76
g62
NtRp2608
(dp2609
g65
(dp2610
sg74
g2247
sg67
(lp2611
g60
(g81
g62
NtRp2612
(dp2613
g65
(dp2614
g85
g86
ssg74
g2608
sg67
(lp2615
S'SERVER_PORT'
p2616
asbag60
(g81
g62
NtRp2617
(dp2618
g65
(dp2619
g92
g93
ssg74
g2608
sg67
(lp2620
S':'
asbag60
(g81
g62
NtRp2621
(dp2622
g65
(dp2623
sg74
g2608
sg67
(lp2624
g60
(g61
g62
NtRp2625
(dp2626
g65
(dp2627
g73
I3
ssg74
g2621
sg67
(lp2628
g1192
asbasbasbag60
(g76
g62
NtRp2629
(dp2630
g65
(dp2631
sg74
g2247
sg67
(lp2632
g60
(g81
g62
NtRp2633
(dp2634
g65
(dp2635
g85
g86
ssg74
g2629
sg67
(lp2636
S'SERVER_PROTOCOL'
p2637
asbag60
(g81
g62
NtRp2638
(dp2639
g65
(dp2640
g92
g93
ssg74
g2629
sg67
(lp2641
S':'
asbag60
(g81
g62
NtRp2642
(dp2643
g65
(dp2644
sg74
g2629
sg67
(lp2645
g60
(g61
g62
NtRp2646
(dp2647
g65
(dp2648
g73
I3
ssg74
g2642
sg67
(lp2649
g1214
asbasbasbag60
(g76
g62
NtRp2650
(dp2651
g65
(dp2652
sg74
g2247
sg67
(lp2653
g60
(g81
g62
NtRp2654
(dp2655
g65
(dp2656
g85
g86
ssg74
g2650
sg67
(lp2657
S'SERVER_SOFTWARE'
p2658
asbag60
(g81
g62
NtRp2659
(dp2660
g65
(dp2661
g92
g93
ssg74
g2650
sg67
(lp2662
S':'
asbag60
(g81
g62
NtRp2663
(dp2664
g65
(dp2665
sg74
g2650
sg67
(lp2666
g60
(g61
g62
NtRp2667
(dp2668
g65
(dp2669
g73
I3
ssg74
g2663
sg67
(lp2670
g1236
asbasbasbag60
(g76
g62
NtRp2671
(dp2672
g65
(dp2673
sg74
g2247
sg67
(lp2674
g60
(g81
g62
NtRp2675
(dp2676
g65
(dp2677
g85
g86
ssg74
g2671
sg67
(lp2678
S'WEB2PY_ORIGINAL_URI'
p2679
asbag60
(g81
g62
NtRp2680
(dp2681
g65
(dp2682
g92
g93
ssg74
g2671
sg67
(lp2683
S':'
asbag60
(g81
g62
NtRp2684
(dp2685
g65
(dp2686
sg74
g2671
sg67
(lp2687
g60
(g61
g62
NtRp2688
(dp2689
g65
(dp2690
g73
I3
ssg74
g2684
sg67
(lp2691
g1280
asbasbasbag60
(g76
g62
NtRp2692
(dp2693
g65
(dp2694
sg74
g2247
sg67
(lp2695
g60
(g81
g62
NtRp2696
(dp2697
g65
(dp2698
g85
g86
ssg74
g2692
sg67
(lp2699
S'wsgi.errors'
p2700
asbag60
(g81
g62
NtRp2701
(dp2702
g65
(dp2703
g92
g93
ssg74
g2692
sg67
(lp2704
S':'
asbag60
(g81
g62
NtRp2705
(dp2706
g65
(dp2707
sg74
g2692
sg67
(lp2708
g60
(g61
g62
NtRp2709
(dp2710
g65
(dp2711
g73
I3
ssg74
g2705
sg67
(lp2712
S"<open file '<stderr>', mode 'w' at 0x4220b0>"
p2713
asbasbasbag60
(g76
g62
NtRp2714
(dp2715
g65
(dp2716
sg74
g2247
sg67
(lp2717
g60
(g81
g62
NtRp2718
(dp2719
g65
(dp2720
g85
g86
ssg74
g2714
sg67
(lp2721
S'wsgi.file_wrapper'
p2722
asbag60
(g81
g62
NtRp2723
(dp2724
g65
(dp2725
g92
g93
ssg74
g2714
sg67
(lp2726
S':'
asbag60
(g81
g62
NtRp2727
(dp2728
g65
(dp2729
sg74
g2714
sg67
(lp2730
g60
(g61
g62
NtRp2731
(dp2732
g65
(dp2733
g73
I3
ssg74
g2727
sg67
(lp2734
S'<class wsgiref.util.FileWrapper at 0x225e6c0>'
p2735
asbasbasbag60
(g76
g62
NtRp2736
(dp2737
g65
(dp2738
sg74
g2247
sg67
(lp2739
g60
(g81
g62
NtRp2740
(dp2741
g65
(dp2742
g85
g86
ssg74
g2736
sg67
(lp2743
S'wsgi.input'
p2744
asbag60
(g81
g62
NtRp2745
(dp2746
g65
(dp2747
g92
g93
ssg74
g2736
sg67
(lp2748
S':'
asbag60
(g81
g62
NtRp2749
(dp2750
g65
(dp2751
sg74
g2736
sg67
(lp2752
g60
(g61
g62
NtRp2753
(dp2754
g65
(dp2755
g73
I3
ssg74
g2749
sg67
(lp2756
S'<cStringIO.StringO object at 0x8e1a2e0>'
p2757
asbasbasbag60
(g76
g62
NtRp2758
(dp2759
g65
(dp2760
sg74
g2247
sg67
(lp2761
g60
(g81
g62
NtRp2762
(dp2763
g65
(dp2764
g85
g86
ssg74
g2758
sg67
(lp2765
S'wsgi.multiprocess'
p2766
asbag60
(g81
g62
NtRp2767
(dp2768
g65
(dp2769
g92
g93
ssg74
g2758
sg67
(lp2770
S':'
asbag60
(g81
g62
NtRp2771
(dp2772
g65
(dp2773
sg74
g2758
sg67
(lp2774
g60
(g61
g62
NtRp2775
(dp2776
g65
(dp2777
g73
I3
ssg74
g2771
sg67
(lp2778
g103
asbasbasbag60
(g76
g62
NtRp2779
(dp2780
g65
(dp2781
sg74
g2247
sg67
(lp2782
g60
(g81
g62
NtRp2783
(dp2784
g65
(dp2785
g85
g86
ssg74
g2779
sg67
(lp2786
S'wsgi.multithread'
p2787
asbag60
(g81
g62
NtRp2788
(dp2789
g65
(dp2790
g92
g93
ssg74
g2779
sg67
(lp2791
S':'
asbag60
(g81
g62
NtRp2792
(dp2793
g65
(dp2794
sg74
g2779
sg67
(lp2795
g60
(g61
g62
NtRp2796
(dp2797
g65
(dp2798
g73
I3
ssg74
g2792
sg67
(lp2799
g1498
asbasbasbag60
(g76
g62
NtRp2800
(dp2801
g65
(dp2802
sg74
g2247
sg67
(lp2803
g60
(g81
g62
NtRp2804
(dp2805
g65
(dp2806
g85
g86
ssg74
g2800
sg67
(lp2807
S'wsgi.run_once'
p2808
asbag60
(g81
g62
NtRp2809
(dp2810
g65
(dp2811
g92
g93
ssg74
g2800
sg67
(lp2812
S':'
asbag60
(g81
g62
NtRp2813
(dp2814
g65
(dp2815
sg74
g2800
sg67
(lp2816
g60
(g61
g62
NtRp2817
(dp2818
g65
(dp2819
g73
I3
ssg74
g2813
sg67
(lp2820
g103
asbasbasbag60
(g76
g62
NtRp2821
(dp2822
g65
(dp2823
sg74
g2247
sg67
(lp2824
g60
(g81
g62
NtRp2825
(dp2826
g65
(dp2827
g85
g86
ssg74
g2821
sg67
(lp2828
S'wsgi.url_scheme'
p2829
asbag60
(g81
g62
NtRp2830
(dp2831
g65
(dp2832
g92
g93
ssg74
g2821
sg67
(lp2833
S':'
asbag60
(g81
g62
NtRp2834
(dp2835
g65
(dp2836
sg74
g2821
sg67
(lp2837
g60
(g61
g62
NtRp2838
(dp2839
g65
(dp2840
g73
I3
ssg74
g2834
sg67
(lp2841
g1541
asbasbasbag60
(g76
g62
NtRp2842
(dp2843
g65
(dp2844
sg74
g2247
sg67
(lp2845
g60
(g81
g62
NtRp2846
(dp2847
g65
(dp2848
g85
g86
ssg74
g2842
sg67
(lp2849
S'wsgi.version'
p2850
asbag60
(g81
g62
NtRp2851
(dp2852
g65
(dp2853
g92
g93
ssg74
g2842
sg67
(lp2854
S':'
asbag60
(g81
g62
NtRp2855
(dp2856
g65
(dp2857
sg74
g2842
sg67
(lp2858
g60
(g61
g62
NtRp2859
(dp2860
g65
(dp2861
g73
I3
ssg74
g2855
sg67
(lp2862
S'1'
asbasbasbasbasbasbasbasbasbasbasbasbasbsS'frames'
p2863
(lp2864
(dp2865
S'file'
p2866
S'/users/udimilo/Documents/web2py/gluon/restricted.py'
p2867
sS'dump'
p2868
(dp2869
S'environment'
p2870
S"{'A': <class 'gluon.html.A'>, 'ALLOW_TOGGLE': 'true', 'A_button': <function A_button at 0xa131170>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, 'CENTER': <class 'gluon.html.CENTER'>, ...}"
p2871
sS'ccode'
p2872
S'<code object <module> at 0x9ee9d58, file "/Users...plications/admin/controllers/default.py", line 3>'
p2873
ssS'lnum'
p2874
I205
sS'lines'
p2875
(dp2876
I200
S'    try:'
p2877
sI201
S'        if type(code) == types.CodeType:'
p2878
sI202
S'            ccode = code'
p2879
sI203
S'        else:'
p2880
sI204
S'            ccode = compile2(code,layer)'
p2881
sI205
S'        exec ccode in environment'
p2882
sI206
S'    except HTTP:'
p2883
sI207
S'        raise'
p2884
sI208
S'    except RestrictedError:'
p2885
sI209
S'        # do not encapsulate (obfuscate) the original RestrictedError'
p2886
ssS'call'
p2887
S"(code='# coding: utf8\\n\\nEXPERIMENTAL_STUFF = True\\n\\nif EX...\\n\\nresponse._vars=response._caller(reload_routes)\\n', environment={'A': <class 'gluon.html.A'>, 'ALLOW_TOGGLE': 'true', 'A_button': <function A_button at 0xa131170>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, 'CENTER': <class 'gluon.html.CENTER'>, ...}, layer='/Users/udimilo/Documents/web2py/applications/admin/controllers/default.py')"
p2888
sS'func'
p2889
S'restricted'
p2890
sa(dp2891
g2866
S'/Users/udimilo/Documents/web2py/applications/admin/controllers/default.py'
p2892
sg2868
(dp2893
sg2874
I1352
sg2875
(dp2894
I1344
S'def reload_routes():'
p2895
sI1345
S'    """ Reload routes.py """'
p2896
sI1346
S'    import gluon.rewrite'
p2897
sI1347
S'    gluon.rewrite.load()'
p2898
sI1348
S"    redirect(URL('site'))"
p2899
sI1349
S''
sI1350
S''
sI1341
S'    else:'
p2900
sI1342
S'        return dict(form=T("Disabled"))'
p2901
sI1343
S''
ssg2887
S'()'
p2902
sg2889
S'<module>'
p2903
sa(dp2904
g2866
S'/users/udimilo/Documents/web2py/gluon/globals.py'
p2905
sg2868
(dp2906
S'self'
p2907
S'undefined'
p2908
sS'f'
S'<function reload_routes at 0x9ee3370>'
p2909
ssg2874
I173
sg2875
(dp2910
I168
S'        self.menu = []             # used by the default view layout'
p2911
sI169
S'        self.files = []            # used by web2py_ajax.html'
p2912
sI170
S'        self.generic_patterns = [] # patterns to allow generic views'
p2913
sI171
S"        self.delimiters = ('{{','}}')"
p2914
sI172
S'        self._vars = None'
p2915
sI173
S'        self._caller = lambda f: f()'
p2916
sI174
S'        self._view_environment = None'
p2917
sI175
S'        self._custom_commit = None'
p2918
sI176
S'        self._custom_rollback = None'
p2919
sI177
S''
ssg2887
S'(f=<function reload_routes at 0x9ee3370>)'
p2920
sg2889
S'<lambda>'
p2921
sa(dp2922
g2866
S'/Users/udimilo/Documents/web2py/applications/admin/controllers/default.py'
p2923
sg2868
(dp2924
S'gluon.rewrite.load'
p2925
S'<function load at 0x10322f0>'
p2926
sS'gluon'
p2927
S"<module 'gluon' from '/users/udimilo/Documents/web2py/gluon/__init__.pyc'>"
p2928
sS'gluon.rewrite'
p2929
S"<module 'gluon.rewrite' from '/users/udimilo/Documents/web2py/gluon/rewrite.pyc'>"
p2930
ssg2874
I1347
sg2875
(dp2931
I1344
S'def reload_routes():'
p2932
sI1345
S'    """ Reload routes.py """'
p2933
sI1346
S'    import gluon.rewrite'
p2934
sI1347
S'    gluon.rewrite.load()'
p2935
sI1348
S"    redirect(URL('site'))"
p2936
sI1349
S''
sI1350
S''
sI1341
S'    else:'
p2937
sI1342
S'        return dict(form=T("Disabled"))'
p2938
sI1343
S''
ssg2887
S'()'
p2939
sg2889
S'reload_routes'
p2940
sa(dp2941
g2866
S'/users/udimilo/Documents/web2py/gluon/rewrite.py'
p2942
sg2868
(dp2943
S'e'
S'SyntaxError(\'invalid syntax\', (\'<string>\', 48, 5.../udi0312/default/(?P<any>.*)\', \'/\\\\g<any>\'),\\n"))'
p2944
ssg2874
I267
sg2875
(dp2945
I262
S"            exec (data + '\\n') in symbols"
p2946
sI263
S'        except SyntaxError, e:'
p2947
sI264
S'            logger.error('
p2948
sI265
S"                '%s has a syntax error and will not be loaded\\n' % path"
p2949
sI266
S'                + traceback.format_exc())'
p2950
sI267
S'            raise e'
p2951
sI268
S''
sI269
S'    p = _params_default(app)'
p2952
sI270
S''
sI271
S"    for sym in ('routes_app', 'routes_in', 'routes_out'):"
p2953
ssg2887
S'(routes=\'routes.py\', app=None, data="#!/usr/bin/python\\n# -*- coding: utf-8 -*-\\n\\n# def...n__\':\\n    import doctest\\n    doctest.testmod()\\n\\n\\n", rdict=None)'
p2954
sg2889
S'load'
p2955
sasS'pyver'
p2956
S'Python 2.5.4: /Library/Frameworks/Python.framework/Versions/2.5/Resources/Python.app/Contents/MacOS/Python'
p2957
sS'session'
p2958
g60
(g61
g62
NtRp2959
(dp2960
g65
(dp2961
sg67
(lp2962
g60
(g69
g62
NtRp2963
(dp2964
g65
(dp2965
g73
I5
ssg74
Nsg67
(lp2966
g60
(g76
g62
NtRp2967
(dp2968
g65
(dp2969
sg74
g2963
sg67
(lp2970
g60
(g81
g62
NtRp2971
(dp2972
g65
(dp2973
g85
g86
ssg74
g2967
sg67
(lp2974
S'authorized'
p2975
asbag60
(g81
g62
NtRp2976
(dp2977
g65
(dp2978
g92
g93
ssg74
g2967
sg67
(lp2979
S':'
asbag60
(g81
g62
NtRp2980
(dp2981
g65
(dp2982
sg74
g2967
sg67
(lp2983
g60
(g61
g62
NtRp2984
(dp2985
g65
(dp2986
g73
I5
ssg74
g2980
sg67
(lp2987
g1498
asbasbasbag60
(g76
g62
NtRp2988
(dp2989
g65
(dp2990
sg74
g2963
sg67
(lp2991
g60
(g81
g62
NtRp2992
(dp2993
g65
(dp2994
g85
g86
ssg74
g2988
sg67
(lp2995
S'check_version'
p2996
asbag60
(g81
g62
NtRp2997
(dp2998
g65
(dp2999
g92
g93
ssg74
g2988
sg67
(lp3000
S':'
asbag60
(g81
g62
NtRp3001
(dp3002
g65
(dp3003
sg74
g2988
sg67
(lp3004
g60
(g61
g62
NtRp3005
(dp3006
g65
(dp3007
g73
I5
ssg74
g3001
sg67
(lp3008
g103
asbasbasbag60
(g76
g62
NtRp3009
(dp3010
g65
(dp3011
sg74
g2963
sg67
(lp3012
g60
(g81
g62
NtRp3013
(dp3014
g65
(dp3015
g85
g86
ssg74
g3009
sg67
(lp3016
S'last_time'
p3017
asbag60
(g81
g62
NtRp3018
(dp3019
g65
(dp3020
g92
g93
ssg74
g3009
sg67
(lp3021
S':'
asbag60
(g81
g62
NtRp3022
(dp3023
g65
(dp3024
sg74
g3009
sg67
(lp3025
g60
(g61
g62
NtRp3026
(dp3027
g65
(dp3028
g73
I5
ssg74
g3022
sg67
(lp3029
S'1332104576.871855'
p3030
asbasbasbasbasbsS'etype'
p3031
S"<type 'exceptions.SyntaxError'>"
p3032
sS'date'
p3033
S'Sun Mar 18 17:02:56 2012'
p3034
sS'response'
p3035
g60
(g61
g62
NtRp3036
(dp3037
g65
(dp3038
sg67
(lp3039
g60
(g69
g62
NtRp3040
(dp3041
g65
(dp3042
g73
I5
ssg74
Nsg67
(lp3043
g60
(g76
g62
NtRp3044
(dp3045
g65
(dp3046
sg74
g3040
sg67
(lp3047
g60
(g81
g62
NtRp3048
(dp3049
g65
(dp3050
g85
g86
ssg74
g3044
sg67
(lp3051
g158
asbag60
(g81
g62
NtRp3052
(dp3053
g65
(dp3054
g92
g93
ssg74
g3044
sg67
(lp3055
S':'
asbag60
(g81
g62
NtRp3056
(dp3057
g65
(dp3058
sg74
g3044
sg67
(lp3059
g60
(g61
g62
NtRp3060
(dp3061
g65
(dp3062
g73
I5
ssg74
g3056
sg67
(lp3063
S'<cStringIO.StringO object at 0x9fbb840>'
p3064
asbasbasbag60
(g76
g62
NtRp3065
(dp3066
g65
(dp3067
sg74
g3040
sg67
(lp3068
g60
(g81
g62
NtRp3069
(dp3070
g65
(dp3071
g85
g86
ssg74
g3065
sg67
(lp3072
g224
asbag60
(g81
g62
NtRp3073
(dp3074
g65
(dp3075
g92
g93
ssg74
g3065
sg67
(lp3076
S':'
asbag60
(g81
g62
NtRp3077
(dp3078
g65
(dp3079
sg74
g3065
sg67
(lp3080
g60
(g61
g62
NtRp3081
(dp3082
g65
(dp3083
g73
I5
ssg74
g3077
sg67
(lp3084
g60
(g69
g62
NtRp3085
(dp3086
g65
(dp3087
g73
I4
ssg74
Nsg67
(lp3088
g60
(g76
g62
NtRp3089
(dp3090
g65
(dp3091
sg74
g3085
sg67
(lp3092
g60
(g81
g62
NtRp3093
(dp3094
g65
(dp3095
g85
g86
ssg74
g3089
sg67
(lp3096
S'session_id_admin'
p3097
asbag60
(g81
g62
NtRp3098
(dp3099
g65
(dp3100
g92
g93
ssg74
g3089
sg67
(lp3101
S':'
asbag60
(g81
g62
NtRp3102
(dp3103
g65
(dp3104
sg74
g3089
sg67
(lp3105
g60
(g61
g62
NtRp3106
(dp3107
g65
(dp3108
g73
I4
ssg74
g3102
sg67
(lp3109
g60
(g69
g62
NtRp3110
(dp3111
g65
(dp3112
g73
I3
ssg74
Nsg67
(lp3113
g60
(g76
g62
NtRp3114
(dp3115
g65
(dp3116
sg74
g3110
sg67
(lp3117
g60
(g81
g62
NtRp3118
(dp3119
g65
(dp3120
g85
g86
ssg74
g3114
sg67
(lp3121
g274
asbag60
(g81
g62
NtRp3122
(dp3123
g65
(dp3124
g92
g93
ssg74
g3114
sg67
(lp3125
S':'
asbag60
(g81
g62
NtRp3126
(dp3127
g65
(dp3128
sg74
g3114
sg67
(lp3129
g60
(g61
g62
NtRp3130
(dp3131
g65
(dp3132
g73
I3
ssg74
g3126
sg67
(lp3133
S''
asbasbasbag60
(g76
g62
NtRp3134
(dp3135
g65
(dp3136
sg74
g3110
sg67
(lp3137
g60
(g81
g62
NtRp3138
(dp3139
g65
(dp3140
g85
g86
ssg74
g3134
sg67
(lp3141
g295
asbag60
(g81
g62
NtRp3142
(dp3143
g65
(dp3144
g92
g93
ssg74
g3134
sg67
(lp3145
S':'
asbag60
(g81
g62
NtRp3146
(dp3147
g65
(dp3148
sg74
g3134
sg67
(lp3149
g60
(g61
g62
NtRp3150
(dp3151
g65
(dp3152
g73
I3
ssg74
g3146
sg67
(lp3153
S''
asbasbasbag60
(g76
g62
NtRp3154
(dp3155
g65
(dp3156
sg74
g3110
sg67
(lp3157
g60
(g81
g62
NtRp3158
(dp3159
g65
(dp3160
g85
g86
ssg74
g3154
sg67
(lp3161
g316
asbag60
(g81
g62
NtRp3162
(dp3163
g65
(dp3164
g92
g93
ssg74
g3154
sg67
(lp3165
S':'
asbag60
(g81
g62
NtRp3166
(dp3167
g65
(dp3168
sg74
g3154
sg67
(lp3169
g60
(g61
g62
NtRp3170
(dp3171
g65
(dp3172
g73
I3
ssg74
g3166
sg67
(lp3173
S''
asbasbasbag60
(g76
g62
NtRp3174
(dp3175
g65
(dp3176
sg74
g3110
sg67
(lp3177
g60
(g81
g62
NtRp3178
(dp3179
g65
(dp3180
g85
g86
ssg74
g3174
sg67
(lp3181
g337
asbag60
(g81
g62
NtRp3182
(dp3183
g65
(dp3184
g92
g93
ssg74
g3174
sg67
(lp3185
S':'
asbag60
(g81
g62
NtRp3186
(dp3187
g65
(dp3188
sg74
g3174
sg67
(lp3189
g60
(g61
g62
NtRp3190
(dp3191
g65
(dp3192
g73
I3
ssg74
g3186
sg67
(lp3193
S''
asbasbasbag60
(g76
g62
NtRp3194
(dp3195
g65
(dp3196
sg74
g3110
sg67
(lp3197
g60
(g81
g62
NtRp3198
(dp3199
g65
(dp3200
g85
g86
ssg74
g3194
sg67
(lp3201
g358
asbag60
(g81
g62
NtRp3202
(dp3203
g65
(dp3204
g92
g93
ssg74
g3194
sg67
(lp3205
S':'
asbag60
(g81
g62
NtRp3206
(dp3207
g65
(dp3208
sg74
g3194
sg67
(lp3209
g60
(g61
g62
NtRp3210
(dp3211
g65
(dp3212
g73
I3
ssg74
g3206
sg67
(lp3213
S'/'
asbasbasbag60
(g76
g62
NtRp3214
(dp3215
g65
(dp3216
sg74
g3110
sg67
(lp3217
g60
(g81
g62
NtRp3218
(dp3219
g65
(dp3220
g85
g86
ssg74
g3214
sg67
(lp3221
g379
asbag60
(g81
g62
NtRp3222
(dp3223
g65
(dp3224
g92
g93
ssg74
g3214
sg67
(lp3225
S':'
asbag60
(g81
g62
NtRp3226
(dp3227
g65
(dp3228
sg74
g3214
sg67
(lp3229
g60
(g61
g62
NtRp3230
(dp3231
g65
(dp3232
g73
I3
ssg74
g3226
sg67
(lp3233
S''
asbasbasbag60
(g76
g62
NtRp3234
(dp3235
g65
(dp3236
sg74
g3110
sg67
(lp3237
g60
(g81
g62
NtRp3238
(dp3239
g65
(dp3240
g85
g86
ssg74
g3234
sg67
(lp3241
g400
asbag60
(g81
g62
NtRp3242
(dp3243
g65
(dp3244
g92
g93
ssg74
g3234
sg67
(lp3245
S':'
asbag60
(g81
g62
NtRp3246
(dp3247
g65
(dp3248
sg74
g3234
sg67
(lp3249
g60
(g61
g62
NtRp3250
(dp3251
g65
(dp3252
g73
I3
ssg74
g3246
sg67
(lp3253
S''
asbasbasbasbasbasbasbasbasbasbasbag60
(g76
g62
NtRp3254
(dp3255
g65
(dp3256
sg74
g3040
sg67
(lp3257
g60
(g81
g62
NtRp3258
(dp3259
g65
(dp3260
g85
g86
ssg74
g3254
sg67
(lp3261
S'delimiters'
p3262
asbag60
(g81
g62
NtRp3263
(dp3264
g65
(dp3265
g92
g93
ssg74
g3254
sg67
(lp3266
S':'
asbag60
(g81
g62
NtRp3267
(dp3268
g65
(dp3269
sg74
g3254
sg67
(lp3270
g60
(g61
g62
NtRp3271
(dp3272
g65
(dp3273
g73
I5
ssg74
g3267
sg67
(lp3274
g60
(g69
g62
NtRp3275
(dp3276
g65
(dp3277
g73
I4
ssg74
Nsg67
(lp3278
g60
(g76
g62
NtRp3279
(dp3280
g65
(dp3281
sg74
g3275
sg67
(lp3282
g60
(g81
g62
NtRp3283
(dp3284
g65
(dp3285
sg74
g3279
sg67
(lp3286
g60
(g61
g62
NtRp3287
(dp3288
g65
(dp3289
g73
I4
ssg74
g3283
sg67
(lp3290
S'{{'
p3291
asbasbasbag60
(g76
g62
NtRp3292
(dp3293
g65
(dp3294
sg74
g3275
sg67
(lp3295
g60
(g81
g62
NtRp3296
(dp3297
g65
(dp3298
sg74
g3292
sg67
(lp3299
g60
(g61
g62
NtRp3300
(dp3301
g65
(dp3302
g73
I4
ssg74
g3296
sg67
(lp3303
S'}}'
p3304
asbasbasbasbasbasbasbag60
(g76
g62
NtRp3305
(dp3306
g65
(dp3307
sg74
g3040
sg67
(lp3308
g60
(g81
g62
NtRp3309
(dp3310
g65
(dp3311
g85
g86
ssg74
g3305
sg67
(lp3312
S'files'
p3313
asbag60
(g81
g62
NtRp3314
(dp3315
g65
(dp3316
g92
g93
ssg74
g3305
sg67
(lp3317
S':'
asbag60
(g81
g62
NtRp3318
(dp3319
g65
(dp3320
sg74
g3305
sg67
(lp3321
g60
(g61
g62
NtRp3322
(dp3323
g65
(dp3324
g73
I5
ssg74
g3318
sg67
(lp3325
g60
(g69
g62
NtRp3326
(dp3327
g65
(dp3328
g73
I4
ssg74
Nsg67
(lp3329
g60
(g76
g62
NtRp3330
(dp3331
g65
(dp3332
sg74
g3326
sg67
(lp3333
g60
(g81
g62
NtRp3334
(dp3335
g65
(dp3336
sg74
g3330
sg67
(lp3337
g60
(g61
g62
NtRp3338
(dp3339
g65
(dp3340
g73
I4
ssg74
g3334
sg67
(lp3341
S'/admin/static/plugin_multiselect/jquery.dimensions.js'
p3342
asbasbasbag60
(g76
g62
NtRp3343
(dp3344
g65
(dp3345
sg74
g3326
sg67
(lp3346
g60
(g81
g62
NtRp3347
(dp3348
g65
(dp3349
sg74
g3343
sg67
(lp3350
g60
(g61
g62
NtRp3351
(dp3352
g65
(dp3353
g73
I4
ssg74
g3347
sg67
(lp3354
S'/admin/static/plugin_multiselect/jquery.multiselect.js'
p3355
asbasbasbag60
(g76
g62
NtRp3356
(dp3357
g65
(dp3358
sg74
g3326
sg67
(lp3359
g60
(g81
g62
NtRp3360
(dp3361
g65
(dp3362
sg74
g3356
sg67
(lp3363
g60
(g61
g62
NtRp3364
(dp3365
g65
(dp3366
g73
I4
ssg74
g3360
sg67
(lp3367
S'/admin/static/plugin_multiselect/jquery.multiselect.css'
p3368
asbasbasbag60
(g76
g62
NtRp3369
(dp3370
g65
(dp3371
sg74
g3326
sg67
(lp3372
g60
(g81
g62
NtRp3373
(dp3374
g65
(dp3375
sg74
g3369
sg67
(lp3376
g60
(g61
g62
NtRp3377
(dp3378
g65
(dp3379
g73
I4
ssg74
g3373
sg67
(lp3380
S'/admin/static/plugin_multiselect/start.js'
p3381
asbasbasbasbasbasbasbag60
(g76
g62
NtRp3382
(dp3383
g65
(dp3384
sg74
g3040
sg67
(lp3385
g60
(g81
g62
NtRp3386
(dp3387
g65
(dp3388
g85
g86
ssg74
g3382
sg67
(lp3389
S'flash'
p3390
asbag60
(g81
g62
NtRp3391
(dp3392
g65
(dp3393
g92
g93
ssg74
g3382
sg67
(lp3394
S':'
asbag60
(g81
g62
NtRp3395
(dp3396
g65
(dp3397
sg74
g3382
sg67
(lp3398
g60
(g61
g62
NtRp3399
(dp3400
g65
(dp3401
g73
I5
ssg74
g3395
sg67
(lp3402
S''
asbasbasbag60
(g76
g62
NtRp3403
(dp3404
g65
(dp3405
sg74
g3040
sg67
(lp3406
g60
(g81
g62
NtRp3407
(dp3408
g65
(dp3409
g85
g86
ssg74
g3403
sg67
(lp3410
S'generic_patterns'
p3411
asbag60
(g81
g62
NtRp3412
(dp3413
g65
(dp3414
g92
g93
ssg74
g3403
sg67
(lp3415
S':'
asbag60
(g81
g62
NtRp3416
(dp3417
g65
(dp3418
sg74
g3403
sg67
(lp3419
g60
(g61
g62
NtRp3420
(dp3421
g65
(dp3422
g73
I5
ssg74
g3416
sg67
(lp3423
g60
(g69
g62
NtRp3424
(dp3425
g65
(dp3426
g73
I4
ssg74
Nsg67
(lp3427
sbasbasbasbag60
(g76
g62
NtRp3428
(dp3429
g65
(dp3430
sg74
g3040
sg67
(lp3431
g60
(g81
g62
NtRp3432
(dp3433
g65
(dp3434
g85
g86
ssg74
g3428
sg67
(lp3435
S'headers'
p3436
asbag60
(g81
g62
NtRp3437
(dp3438
g65
(dp3439
g92
g93
ssg74
g3428
sg67
(lp3440
S':'
asbag60
(g81
g62
NtRp3441
(dp3442
g65
(dp3443
sg74
g3428
sg67
(lp3444
g60
(g61
g62
NtRp3445
(dp3446
g65
(dp3447
g73
I5
ssg74
g3441
sg67
(lp3448
g60
(g69
g62
NtRp3449
(dp3450
g65
(dp3451
g73
I4
ssg74
Nsg67
(lp3452
g60
(g76
g62
NtRp3453
(dp3454
g65
(dp3455
sg74
g3449
sg67
(lp3456
g60
(g81
g62
NtRp3457
(dp3458
g65
(dp3459
g85
g86
ssg74
g3453
sg67
(lp3460
S'Cache-Control'
p3461
asbag60
(g81
g62
NtRp3462
(dp3463
g65
(dp3464
g92
g93
ssg74
g3453
sg67
(lp3465
S':'
asbag60
(g81
g62
NtRp3466
(dp3467
g65
(dp3468
sg74
g3453
sg67
(lp3469
g60
(g61
g62
NtRp3470
(dp3471
g65
(dp3472
g73
I4
ssg74
g3466
sg67
(lp3473
S'no-store, no-cache, must-revalidate, post-check=0, pre-check=0'
p3474
asbasbasbag60
(g76
g62
NtRp3475
(dp3476
g65
(dp3477
sg74
g3449
sg67
(lp3478
g60
(g81
g62
NtRp3479
(dp3480
g65
(dp3481
g85
g86
ssg74
g3475
sg67
(lp3482
S'Content-Type'
p3483
asbag60
(g81
g62
NtRp3484
(dp3485
g65
(dp3486
g92
g93
ssg74
g3475
sg67
(lp3487
S':'
asbag60
(g81
g62
NtRp3488
(dp3489
g65
(dp3490
sg74
g3475
sg67
(lp3491
g60
(g61
g62
NtRp3492
(dp3493
g65
(dp3494
g73
I4
ssg74
g3488
sg67
(lp3495
S'text/html; charset=utf-8'
p3496
asbasbasbag60
(g76
g62
NtRp3497
(dp3498
g65
(dp3499
sg74
g3449
sg67
(lp3500
g60
(g81
g62
NtRp3501
(dp3502
g65
(dp3503
g85
g86
ssg74
g3497
sg67
(lp3504
S'Expires'
p3505
asbag60
(g81
g62
NtRp3506
(dp3507
g65
(dp3508
g92
g93
ssg74
g3497
sg67
(lp3509
S':'
asbag60
(g81
g62
NtRp3510
(dp3511
g65
(dp3512
sg74
g3497
sg67
(lp3513
g60
(g61
g62
NtRp3514
(dp3515
g65
(dp3516
g73
I4
ssg74
g3510
sg67
(lp3517
S'Sun, 18 Mar 2012 21:02:56 GMT'
p3518
asbasbasbag60
(g76
g62
NtRp3519
(dp3520
g65
(dp3521
sg74
g3449
sg67
(lp3522
g60
(g81
g62
NtRp3523
(dp3524
g65
(dp3525
g85
g86
ssg74
g3519
sg67
(lp3526
S'Pragma'
p3527
asbag60
(g81
g62
NtRp3528
(dp3529
g65
(dp3530
g92
g93
ssg74
g3519
sg67
(lp3531
S':'
asbag60
(g81
g62
NtRp3532
(dp3533
g65
(dp3534
sg74
g3519
sg67
(lp3535
g60
(g61
g62
NtRp3536
(dp3537
g65
(dp3538
g73
I4
ssg74
g3532
sg67
(lp3539
S'no-cache'
p3540
asbasbasbag60
(g76
g62
NtRp3541
(dp3542
g65
(dp3543
sg74
g3449
sg67
(lp3544
g60
(g81
g62
NtRp3545
(dp3546
g65
(dp3547
g85
g86
ssg74
g3541
sg67
(lp3548
S'X-Powered-By'
p3549
asbag60
(g81
g62
NtRp3550
(dp3551
g65
(dp3552
g92
g93
ssg74
g3541
sg67
(lp3553
S':'
asbag60
(g81
g62
NtRp3554
(dp3555
g65
(dp3556
sg74
g3541
sg67
(lp3557
g60
(g61
g62
NtRp3558
(dp3559
g65
(dp3560
g73
I4
ssg74
g3554
sg67
(lp3561
S'web2py'
p3562
asbasbasbasbasbasbasbag60
(g76
g62
NtRp3563
(dp3564
g65
(dp3565
sg74
g3040
sg67
(lp3566
g60
(g81
g62
NtRp3567
(dp3568
g65
(dp3569
g85
g86
ssg74
g3563
sg67
(lp3570
S'menu'
p3571
asbag60
(g81
g62
NtRp3572
(dp3573
g65
(dp3574
g92
g93
ssg74
g3563
sg67
(lp3575
S':'
asbag60
(g81
g62
NtRp3576
(dp3577
g65
(dp3578
sg74
g3563
sg67
(lp3579
g60
(g61
g62
NtRp3580
(dp3581
g65
(dp3582
g73
I5
ssg74
g3576
sg67
(lp3583
g60
(g69
g62
NtRp3584
(dp3585
g65
(dp3586
g73
I4
ssg74
Nsg67
(lp3587
g60
(g76
g62
NtRp3588
(dp3589
g65
(dp3590
sg74
g3584
sg67
(lp3591
g60
(g81
g62
NtRp3592
(dp3593
g65
(dp3594
sg74
g3588
sg67
(lp3595
g60
(g61
g62
NtRp3596
(dp3597
g65
(dp3598
g73
I4
ssg74
g3592
sg67
(lp3599
g60
(g69
g62
NtRp3600
(dp3601
g65
(dp3602
g73
I3
ssg74
Nsg67
(lp3603
g60
(g76
g62
NtRp3604
(dp3605
g65
(dp3606
sg74
g3600
sg67
(lp3607
g60
(g81
g62
NtRp3608
(dp3609
g65
(dp3610
sg74
g3604
sg67
(lp3611
g60
(g61
g62
NtRp3612
(dp3613
g65
(dp3614
g73
I3
ssg74
g3608
sg67
(lp3615
cgluon.languages
lazyT_unpickle
p3616
(S's\x04\x00\x00\x00Site'
tRp3617
asbasbasbag60
(g76
g62
NtRp3618
(dp3619
g65
(dp3620
sg74
g3600
sg67
(lp3621
g60
(g81
g62
NtRp3622
(dp3623
g65
(dp3624
sg74
g3618
sg67
(lp3625
g60
(g61
g62
NtRp3626
(dp3627
g65
(dp3628
g73
I3
ssg74
g3622
sg67
(lp3629
g103
asbasbasbag60
(g76
g62
NtRp3630
(dp3631
g65
(dp3632
sg74
g3600
sg67
(lp3633
g60
(g81
g62
NtRp3634
(dp3635
g65
(dp3636
sg74
g3630
sg67
(lp3637
g60
(g61
g62
NtRp3638
(dp3639
g65
(dp3640
g73
I3
ssg74
g3634
sg67
(lp3641
S'/admin/default/site'
p3642
asbasbasbasbasbasbasbag60
(g76
g62
NtRp3643
(dp3644
g65
(dp3645
sg74
g3584
sg67
(lp3646
g60
(g81
g62
NtRp3647
(dp3648
g65
(dp3649
sg74
g3643
sg67
(lp3650
g60
(g61
g62
NtRp3651
(dp3652
g65
(dp3653
g73
I4
ssg74
g3647
sg67
(lp3654
g60
(g69
g62
NtRp3655
(dp3656
g65
(dp3657
g73
I3
ssg74
Nsg67
(lp3658
g60
(g76
g62
NtRp3659
(dp3660
g65
(dp3661
sg74
g3655
sg67
(lp3662
g60
(g81
g62
NtRp3663
(dp3664
g65
(dp3665
sg74
g3659
sg67
(lp3666
g60
(g61
g62
NtRp3667
(dp3668
g65
(dp3669
g73
I3
ssg74
g3663
sg67
(lp3670
g3616
(S's\x06\x00\x00\x00Logout'
tRp3671
asbasbasbag60
(g76
g62
NtRp3672
(dp3673
g65
(dp3674
sg74
g3655
sg67
(lp3675
g60
(g81
g62
NtRp3676
(dp3677
g65
(dp3678
sg74
g3672
sg67
(lp3679
g60
(g61
g62
NtRp3680
(dp3681
g65
(dp3682
g73
I3
ssg74
g3676
sg67
(lp3683
g103
asbasbasbag60
(g76
g62
NtRp3684
(dp3685
g65
(dp3686
sg74
g3655
sg67
(lp3687
g60
(g81
g62
NtRp3688
(dp3689
g65
(dp3690
sg74
g3684
sg67
(lp3691
g60
(g61
g62
NtRp3692
(dp3693
g65
(dp3694
g73
I3
ssg74
g3688
sg67
(lp3695
S'/admin/default/logout'
p3696
asbasbasbasbasbasbasbag60
(g76
g62
NtRp3697
(dp3698
g65
(dp3699
sg74
g3584
sg67
(lp3700
g60
(g81
g62
NtRp3701
(dp3702
g65
(dp3703
sg74
g3697
sg67
(lp3704
g60
(g61
g62
NtRp3705
(dp3706
g65
(dp3707
g73
I4
ssg74
g3701
sg67
(lp3708
g60
(g69
g62
NtRp3709
(dp3710
g65
(dp3711
g73
I3
ssg74
Nsg67
(lp3712
g60
(g76
g62
NtRp3713
(dp3714
g65
(dp3715
sg74
g3709
sg67
(lp3716
g60
(g81
g62
NtRp3717
(dp3718
g65
(dp3719
sg74
g3713
sg67
(lp3720
g60
(g61
g62
NtRp3721
(dp3722
g65
(dp3723
g73
I3
ssg74
g3717
sg67
(lp3724
g3616
(S's\x05\x00\x00\x00Debug'
tRp3725
asbasbasbag60
(g76
g62
NtRp3726
(dp3727
g65
(dp3728
sg74
g3709
sg67
(lp3729
g60
(g81
g62
NtRp3730
(dp3731
g65
(dp3732
sg74
g3726
sg67
(lp3733
g60
(g61
g62
NtRp3734
(dp3735
g65
(dp3736
g73
I3
ssg74
g3730
sg67
(lp3737
g103
asbasbasbag60
(g76
g62
NtRp3738
(dp3739
g65
(dp3740
sg74
g3709
sg67
(lp3741
g60
(g81
g62
NtRp3742
(dp3743
g65
(dp3744
sg74
g3738
sg67
(lp3745
g60
(g61
g62
NtRp3746
(dp3747
g65
(dp3748
g73
I3
ssg74
g3742
sg67
(lp3749
S'/admin/debug/interact'
p3750
asbasbasbasbasbasbasbag60
(g76
g62
NtRp3751
(dp3752
g65
(dp3753
sg74
g3584
sg67
(lp3754
g60
(g81
g62
NtRp3755
(dp3756
g65
(dp3757
sg74
g3751
sg67
(lp3758
g60
(g61
g62
NtRp3759
(dp3760
g65
(dp3761
g73
I4
ssg74
g3755
sg67
(lp3762
g60
(g69
g62
NtRp3763
(dp3764
g65
(dp3765
g73
I3
ssg74
Nsg67
(lp3766
g60
(g76
g62
NtRp3767
(dp3768
g65
(dp3769
sg74
g3763
sg67
(lp3770
g60
(g81
g62
NtRp3771
(dp3772
g65
(dp3773
sg74
g3767
sg67
(lp3774
g60
(g61
g62
NtRp3775
(dp3776
g65
(dp3777
g73
I3
ssg74
g3771
sg67
(lp3778
g3616
(S's\x04\x00\x00\x00Help'
tRp3779
asbasbasbag60
(g76
g62
NtRp3780
(dp3781
g65
(dp3782
sg74
g3763
sg67
(lp3783
g60
(g81
g62
NtRp3784
(dp3785
g65
(dp3786
sg74
g3780
sg67
(lp3787
g60
(g61
g62
NtRp3788
(dp3789
g65
(dp3790
g73
I3
ssg74
g3784
sg67
(lp3791
g103
asbasbasbag60
(g76
g62
NtRp3792
(dp3793
g65
(dp3794
sg74
g3763
sg67
(lp3795
g60
(g81
g62
NtRp3796
(dp3797
g65
(dp3798
sg74
g3792
sg67
(lp3799
g60
(g61
g62
NtRp3800
(dp3801
g65
(dp3802
g73
I3
ssg74
g3796
sg67
(lp3803
S'http://web2py.com/examples'
p3804
asbasbasbasbasbasbasbasbasbasbasbag60
(g76
g62
NtRp3805
(dp3806
g65
(dp3807
sg74
g3040
sg67
(lp3808
g60
(g81
g62
NtRp3809
(dp3810
g65
(dp3811
g85
g86
ssg74
g3805
sg67
(lp3812
S'meta'
p3813
asbag60
(g81
g62
NtRp3814
(dp3815
g65
(dp3816
g92
g93
ssg74
g3805
sg67
(lp3817
S':'
asbag60
(g81
g62
NtRp3818
(dp3819
g65
(dp3820
sg74
g3805
sg67
(lp3821
g60
(g61
g62
NtRp3822
(dp3823
g65
(dp3824
g73
I5
ssg74
g3818
sg67
(lp3825
g60
(g69
g62
NtRp3826
(dp3827
g65
(dp3828
g73
I4
ssg74
Nsg67
(lp3829
sbasbasbasbag60
(g76
g62
NtRp3830
(dp3831
g65
(dp3832
sg74
g3040
sg67
(lp3833
g60
(g81
g62
NtRp3834
(dp3835
g65
(dp3836
g85
g86
ssg74
g3830
sg67
(lp3837
S'postprocessing'
p3838
asbag60
(g81
g62
NtRp3839
(dp3840
g65
(dp3841
g92
g93
ssg74
g3830
sg67
(lp3842
S':'
asbag60
(g81
g62
NtRp3843
(dp3844
g65
(dp3845
sg74
g3830
sg67
(lp3846
g60
(g61
g62
NtRp3847
(dp3848
g65
(dp3849
g73
I5
ssg74
g3843
sg67
(lp3850
g60
(g69
g62
NtRp3851
(dp3852
g65
(dp3853
g73
I4
ssg74
Nsg67
(lp3854
sbasbasbasbag60
(g76
g62
NtRp3855
(dp3856
g65
(dp3857
sg74
g3040
sg67
(lp3858
g60
(g81
g62
NtRp3859
(dp3860
g65
(dp3861
g85
g86
ssg74
g3855
sg67
(lp3862
S'session_file'
p3863
asbag60
(g81
g62
NtRp3864
(dp3865
g65
(dp3866
g92
g93
ssg74
g3855
sg67
(lp3867
S':'
asbag60
(g81
g62
NtRp3868
(dp3869
g65
(dp3870
sg74
g3855
sg67
(lp3871
g60
(g61
g62
NtRp3872
(dp3873
g65
(dp3874
g73
I5
ssg74
g3868
sg67
(lp3875
S"<open file '/Users/udimilo/Documents/web2py/applications/admin/sessions/127.0.0.1-52792a20-d856-4035-8d0f-026eefd87da3', mode 'rb+' at 0x9f71650>"
p3876
asbasbasbag60
(g76
g62
NtRp3877
(dp3878
g65
(dp3879
sg74
g3040
sg67
(lp3880
g60
(g81
g62
NtRp3881
(dp3882
g65
(dp3883
g85
g86
ssg74
g3877
sg67
(lp3884
S'session_filename'
p3885
asbag60
(g81
g62
NtRp3886
(dp3887
g65
(dp3888
g92
g93
ssg74
g3877
sg67
(lp3889
S':'
asbag60
(g81
g62
NtRp3890
(dp3891
g65
(dp3892
sg74
g3877
sg67
(lp3893
g60
(g61
g62
NtRp3894
(dp3895
g65
(dp3896
g73
I5
ssg74
g3890
sg67
(lp3897
S'/Users/udimilo/Documents/web2py/applications/admin/sessions/127.0.0.1-52792a20-d856-4035-8d0f-026eefd87da3'
p3898
asbasbasbag60
(g76
g62
NtRp3899
(dp3900
g65
(dp3901
sg74
g3040
sg67
(lp3902
g60
(g81
g62
NtRp3903
(dp3904
g65
(dp3905
g85
g86
ssg74
g3899
sg67
(lp3906
S'session_id'
p3907
asbag60
(g81
g62
NtRp3908
(dp3909
g65
(dp3910
g92
g93
ssg74
g3899
sg67
(lp3911
S':'
asbag60
(g81
g62
NtRp3912
(dp3913
g65
(dp3914
sg74
g3899
sg67
(lp3915
g60
(g61
g62
NtRp3916
(dp3917
g65
(dp3918
g73
I5
ssg74
g3912
sg67
(lp3919
S'127.0.0.1-52792a20-d856-4035-8d0f-026eefd87da3'
p3920
asbasbasbag60
(g76
g62
NtRp3921
(dp3922
g65
(dp3923
sg74
g3040
sg67
(lp3924
g60
(g81
g62
NtRp3925
(dp3926
g65
(dp3927
g85
g86
ssg74
g3921
sg67
(lp3928
S'session_id_name'
p3929
asbag60
(g81
g62
NtRp3930
(dp3931
g65
(dp3932
g92
g93
ssg74
g3921
sg67
(lp3933
S':'
asbag60
(g81
g62
NtRp3934
(dp3935
g65
(dp3936
sg74
g3921
sg67
(lp3937
g60
(g61
g62
NtRp3938
(dp3939
g65
(dp3940
g73
I5
ssg74
g3934
sg67
(lp3941
g3097
asbasbasbag60
(g76
g62
NtRp3942
(dp3943
g65
(dp3944
sg74
g3040
sg67
(lp3945
g60
(g81
g62
NtRp3946
(dp3947
g65
(dp3948
g85
g86
ssg74
g3942
sg67
(lp3949
S'session_locked'
p3950
asbag60
(g81
g62
NtRp3951
(dp3952
g65
(dp3953
g92
g93
ssg74
g3942
sg67
(lp3954
S':'
asbag60
(g81
g62
NtRp3955
(dp3956
g65
(dp3957
sg74
g3942
sg67
(lp3958
g60
(g61
g62
NtRp3959
(dp3960
g65
(dp3961
g73
I5
ssg74
g3955
sg67
(lp3962
g1498
asbasbasbag60
(g76
g62
NtRp3963
(dp3964
g65
(dp3965
sg74
g3040
sg67
(lp3966
g60
(g81
g62
NtRp3967
(dp3968
g65
(dp3969
g85
g86
ssg74
g3963
sg67
(lp3970
S'session_new'
p3971
asbag60
(g81
g62
NtRp3972
(dp3973
g65
(dp3974
g92
g93
ssg74
g3963
sg67
(lp3975
S':'
asbag60
(g81
g62
NtRp3976
(dp3977
g65
(dp3978
sg74
g3963
sg67
(lp3979
g60
(g61
g62
NtRp3980
(dp3981
g65
(dp3982
g73
I5
ssg74
g3976
sg67
(lp3983
g103
asbasbasbag60
(g76
g62
NtRp3984
(dp3985
g65
(dp3986
sg74
g3040
sg67
(lp3987
g60
(g81
g62
NtRp3988
(dp3989
g65
(dp3990
g85
g86
ssg74
g3984
sg67
(lp3991
S'status'
p3992
asbag60
(g81
g62
NtRp3993
(dp3994
g65
(dp3995
g92
g93
ssg74
g3984
sg67
(lp3996
S':'
asbag60
(g81
g62
NtRp3997
(dp3998
g65
(dp3999
sg74
g3984
sg67
(lp4000
g60
(g61
g62
NtRp4001
(dp4002
g65
(dp4003
g73
I5
ssg74
g3997
sg67
(lp4004
S'200'
p4005
asbasbasbag60
(g76
g62
NtRp4006
(dp4007
g65
(dp4008
sg74
g3040
sg67
(lp4009
g60
(g81
g62
NtRp4010
(dp4011
g65
(dp4012
g85
g86
ssg74
g4006
sg67
(lp4013
S'subtitle'
p4014
asbag60
(g81
g62
NtRp4015
(dp4016
g65
(dp4017
g92
g93
ssg74
g4006
sg67
(lp4018
S':'
asbag60
(g81
g62
NtRp4019
(dp4020
g65
(dp4021
sg74
g4006
sg67
(lp4022
g60
(g61
g62
NtRp4023
(dp4024
g65
(dp4025
g73
I5
ssg74
g4019
sg67
(lp4026
S'admin'
p4027
asbasbasbag60
(g76
g62
NtRp4028
(dp4029
g65
(dp4030
sg74
g3040
sg67
(lp4031
g60
(g81
g62
NtRp4032
(dp4033
g65
(dp4034
g85
g86
ssg74
g4028
sg67
(lp4035
S'title'
p4036
asbag60
(g81
g62
NtRp4037
(dp4038
g65
(dp4039
g92
g93
ssg74
g4028
sg67
(lp4040
S':'
asbag60
(g81
g62
NtRp4041
(dp4042
g65
(dp4043
sg74
g4028
sg67
(lp4044
g60
(g61
g62
NtRp4045
(dp4046
g65
(dp4047
g73
I5
ssg74
g4041
sg67
(lp4048
S'reload_routes '
p4049
asbasbasbag60
(g76
g62
NtRp4050
(dp4051
g65
(dp4052
sg74
g3040
sg67
(lp4053
g60
(g81
g62
NtRp4054
(dp4055
g65
(dp4056
g85
g86
ssg74
g4050
sg67
(lp4057
g2162
asbag60
(g81
g62
NtRp4058
(dp4059
g65
(dp4060
g92
g93
ssg74
g4050
sg67
(lp4061
S':'
asbag60
(g81
g62
NtRp4062
(dp4063
g65
(dp4064
sg74
g4050
sg67
(lp4065
g60
(g61
g62
NtRp4066
(dp4067
g65
(dp4068
g73
I5
ssg74
g4062
sg67
(lp4069
g2175
asbasbasbag60
(g76
g62
NtRp4070
(dp4071
g65
(dp4072
sg74
g3040
sg67
(lp4073
g60
(g81
g62
NtRp4074
(dp4075
g65
(dp4076
g85
g86
ssg74
g4070
sg67
(lp4077
S'view'
p4078
asbag60
(g81
g62
NtRp4079
(dp4080
g65
(dp4081
g92
g93
ssg74
g4070
sg67
(lp4082
S':'
asbag60
(g81
g62
NtRp4083
(dp4084
g65
(dp4085
sg74
g4070
sg67
(lp4086
g60
(g61
g62
NtRp4087
(dp4088
g65
(dp4089
g73
I5
ssg74
g4083
sg67
(lp4090
S'default/reload_routes.html'
p4091
asbasbasbasbasbsS'locals'
p4092
(dp4093
S'e'
S'SyntaxError(\'invalid syntax\', (\'<string>\', 48, 5.../udi0312/default/(?P<any>.*)\', \'/\\\\g<any>\'),\\n"))'
p4094
sS'app'
p4095
S'None'
p4096
sS'rdict'
p4097
S'None'
p4098
sS'symbols'
p4099
S"{'__builtins__': {'ArithmeticError': <type 'exceptions.ArithmeticError'>, 'AssertionError': <type 'exceptions.AssertionError'>, 'AttributeError': <type 'exceptions.AttributeError'>, 'BaseException': <type 'exceptions.BaseException'>, 'DeprecationWarning': <type 'exceptions.DeprecationWarning'>, 'EOFError': <type 'exceptions.EOFError'>, 'Ellipsis': Ellipsis, 'EnvironmentError': <type 'exceptions.EnvironmentError'>, 'Exception': <type 'exceptions.Exception'>, 'False': False, ...}}"
p4100
sS'routes'
p4101
S"'routes.py'"
p4102
sg358
S"'/Users/udimilo/Documents/web2py/routes.py'"
p4103
sS'data'
p4104
S'"#!/usr/bin/python\\n# -*- coding: utf-8 -*-\\n\\n# def...n__\':\\n    import doctest\\n    doctest.testmod()\\n\\n\\n"'
p4105
sssS'traceback'
p4106
S'Traceback (most recent call last):\n  File "/users/udimilo/Documents/web2py/gluon/restricted.py", line 205, in restricted\n    exec ccode in environment\n  File "/Users/udimilo/Documents/web2py/applications/admin/controllers/default.py", line 1352, in <module>\n  File "/users/udimilo/Documents/web2py/gluon/globals.py", line 173, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/udimilo/Documents/web2py/applications/admin/controllers/default.py", line 1347, in reload_routes\n    gluon.rewrite.load()\n  File "/users/udimilo/Documents/web2py/gluon/rewrite.py", line 267, in load\n    raise e\n  File "<string>", line 48\n    (r\'.*/udi0312/default/(?P<any>.*)\', \'/\\g<any>\'),\n    ^\nSyntaxError: invalid syntax\n'
p4107
s.