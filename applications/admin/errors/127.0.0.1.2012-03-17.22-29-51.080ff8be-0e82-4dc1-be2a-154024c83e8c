(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> 'tuple' object is not callable"
p3
sS'layer'
p4
S'/Users/udimilo/Documents/web2py/applications/admin/controllers/default.py'
p5
sS'code'
p6
S'# coding: utf8\n\nEXPERIMENTAL_STUFF = True\n\nif EXPERIMENTAL_STUFF:\n    is_mobile = request.user_agent().is_mobile\n    if is_mobile:\n        response.view = response.view.replace(\'default/\',\'default.mobile/\')\n        response.menu = []\n\nfrom gluon.admin import *\nfrom gluon.fileutils import abspath, read_file, write_file\nfrom glob import glob\nimport shutil\nimport platform\n\nif DEMO_MODE and request.function in [\'change_password\',\'pack\',\'pack_plugin\',\'upgrade_web2py\',\'uninstall\',\'cleanup\',\'compile_app\',\'remove_compiled_app\',\'delete\',\'delete_plugin\',\'create_file\',\'upload_file\',\'update_languages\',\'reload_routes\']:\n    session.flash = T(\'disabled in demo mode\')\n    redirect(URL(\'site\'))\n\nif not is_manager() and request.function in [\'change_password\',\'upgrade_web2py\']:\n    session.flash = T(\'disabled in multi user mode\')\n    redirect(URL(\'site\'))\n\nif FILTER_APPS and request.args(0) and not request.args(0) in FILTER_APPS:\n    session.flash = T(\'disabled in demo mode\')\n    redirect(URL(\'site\'))\n\ndef safe_open(a,b):\n    if DEMO_MODE and \'w\' in b:\n        class tmp:\n            def write(self,data): pass\n        return tmp()\n    return open(a,b)\n\ndef safe_read(a, b=\'r\'):\n    safe_file = safe_open(a, b)\n    try:\n        return safe_file.read()\n    finally:\n        safe_file.close()\n\ndef safe_write(a, value, b=\'w\'):\n    safe_file = safe_open(a, b)\n    try:\n        safe_file.write(value)\n    finally:\n        safe_file.close()\n\ndef get_app(name=None):\n    app = name or request.args(0)\n    if app and (not MULTI_USER_MODE or db(db.app.name==app)(db.app.owner==auth.user.id).count()):\n        return app\n    session.flash = \'App does not exist or your are not authorized\'\n    redirect(URL(\'site\'))\n\ndef index():\n    """ Index handler """\n\n    send = request.vars.send\n    if DEMO_MODE:\n        session.authorized = True\n        session.last_time = t0\n    if not send:\n        send = URL(\'site\')\n    if session.authorized:\n        redirect(send)\n    elif request.vars.password:\n        if verify_password(request.vars.password):\n            session.authorized = True\n            login_record(True)\n\n            if CHECK_VERSION:\n                session.check_version = True\n            else:\n                session.check_version = False\n\n            session.last_time = t0\n            if isinstance(send, list):  # ## why does this happen?\n                send = str(send[0])\n\n            redirect(send)\n        else:\n            times_denied = login_record(False)\n            if times_denied >= allowed_number_of_attempts:\n                response.flash = \\\n                    T(\'admin disabled because too many invalid login attempts\')\n            elif times_denied == allowed_number_of_attempts - 1:\n                response.flash = \\\n                    T(\'You have one more login attempt before you are locked out\')\n            else:\n                response.flash = T(\'invalid password.\')\n    return dict(send=send)\n\n\ndef check_version():\n    """ Checks if web2py is up to date """\n\n    session.forget()\n    session._unlock(response)\n\n    new_version, version_number = check_new_version(request.env.web2py_version,\n                                    WEB2PY_VERSION_URL)\n\n    if new_version == -1:\n        return A(T(\'Unable to check for upgrades\'), _href=WEB2PY_URL)\n    elif new_version != True:\n        return A(T(\'web2py is up to date\'), _href=WEB2PY_URL)\n    elif platform.system().lower() in (\'windows\',\'win32\',\'win64\') and os.path.exists("web2py.exe"):\n        return SPAN(\'You should upgrade to version %s\' % version_number)\n    else:\n        return sp_button(URL(\'upgrade_web2py\'), T(\'upgrade now\')) \\\n          + XML(\' <strong class="upgrade_version">%s</strong>\' % version_number)\n\n\ndef logout():\n    """ Logout handler """\n    session.authorized = None\n    if MULTI_USER_MODE:\n        redirect(URL(\'user/logout\'))\n    redirect(URL(\'index\'))\n\n\ndef change_password():\n\n    if session.pam_user:\n        session.flash = T(\'PAM authenticated user, cannot change password here\')\n        redirect(URL(\'site\'))\n    form=SQLFORM.factory(Field(\'current_admin_password\',\'password\'),\n                         Field(\'new_admin_password\',\'password\',requires=IS_STRONG()),\n                         Field(\'new_admin_password_again\',\'password\'))\n    if form.accepts(request.vars):\n        if not verify_password(request.vars.current_admin_password):\n            form.errors.current_admin_password = T(\'invalid password\')\n        elif form.vars.new_admin_password != form.vars.new_admin_password_again:\n            form.errors.new_admin_password_again = T(\'no match\')\n        else:\n            path = abspath(\'parameters_%s.py\' % request.env.server_port)\n            safe_write(path, \'password="%s"\' % CRYPT()(request.vars.new_admin_password)[0])\n            session.flash = T(\'password changed\')\n            redirect(URL(\'site\'))\n    return dict(form=form)\n\ndef site():\n    """ Site handler """\n\n    myversion = request.env.web2py_version\n\n    # Shortcut to make the elif statements more legible\n    file_or_appurl = \'file\' in request.vars or \'appurl\' in request.vars\n\n    if DEMO_MODE:\n        pass\n\n    elif request.vars.filename and not \'file\' in request.vars:\n        # create a new application\n        appname = cleanpath(request.vars.filename).replace(\'.\', \'_\')\n        if app_create(appname, request):\n            if MULTI_USER_MODE:\n                db.app.insert(name=appname,owner=auth.user.id)\n            session.flash = T(\'new application "%s" created\', appname)\n            redirect(URL(\'design\',args=appname))\n        else:\n            session.flash = \\\n                T(\'unable to create application "%s" (it may exist already)\', request.vars.filename)\n        redirect(URL(r=request))\n\n    elif file_or_appurl and not request.vars.filename:\n        # can\'t do anything without an app name\n        msg = \'you must specify a name for the uploaded application\'\n        response.flash = T(msg)\n\n    elif file_or_appurl and request.vars.filename:\n        # fetch an application via URL or file upload\n        f = None\n        if request.vars.appurl is not \'\':\n            try:\n                f = urllib.urlopen(request.vars.appurl)\n            except Exception, e:\n                session.flash = DIV(T(\'Unable to download app because:\'),PRE(str(e)))\n                redirect(URL(r=request))\n            fname = request.vars.appurl\n        elif request.vars.file is not \'\':\n            f = request.vars.file.file\n            fname = request.vars.file.filename\n\n        if f:\n            appname = cleanpath(request.vars.filename).replace(\'.\', \'_\')\n            installed = app_install(appname, f, request, fname,\n                                    overwrite=request.vars.overwrite_check)\n        if f and installed:\n            msg = \'application %(appname)s installed with md5sum: %(digest)s\'\n            session.flash = T(msg, dict(appname=appname,\n                                        digest=md5_hash(installed)))\n        elif f and request.vars.overwrite_check:\n            msg = \'unable to install application "%(appname)s"\'\n            session.flash = T(msg, dict(appname=request.vars.filename))\n\n        else:\n            msg = \'unable to install application "%(appname)s"\'\n            session.flash = T(msg, dict(appname=request.vars.filename))\n\n        redirect(URL(r=request))\n\n    regex = re.compile(\'^\\w+$\')\n\n    if is_manager():\n        apps = [f for f in os.listdir(apath(r=request)) if regex.match(f)]\n    else:\n        apps = [f.name for f in db(db.app.owner==auth.user_id).select()]\n\n    if FILTER_APPS:\n        apps = [f for f in apps if f in FILTER_APPS]\n\n    apps = sorted(apps,lambda a,b:cmp(a.upper(),b.upper()))\n\n    return dict(app=None, apps=apps, myversion=myversion)\n\n\ndef pack():\n    app = get_app()\n\n    if len(request.args) == 1:\n        fname = \'web2py.app.%s.w2p\' % app\n        filename = app_pack(app, request)\n    else:\n        fname = \'web2py.app.%s.compiled.w2p\' % app\n        filename = app_pack_compiled(app, request)\n\n    if filename:\n        response.headers[\'Content-Type\'] = \'application/w2p\'\n        disposition = \'attachment; filename=%s\' % fname\n        response.headers[\'Content-Disposition\'] = disposition\n        return safe_read(filename, \'rb\')\n    else:\n        session.flash = T(\'internal error\')\n        redirect(URL(\'site\'))\n\ndef pack_plugin():\n    app = get_app()\n    if len(request.args) == 2:\n        fname = \'web2py.plugin.%s.w2p\' % request.args[1]\n        filename = plugin_pack(app, request.args[1], request)\n    if filename:\n        response.headers[\'Content-Type\'] = \'application/w2p\'\n        disposition = \'attachment; filename=%s\' % fname\n        response.headers[\'Content-Disposition\'] = disposition\n        return safe_read(filename, \'rb\')\n    else:\n        session.flash = T(\'internal error\')\n        redirect(URL(\'plugin\',args=request.args))\n\ndef upgrade_web2py():\n    if \'upgrade\' in request.vars:\n        (success, error) = upgrade(request)\n        if success:\n            session.flash = T(\'web2py upgraded; please restart it\')\n        else:\n            session.flash = T(\'unable to upgrade because "%s"\', error)\n        redirect(URL(\'site\'))\n    elif \'noupgrade\' in request.vars:\n        redirect(URL(\'site\'))\n    return dict()\n\ndef uninstall():\n    app = get_app()\n    if \'delete\' in request.vars:\n        if MULTI_USER_MODE:\n            if is_manager() and db(db.app.name==app).delete():\n                pass\n            elif db(db.app.name==app)(db.app.owner==auth.user.id).delete():\n                pass\n            else:\n                session.flash = T(\'no permission to uninstall "%s"\', app)\n                redirect(URL(\'site\'))\n        if app_uninstall(app, request):\n            session.flash = T(\'application "%s" uninstalled\', app)\n        else:\n            session.flash = T(\'unable to uninstall "%s"\', app)\n        redirect(URL(\'site\'))\n    elif \'nodelete\' in request.vars:\n        redirect(URL(\'site\'))\n    return dict(app=app)\n\n\ndef cleanup():\n    app = get_app()\n    clean = app_cleanup(app, request)\n    if not clean:\n        session.flash = T("some files could not be removed")\n    else:\n        session.flash = T(\'cache, errors and sessions cleaned\')\n\n    redirect(URL(\'site\'))\n\n\ndef compile_app():\n    app = get_app()\n    c = app_compile(app, request)\n    if not c:\n        session.flash = T(\'application compiled\')\n    else:\n        session.flash = DIV(T(\'Cannot compile: there are errors in your app:\'),\n                              CODE(c))\n    redirect(URL(\'site\'))\n\n\ndef remove_compiled_app():\n    """ Remove the compiled application """\n    app = get_app()\n    remove_compiled_application(apath(app, r=request))\n    session.flash = T(\'compiled application removed\')\n    redirect(URL(\'site\'))\n\ndef delete():\n    """ Object delete handler """\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    sender = request.vars.sender\n\n    if isinstance(sender, list):  # ## fix a problem with Vista\n        sender = sender[0]\n\n    if \'nodelete\' in request.vars:\n        redirect(URL(sender))\n    elif \'delete\' in request.vars:\n        try:\n            os.unlink(apath(filename, r=request))\n            session.flash = T(\'file "%(filename)s" deleted\',\n                              dict(filename=filename))\n        except Exception:\n            session.flash = T(\'unable to delete file "%(filename)s"\',\n                              dict(filename=filename))\n        redirect(URL(sender))\n    return dict(filename=filename, sender=sender)\n\ndef enable():\n    app = get_app()\n    filename = os.path.join(apath(app, r=request),\'DISABLED\')\n    if os.path.exists(filename):\n        os.unlink(filename)\n        return SPAN(T(\'Disable\'),_style=\'color:green\')\n    else:\n        open(filename,\'wb\').write(time.ctime())\n        return SPAN(T(\'Enable\'),_style=\'color:red\')\n\ndef peek():\n    """ Visualize object code """\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    try:\n        data = safe_read(apath(filename, r=request)).replace(\'\\r\',\'\')\n    except IOError:\n        session.flash = T(\'file does not exist\')\n        redirect(URL(\'site\'))\n\n    extension = filename[filename.rfind(\'.\') + 1:].lower()\n\n    return dict(app=request.args[0],\n                filename=filename,\n                data=data,\n                extension=extension)\n\n\ndef test():\n    """ Execute controller tests """\n    app = get_app()\n    if len(request.args) > 1:\n        file = request.args[1]\n    else:\n        file = \'.*\\.py\'\n\n    controllers = listdir(apath(\'%s/controllers/\' % app, r=request), file + \'$\')\n\n    return dict(app=app, controllers=controllers)\n\ndef keepalive():\n    return \'\'\n\ndef search():\n    keywords=request.vars.keywords or \'\'\n    app = get_app()\n    def match(filename,keywords):\n        filename=os.path.join(apath(app, r=request),filename)\n        if keywords in read_file(filename,\'rb\'):\n            return True\n        return False\n    path = apath(request.args[0], r=request)\n    files1 = glob(os.path.join(path,\'*/*.py\'))\n    files2 = glob(os.path.join(path,\'*/*.html\'))\n    files3 = glob(os.path.join(path,\'*/*/*.html\'))\n    files=[x[len(path)+1:].replace(\'\\\\\',\'/\') for x in files1+files2+files3 if match(x,keywords)]\n    return response.json({\'files\':files})\n\ndef edit():\n    """ File edit handler """\n    # Load json only if it is ajax edited...\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    # Try to discover the file type\n    if filename[-3:] == \'.py\':\n        filetype = \'python\'\n    elif filename[-5:] == \'.html\':\n        filetype = \'html\'\n    elif filename[-5:] == \'.load\':\n        filetype = \'html\'\n    elif filename[-4:] == \'.css\':\n        filetype = \'css\'\n    elif filename[-3:] == \'.js\':\n        filetype = \'js\'\n    else:\n        filetype = \'html\'\n\n    # ## check if file is not there\n\n    path = apath(filename, r=request)\n\n    if (\'revert\' in request.vars) and os.path.exists(path + \'.bak\'):\n        try:\n            data = safe_read(path + \'.bak\')\n            data1 = safe_read(path)\n        except IOError:\n            session.flash = T(\'Invalid action\')\n            if \'from_ajax\' in request.vars:\n                 return response.json({\'error\': str(T(\'Invalid action\'))})\n            else:\n                redirect(URL(\'site\'))\n\n        safe_write(path, data)\n        file_hash = md5_hash(data)\n        saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n        safe_write(path + \'.bak\', data1)\n        response.flash = T(\'file "%s" of %s restored\', (filename, saved_on))\n    else:\n        try:\n            data = safe_read(path)\n        except IOError:\n            session.flash = T(\'Invalid action\')\n            if \'from_ajax\' in request.vars:\n                return response.json({\'error\': str(T(\'Invalid action\'))})\n            else:\n                redirect(URL(\'site\'))\n\n        file_hash = md5_hash(data)\n        saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n\n        if request.vars.file_hash and request.vars.file_hash != file_hash:\n            session.flash = T(\'file changed on disk\')\n            data = request.vars.data.replace(\'\\r\\n\', \'\\n\').strip() + \'\\n\'\n            safe_write(path + \'.1\', data)\n            if \'from_ajax\' in request.vars:\n                return response.json({\'error\': str(T(\'file changed on disk\')),\n                                      \'redirect\': URL(\'resolve\',\n                                                      args=request.args)})\n            else:\n                redirect(URL(\'resolve\', args=request.args))\n        elif request.vars.data:\n            safe_write(path + \'.bak\', data)\n            data = request.vars.data.replace(\'\\r\\n\', \'\\n\').strip() + \'\\n\'\n            safe_write(path, data)\n            file_hash = md5_hash(data)\n            saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n            response.flash = T(\'file saved on %s\', saved_on)\n\n    data_or_revert = (request.vars.data or request.vars.revert)\n\n    # Check compile errors\n    highlight = None\n    if filetype == \'python\' and request.vars.data:\n        import _ast\n        try:\n            code = request.vars.data.rstrip().replace(\'\\r\\n\',\'\\n\')+\'\\n\'\n            compile(code, path, "exec", _ast.PyCF_ONLY_AST)\n        except Exception, e:\n            start = sum([len(line)+1 for l, line\n                            in enumerate(request.vars.data.split("\\n"))\n                            if l < e.lineno-1])\n            if e.text and e.offset:\n                offset = e.offset - (len(e.text) - len(e.text.splitlines()[-1]))\n            else:\n                offset = 0\n            highlight = {\'start\': start, \'end\': start + offset + 1}\n            try:\n                ex_name = e.__class__.__name__\n            except:\n                ex_name = \'unknown exception!\'\n            response.flash = DIV(T(\'failed to compile file because:\'), BR(),\n                                 B(ex_name), T(\' at line %s\') % e.lineno,\n                                 offset and T(\' at char %s\') % offset or \'\',\n                                 PRE(str(e)))\n\n    if data_or_revert and request.args[1] == \'modules\':\n        # Lets try to reload the modules\n        try:\n            mopath = \'.\'.join(request.args[2:])[:-3]\n            exec \'import applications.%s.modules.%s\' % (request.args[0], mopath)\n            reload(sys.modules[\'applications.%s.modules.%s\'\n                    % (request.args[0], mopath)])\n        except Exception, e:\n            response.flash = DIV(T(\'failed to reload module because:\'),PRE(str(e)))\n\n    edit_controller = None\n    editviewlinks = None\n    view_link = None\n    if filetype == \'html\' and len(request.args) >= 3:\n        cfilename = os.path.join(request.args[0], \'controllers\',\n                                 request.args[2] + \'.py\')\n        if os.path.exists(apath(cfilename, r=request)):\n            edit_controller = URL(\'edit\', args=[cfilename])\n            view = request.args[3].replace(\'.html\',\'\')\n            view_link = URL(request.args[0],request.args[2],view)\n    elif filetype == \'python\' and request.args[1] == \'controllers\':\n        ## it\'s a controller file.\n        ## Create links to all of the associated view files.\n        app = get_app()\n        viewname = os.path.splitext(request.args[2])[0]\n        viewpath = os.path.join(app,\'views\',viewname)\n        aviewpath = apath(viewpath, r=request)\n        viewlist = []\n        if os.path.exists(aviewpath):\n            if os.path.isdir(aviewpath):\n                viewlist = glob(os.path.join(aviewpath,\'*.html\'))\n        elif os.path.exists(aviewpath+\'.html\'):\n            viewlist.append(aviewpath+\'.html\')\n        if len(viewlist):\n            editviewlinks = []\n            for v in viewlist:\n                vf = os.path.split(v)[-1]\n                vargs = "/".join([viewpath.replace(os.sep,"/"),vf])\n                editviewlinks.append(A(T(vf.split(".")[0]),\\\n                    _href=URL(\'edit\',args=[vargs])))\n\n    if len(request.args) > 2 and request.args[1] == \'controllers\':\n        controller = (request.args[2])[:-3]\n        functions = regex_expose.findall(data)\n    else:\n        (controller, functions) = (None, None)\n\n    if \'from_ajax\' in request.vars:\n        return response.json({\'file_hash\': file_hash, \'saved_on\': saved_on, \'functions\':functions, \'controller\': controller, \'application\': request.args[0], \'highlight\': highlight })\n    else:\n\n        editarea_preferences = {}\n        editarea_preferences[\'FONT_SIZE\'] = \'10\'\n        editarea_preferences[\'FULL_SCREEN\'] = \'false\'\n        editarea_preferences[\'ALLOW_TOGGLE\'] = \'true\'\n        editarea_preferences[\'REPLACE_TAB_BY_SPACES\'] = \'4\'\n        editarea_preferences[\'DISPLAY\'] = \'onload\'\n        for key in editarea_preferences:\n            if globals().has_key(key):\n                editarea_preferences[key]=globals()[key]\n        return dict(app=request.args[0],\n                    filename=filename,\n                    filetype=filetype,\n                    data=data,\n                    edit_controller=edit_controller,\n                    file_hash=file_hash,\n                    saved_on=saved_on,\n                    controller=controller,\n                    functions=functions,\n                    view_link=view_link,\n                    editarea_preferences=editarea_preferences,\n                    editviewlinks=editviewlinks)\n\ndef resolve():\n    """\n    """\n\n    filename = \'/\'.join(request.args)\n    # ## check if file is not there\n    path = apath(filename, r=request)\n    a = safe_read(path).split(\'\\n\')\n    try:\n        b = safe_read(path + \'.1\').split(\'\\n\')\n    except IOError:\n        session.flash = \'Other file, no longer there\'\n        redirect(URL(\'edit\', args=request.args))\n\n    d = difflib.ndiff(a, b)\n\n    def leading(line):\n        """  """\n\n        # TODO: we really need to comment this\n        z = \'\'\n        for (k, c) in enumerate(line):\n            if c == \' \':\n                z += \'&nbsp;\'\n            elif c == \' \\t\':\n                z += \'&nbsp;\'\n            elif k == 0 and c == \'?\':\n                pass\n            else:\n                break\n\n        return XML(z)\n\n    def getclass(item):\n        """ Determine item class """\n\n        if item[0] == \' \':\n            return \'normal\'\n        if item[0] == \'+\':\n            return \'plus\'\n        if item[0] == \'-\':\n            return \'minus\'\n\n    if request.vars:\n        c = \'\\n\'.join([item[2:].rstrip() for (i, item) in enumerate(d) if item[0] \\\n                           == \' \' or \'line%i\' % i in request.vars])\n        safe_write(path, c)\n        session.flash = \'files merged\'\n        redirect(URL(\'edit\', args=request.args))\n    else:\n        # Making the short circuit compatible with <= python2.4\n        gen_data = lambda index,item: not item[:1] in [\'+\',\'-\'] and "" \\\n                   or INPUT(_type=\'checkbox\',\n                            _name=\'line%i\' % index,\n                            value=item[0] == \'+\')\n\n        diff = TABLE(*[TR(TD(gen_data(i,item)),\n                          TD(item[0]),\n                          TD(leading(item[2:]),\n                          TT(item[2:].rstrip())), _class=getclass(item))\n                       for (i, item) in enumerate(d) if item[0] != \'?\'])\n\n    return dict(diff=diff, filename=filename)\n\n\ndef edit_language():\n    """ Edit language file """\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    from gluon.languages import read_dict, write_dict\n    strings = read_dict(apath(filename, r=request))\n    keys = sorted(strings.keys(),lambda x,y: cmp(x.lower(), y.lower()))\n    rows = []\n    rows.append(H2(T(\'Original/Translation\')))\n\n    for key in keys:\n        name = md5_hash(key)\n        if key==strings[key]:\n            _class=\'untranslated\'\n        else:\n            _class=\'translated\'\n        if len(key) <= 40:\n            elem = INPUT(_type=\'text\', _name=name,value=strings[key],\n                         _size=70,_class=_class)\n        else:\n            elem = TEXTAREA(_name=name, value=strings[key], _cols=70,\n                            _rows=5, _class=_class)\n\n        # Making the short circuit compatible with <= python2.4\n        k = (strings[key] != key) and key or B(key)\n\n        rows.append(P(k, BR(), elem, TAG.BUTTON(T(\'delete\'),\n                            _onclick=\'return delkey("%s")\' % name), _id=name))\n\n    rows.append(INPUT(_type=\'submit\', _value=T(\'update\')))\n    form = FORM(*rows)\n    if form.accepts(request.vars, keepvalues=True):\n        strs = dict()\n        for key in keys:\n            name = md5_hash(key)\n            if form.vars[name]==chr(127): continue\n            strs[key] = form.vars[name]\n        write_dict(apath(filename, r=request), strs)\n        session.flash = T(\'file saved on %(time)s\', dict(time=time.ctime()))\n        redirect(URL(r=request,args=request.args))\n    return dict(app=request.args[0], filename=filename, form=form)\n\n\ndef about():\n    """ Read about info """\n    app = get_app()\n    # ## check if file is not there\n    about = safe_read(apath(\'%s/ABOUT\' % app, r=request))\n    license = safe_read(apath(\'%s/LICENSE\' % app, r=request))\n    return dict(app=app, about=MARKMIN(about), license=MARKMIN(license))\n\n\ndef design():\n    """ Application design handler """\n    app = get_app()\n\n    if not response.flash and app == request.application:\n        msg = T(\'ATTENTION: you cannot edit the running application!\')\n        response.flash = msg\n\n    if request.vars.pluginfile!=None and not isinstance(request.vars.pluginfile,str):\n        filename=os.path.basename(request.vars.pluginfile.filename)\n        if plugin_install(app, request.vars.pluginfile.file,\n                          request, filename):\n            session.flash = T(\'new plugin installed\')\n            redirect(URL(\'design\',args=app))\n        else:\n            session.flash = \\\n                T(\'unable to create application "%s"\', request.vars.filename)\n        redirect(URL(r=request))\n    elif isinstance(request.vars.pluginfile,str):\n        session.flash = T(\'plugin not specified\')\n        redirect(URL(r=request))\n\n\n    # If we have only pyc files it means that\n    # we cannot design\n    if os.path.exists(apath(\'%s/compiled\' % app, r=request)):\n        session.flash = \\\n            T(\'application is compiled and cannot be designed\')\n        redirect(URL(\'site\'))\n\n    # Get all models\n    models = listdir(apath(\'%s/models/\' % app, r=request), \'.*\\.py$\')\n    models=[x.replace(\'\\\\\',\'/\') for x in models]\n    defines = {}\n    for m in models:\n        data = safe_read(apath(\'%s/models/%s\' % (app, m), r=request))\n        defines[m] = regex_tables.findall(data)\n        defines[m].sort()\n\n    # Get all controllers\n    controllers = sorted(listdir(apath(\'%s/controllers/\' % app, r=request), \'.*\\.py$\'))\n    controllers = [x.replace(\'\\\\\',\'/\') for x in controllers]\n    functions = {}\n    for c in controllers:\n        data = safe_read(apath(\'%s/controllers/%s\' % (app, c), r=request))\n        items = regex_expose.findall(data)\n        functions[c] = items\n\n    # Get all views\n    views = sorted(listdir(apath(\'%s/views/\' % app, r=request), \'[\\w/\\-]+(\\.\\w+)+$\'))\n    views = [x.replace(\'\\\\\',\'/\') for x in views if not x.endswith(\'.bak\')]\n    extend = {}\n    include = {}\n    for c in views:\n        data = safe_read(apath(\'%s/views/%s\' % (app, c), r=request))\n        items = regex_extend.findall(data)\n\n        if items:\n            extend[c] = items[0][1]\n\n        items = regex_include.findall(data)\n        include[c] = [i[1] for i in items]\n\n    # Get all modules\n    modules = listdir(apath(\'%s/modules/\' % app, r=request), \'.*\\.py$\')\n    modules = modules=[x.replace(\'\\\\\',\'/\') for x in modules]\n    modules.sort()\n\n    # Get all static files\n    statics = listdir(apath(\'%s/static/\' % app, r=request), \'[^\\.#].*\')\n    statics = [x.replace(\'\\\\\',\'/\') for x in statics]\n    statics.sort()\n\n    # Get all languages\n    languages = listdir(apath(\'%s/languages/\' % app, r=request), \'[\\w-]*\\.py\')\n\n    #Get crontab\n    cronfolder = apath(\'%s/cron\' % app, r=request)\n    if not os.path.exists(cronfolder): os.mkdir(cronfolder)\n    crontab = apath(\'%s/cron/crontab\' % app, r=request)\n    if not os.path.exists(crontab):\n        safe_write(crontab, \'#crontab\')\n\n    plugins=[]\n    def filter_plugins(items,plugins):\n        plugins+=[item[7:].split(\'/\')[0].split(\'.\')[0] for item in items if item.startswith(\'plugin_\')]\n        plugins[:]=list(set(plugins))\n        plugins.sort()\n        return [item for item in items if not item.startswith(\'plugin_\')]\n\n    return dict(app=app,\n                models=filter_plugins(models,plugins),\n                defines=defines,\n                controllers=filter_plugins(controllers,plugins),\n                functions=functions,\n                views=filter_plugins(views,plugins),\n                modules=filter_plugins(modules,plugins),\n                extend=extend,\n                include=include,\n                statics=filter_plugins(statics,plugins),\n                languages=languages,\n                crontab=crontab,\n                plugins=plugins)\n\ndef delete_plugin():\n    """ Object delete handler """\n    app=request.args(0)\n    plugin = request.args(1)\n    plugin_name=\'plugin_\'+plugin\n    if \'nodelete\' in request.vars:\n        redirect(URL(\'design\',args=app))\n    elif \'delete\' in request.vars:\n        try:\n            for folder in [\'models\',\'views\',\'controllers\',\'static\',\'modules\']:\n                path=os.path.join(apath(app,r=request),folder)\n                for item in os.listdir(path):\n                    if item.rsplit(\'.\',1)[0] == plugin_name:\n                        filename=os.path.join(path,item)\n                        if os.path.isdir(filename):\n                            shutil.rmtree(filename)\n                        else:\n                            os.unlink(filename)\n            session.flash = T(\'plugin "%(plugin)s" deleted\',\n                              dict(plugin=plugin))\n        except Exception:\n            session.flash = T(\'unable to delete file plugin "%(plugin)s"\',\n                              dict(plugin=plugin))\n        redirect(URL(\'design\',args=request.args(0)))\n    return dict(plugin=plugin)\n\ndef plugin():\n    """ Application design handler """\n    app = get_app()\n    plugin = request.args(1)\n\n    if not response.flash and app == request.application:\n        msg = T(\'ATTENTION: you cannot edit the running application!\')\n        response.flash = msg\n\n    # If we have only pyc files it means that\n    # we cannot design\n    if os.path.exists(apath(\'%s/compiled\' % app, r=request)):\n        session.flash = \\\n            T(\'application is compiled and cannot be designed\')\n        redirect(URL(\'site\'))\n\n    # Get all models\n    models = listdir(apath(\'%s/models/\' % app, r=request), \'.*\\.py$\')\n    models=[x.replace(\'\\\\\',\'/\') for x in models]\n    defines = {}\n    for m in models:\n        data = safe_read(apath(\'%s/models/%s\' % (app, m), r=request))\n        defines[m] = regex_tables.findall(data)\n        defines[m].sort()\n\n    # Get all controllers\n    controllers = sorted(listdir(apath(\'%s/controllers/\' % app, r=request), \'.*\\.py$\'))\n    controllers = [x.replace(\'\\\\\',\'/\') for x in controllers]\n    functions = {}\n    for c in controllers:\n        data = safe_read(apath(\'%s/controllers/%s\' % (app, c), r=request))\n        items = regex_expose.findall(data)\n        functions[c] = items\n\n    # Get all views\n    views = sorted(listdir(apath(\'%s/views/\' % app, r=request), \'[\\w/\\-]+\\.\\w+$\'))\n    views = [x.replace(\'\\\\\',\'/\') for x in views]\n    extend = {}\n    include = {}\n    for c in views:\n        data = safe_read(apath(\'%s/views/%s\' % (app, c), r=request))\n        items = regex_extend.findall(data)\n        if items:\n            extend[c] = items[0][1]\n\n        items = regex_include.findall(data)\n        include[c] = [i[1] for i in items]\n\n    # Get all modules\n    modules = listdir(apath(\'%s/modules/\' % app, r=request), \'.*\\.py$\')\n    modules = modules=[x.replace(\'\\\\\',\'/\') for x in modules]\n    modules.sort()\n\n    # Get all static files\n    statics = listdir(apath(\'%s/static/\' % app, r=request), \'[^\\.#].*\')\n    statics = [x.replace(\'\\\\\',\'/\') for x in statics]\n    statics.sort()\n\n    # Get all languages\n    languages = listdir(apath(\'%s/languages/\' % app, r=request), \'[\\w-]*\\.py\')\n\n    #Get crontab\n    crontab = apath(\'%s/cron/crontab\' % app, r=request)\n    if not os.path.exists(crontab):\n        safe_write(crontab, \'#crontab\')\n\n    def filter_plugins(items):\n        regex=re.compile(\'^plugin_\'+plugin+\'(/.*|\\..*)?$\')\n        return [item for item in items if regex.match(item)]\n\n    return dict(app=app,\n                models=filter_plugins(models),\n                defines=defines,\n                controllers=filter_plugins(controllers),\n                functions=functions,\n                views=filter_plugins(views),\n                modules=filter_plugins(modules),\n                extend=extend,\n                include=include,\n                statics=filter_plugins(statics),\n                languages=languages,\n                crontab=crontab)\n\n\ndef create_file():\n    """ Create files handler """\n    try:\n        app = get_app(name=request.vars.location.split(\'/\')[0])\n        path = apath(request.vars.location, r=request)\n        filename = re.sub(\'[^\\w./-]+\', \'_\', request.vars.filename)\n\n        if path[-11:] == \'/languages/\':\n            # Handle language files\n            if len(filename) == 0:\n                raise SyntaxError\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n            app = path.split(\'/\')[-3]\n            path=os.path.join(apath(app, r=request),\'languages\',filename)\n            if not os.path.exists(path):\n                safe_write(path, \'\')\n            findT(apath(app, r=request), filename[:-3])\n            session.flash = T(\'language file "%(filename)s" created/updated\',\n                              dict(filename=filename))\n            redirect(request.vars.sender)\n\n        elif path[-8:] == \'/models/\':\n            # Handle python models\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = \'# coding: utf8\\n\'\n\n        elif path[-13:] == \'/controllers/\':\n            # Handle python controllers\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = \'# coding: utf8\\n# %s\\ndef index(): return dict(message="hello from %s")\'\n            text = text % (T(\'try something like\'), filename)\n\n        elif path[-7:] == \'/views/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            # Handle template (html) views\n            if filename.find(\'.\')<0:\n                filename += \'.html\'\n            extension = filename.split(\'.\')[-1].lower()\n\n            if len(filename) == 5:\n                raise SyntaxError\n\n            msg = T(\'This is the %(filename)s template\',\n                    dict(filename=filename))\n            if extension == \'html\':\n                text = dedent("""\n                   {{extend \'layout.html\'}}\n                   <h1>%s</h1>\n                   {{=BEAUTIFY(response._vars)}}""" % msg)\n            else:\n                generic = os.path.join(path,\'generic.\'+extension)\n                if os.path.exists(generic):\n                    text = read_file(generic)\n                else:\n                    text = \'\'\n\n        elif path[-9:] == \'/modules/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            # Handle python module files\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = dedent("""\n                   #!/usr/bin/env python\n                   # coding: utf8\n                   from gluon import *\\n""")\n\n        elif path[-8:] == \'/static/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            text = \'\'\n        else:\n            redirect(request.vars.sender)\n\n        full_filename = os.path.join(path, filename)\n        dirpath = os.path.dirname(full_filename)\n\n        if not os.path.exists(dirpath):\n            os.makedirs(dirpath)\n\n        if os.path.exists(full_filename):\n            raise SyntaxError\n\n        safe_write(full_filename, text)\n        session.flash = T(\'file "%(filename)s" created\',\n                          dict(filename=full_filename[len(path):]))\n        redirect(URL(\'edit\',\n                 args=[os.path.join(request.vars.location, filename)]))\n    except Exception, e:\n        if not isinstance(e,HTTP):\n            session.flash = T(\'cannot create file\')\n\n    redirect(request.vars.sender)\n\n\ndef upload_file():\n    """ File uploading handler """\n\n    try:\n        filename = None\n        app = get_app(name=request.vars.location.split(\'/\')[0])\n        path = apath(request.vars.location, r=request)\n\n        if request.vars.filename:\n            filename = re.sub(\'[^\\w\\./]+\', \'_\', request.vars.filename)\n        else:\n            filename = os.path.split(request.vars.file.filename)[-1]\n\n        if path[-8:] == \'/models/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-9:] == \'/modules/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-13:] == \'/controllers/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-7:] == \'/views/\' and not filename[-5:] == \'.html\':\n            filename += \'.html\'\n\n        if path[-11:] == \'/languages/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        filename = os.path.join(path, filename)\n        dirpath = os.path.dirname(filename)\n\n        if not os.path.exists(dirpath):\n            os.makedirs(dirpath)\n\n        safe_write(filename, request.vars.file.file.read(), \'wb\')\n        session.flash = T(\'file "%(filename)s" uploaded\',\n                          dict(filename=filename[len(path):]))\n    except Exception:\n        if filename:\n            d = dict(filename = filename[len(path):])\n        else:\n            d = dict(filename = \'unkown\')\n        session.flash = T(\'cannot upload file "%(filename)s"\', d)\n\n    redirect(request.vars.sender)\n\n\ndef errors():\n    """ Error handler """\n    import operator\n    import os\n    import pickle\n    import hashlib\n\n    app = get_app()\n\n    method = request.args(1) or \'new\'\n    db_ready = {}\n    db_ready[\'status\'] = get_ticket_storage(app)\n    db_ready[\'errmessage\'] = "No ticket_storage.txt found under /private folder"\n    db_ready[\'errlink\'] = "http://web2py.com/books/default/chapter/29/13#Collecting-tickets"\n\n    if method == \'new\':\n        errors_path = apath(\'%s/errors\' % app, r=request)\n\n        delete_hashes = []\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                delete_hashes.append(item[7:])\n\n        hash2error = dict()\n\n        for fn in listdir(errors_path, \'^\\w.*\'):\n            fullpath = os.path.join(errors_path, fn)\n            if not os.path.isfile(fullpath): continue\n            try:\n                fullpath_file = open(fullpath, \'r\')\n                try:\n                    error = pickle.load(fullpath_file)\n                finally:\n                    fullpath_file.close()\n            except IOError:\n                continue\n\n            hash = hashlib.md5(error[\'traceback\']).hexdigest()\n\n            if hash in delete_hashes:\n                os.unlink(fullpath)\n            else:\n                try:\n                    hash2error[hash][\'count\'] += 1\n                except KeyError:\n                    error_lines = error[\'traceback\'].split("\\n")\n                    last_line = error_lines[-2]\n                    error_causer = os.path.split(error[\'layer\'])[1]\n                    hash2error[hash] = dict(count=1, pickel=error,\n                                            causer=error_causer,\n                                            last_line=last_line,\n                                            hash=hash,ticket=fn)\n\n        decorated = [(x[\'count\'], x) for x in hash2error.values()]\n        decorated.sort(key=operator.itemgetter(0), reverse=True)\n\n        return dict(errors = [x[1] for x in decorated], app=app, method=method, db_ready=db_ready)\n\n    elif method == \'dbnew\':\n        errors_path = apath(\'%s/errors\' % app, r=request)\n        tk_db, tk_table = get_ticket_storage(app)\n\n        delete_hashes = []\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                delete_hashes.append(item[7:])\n\n        hash2error = dict()\n\n        for fn in tk_db(tk_table.id>0).select():\n            try:\n                error = pickle.loads(fn.ticket_data)\n            except AttributeError:\n                tk_db(tk_table.id == fn.id).delete()\n                tk_db.commit()\n\n            hash = hashlib.md5(error[\'traceback\']).hexdigest()\n\n            if hash in delete_hashes:\n                tk_db(tk_table.id == fn.id).delete()\n                tk_db.commit()\n            else:\n                try:\n                    hash2error[\'hash\'][\'count\'] += 1\n                except KeyError:\n                    error_lines = error[\'traceback\'].split("\\n")\n                    last_line = error_lines[-2]\n                    error_causer = os.path.split(error[\'layer\'])[1]\n                    hash2error[hash] = dict(count=1, pickel=error,\n                                            causer=error_causer,\n                                            last_line=last_line,\n                                            hash=hash,ticket=fn.ticket_id)\n\n        decorated = [(x[\'count\'], x) for x in hash2error.values()]\n\n        decorated.sort(key=operator.itemgetter(0), reverse=True)\n\n        return dict(errors = [x[1] for x in decorated], app=app, method=method)\n\n    elif method == \'dbold\':\n        tk_db, tk_table = get_ticket_storage(app)\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                tk_db(tk_table.ticket_id == item[7:]).delete()\n                tk_db.commit()\n        tickets_ = tk_db(tk_table.id>0).select(tk_table.ticket_id, tk_table.created_datetime, orderby=~tk_table.created_datetime)\n        tickets = [row.ticket_id for row in tickets_]\n        times = dict([(row.ticket_id, row.created_datetime) for row in tickets_])\n\n        return dict(app=app, tickets=tickets, method=method, times=times)\n\n    else:\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                os.unlink(apath(\'%s/errors/%s\' % (app, item[7:]), r=request))\n        func = lambda p: os.stat(apath(\'%s/errors/%s\' % \\\n                                           (app, p), r=request)).st_mtime\n        tickets = sorted(listdir(apath(\'%s/errors/\' % app, r=request), \'^\\w.*\'),\n                         key=func,\n                         reverse=True)\n\n        return dict(app=app, tickets=tickets, method=method, db_ready=db_ready)\n\ndef get_ticket_storage(app):\n    private_folder = apath(\'%s/private\' % app, r=request)\n    ticket_file = os.path.join(private_folder, \'ticket_storage.txt\')\n    if os.path.exists(ticket_file):\n        db_string = open(ticket_file).read()\n        db_string = db_string.strip().replace(\'\\r\',\'\').replace(\'\\n\',\'\')\n    else:\n        return False\n    tickets_table = \'web2py_ticket\'\n    tablename = tickets_table + \'_\' + app\n    db_path = apath(\'%s/databases\' % app, r=request)\n    ticketsdb = DAL(db_string, folder=db_path, auto_import=True)\n    if not ticketsdb.get(tablename):\n        table = ticketsdb.define_table(\n                tablename,\n                Field(\'ticket_id\', length=100),\n                Field(\'ticket_data\', \'text\'),\n                Field(\'created_datetime\', \'datetime\'),\n                )\n    return ticketsdb , ticketsdb.get(tablename)\n\ndef make_link(path):\n    """ Create a link from a path """\n    tryFile = path.replace(\'\\\\\', \'/\')\n\n    if os.path.isabs(tryFile) and os.path.isfile(tryFile):\n        (folder, filename) = os.path.split(tryFile)\n        (base, ext) = os.path.splitext(filename)\n        app = get_app()\n\n        editable = {\'controllers\': \'.py\', \'models\': \'.py\', \'views\': \'.html\'}\n        for key in editable.keys():\n            check_extension = folder.endswith("%s/%s" % (app,key))\n            if ext.lower() == editable[key] and check_extension:\n                return A(\'"\' + tryFile + \'"\',\n                         _href=URL(r=request,\n                         f=\'edit/%s/%s/%s\' % (app, key, filename))).xml()\n    return \'\'\n\n\ndef make_links(traceback):\n    """ Make links using the given traceback """\n\n    lwords = traceback.split(\'"\')\n\n    # Making the short circuit compatible with <= python2.4\n    result = (len(lwords) != 0) and lwords[0] or \'\'\n\n    i = 1\n\n    while i < len(lwords):\n        link = make_link(lwords[i])\n\n        if link == \'\':\n            result += \'"\' + lwords[i]\n        else:\n            result += link\n\n            if i + 1 < len(lwords):\n                result += lwords[i + 1]\n                i = i + 1\n\n        i = i + 1\n\n    return result\n\n\nclass TRACEBACK(object):\n    """ Generate the traceback """\n\n    def __init__(self, text):\n        """ TRACEBACK constructor """\n\n        self.s = make_links(CODE(text).xml())\n\n    def xml(self):\n        """ Returns the xml """\n\n        return self.s\n\n\ndef ticket():\n    """ Ticket handler """\n\n    if len(request.args) != 2:\n        session.flash = T(\'invalid ticket\')\n        redirect(URL(\'site\'))\n\n    app = get_app()\n    myversion = request.env.web2py_version\n    ticket = request.args[1]\n    e = RestrictedError()\n    e.load(request, app, ticket)\n\n    return dict(app=app,\n                ticket=ticket,\n                output=e.output,\n                traceback=(e.traceback and TRACEBACK(e.traceback)),\n                snapshot=e.snapshot,\n                code=e.code,\n                layer=e.layer,\n                myversion=myversion)\n\ndef ticketdb():\n    """ Ticket handler """\n\n    if len(request.args) != 2:\n        session.flash = T(\'invalid ticket\')\n        redirect(URL(\'site\'))\n\n    app = get_app()\n    myversion = request.env.web2py_version\n    ticket = request.args[1]\n    e = RestrictedError()\n    request.tickets_db = get_ticket_storage(app)[0]\n    e.load(request, app, ticket)\n    response.view = \'default/ticket.html\'\n    return dict(app=app,\n                ticket=ticket,\n                output=e.output,\n                traceback=(e.traceback and TRACEBACK(e.traceback)),\n                snapshot=e.snapshot,\n                code=e.code,\n                layer=e.layer,\n                myversion=myversion)\n\ndef error():\n    """ Generate a ticket (for testing) """\n    raise RuntimeError(\'admin ticket generator at your service\')\n\ndef update_languages():\n    """ Update available languages """\n\n    app = get_app()\n    update_all_languages(apath(app, r=request))\n    session.flash = T(\'Language files (static strings) updated\')\n    redirect(URL(\'design\',args=app,anchor=\'languages\'))\n\n\ndef twitter():\n    session.forget()\n    session._unlock(response)\n    import gluon.tools\n    import gluon.contrib.simplejson as sj\n    try:\n        if TWITTER_HASH:\n            page = urllib.urlopen("http://search.twitter.com/search.json?q=%%40%s" % TWITTER_HASH).read()\n            data = sj.loads(page  , encoding="utf-8")[\'results\']\n            d = dict()\n            for e in data:\n                d[e["id"]] = e\n            r = reversed(sorted(d))\n            return dict(tweets = [d[k] for k in r])\n        else:\n            return \'disabled\'\n    except Exception, e:\n        return DIV(T(\'Unable to download because:\'),BR(),str(e))\n\n\ndef user():\n    if MULTI_USER_MODE:\n        if not db(db.auth_user).count():\n            auth.settings.registration_requires_approval = False\n        return dict(form=auth())\n    else:\n        return dict(form=T("Disabled"))\n\ndef reload_routes():\n    """ Reload routes.py """\n    import gluon.rewrite\n    gluon.rewrite.load()\n    redirect(URL(\'site\'))\n\n\n\nresponse._vars=response._caller(reload_routes)\n'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'__hash__'
p12
S"<method-wrapper '__hash__' of exceptions.TypeError object at 0xa491530>"
p13
sS'__setattr__'
p14
S"<method-wrapper '__setattr__' of exceptions.TypeError object at 0xa491530>"
p15
sS'__reduce_ex__'
p16
S'<built-in method __reduce_ex__ of exceptions.TypeError object at 0xa491530>'
p17
sS'__getslice__'
p18
S"<method-wrapper '__getslice__' of exceptions.TypeError object at 0xa491530>"
p19
sS'__getitem__'
p20
S"<method-wrapper '__getitem__' of exceptions.TypeError object at 0xa491530>"
p21
sS'__setstate__'
p22
S'<built-in method __setstate__ of exceptions.TypeError object at 0xa491530>'
p23
sS'__reduce__'
p24
S'<built-in method __reduce__ of exceptions.TypeError object at 0xa491530>'
p25
sS'__str__'
p26
S"<method-wrapper '__str__' of exceptions.TypeError object at 0xa491530>"
p27
sS'args'
p28
S'("\'tuple\' object is not callable",)'
p29
sS'__getattribute__'
p30
S"<method-wrapper '__getattribute__' of exceptions.TypeError object at 0xa491530>"
p31
sS'__class__'
p32
S"<type 'exceptions.TypeError'>"
p33
sS'__delattr__'
p34
S"<method-wrapper '__delattr__' of exceptions.TypeError object at 0xa491530>"
p35
sS'__repr__'
p36
S"<method-wrapper '__repr__' of exceptions.TypeError object at 0xa491530>"
p37
sS'__dict__'
p38
S'{}'
p39
sS'__doc__'
p40
S"'Inappropriate argument type.'"
p41
sS'__init__'
p42
S"<method-wrapper '__init__' of exceptions.TypeError object at 0xa491530>"
p43
sS'__new__'
p44
S'<built-in method __new__ of type object at 0x101140>'
p45
ssS'evalue'
p46
S"'tuple' object is not callable"
p47
sS'request'
p48
ccopy_reg
_reconstructor
p49
(cgluon.html
BEAUTIFY
p50
c__builtin__
object
p51
NtRp52
(dp53
S'attributes'
p54
(dp55
sS'components'
p56
(lp57
g49
(cgluon.html
TABLE
p58
g51
NtRp59
(dp60
g54
(dp61
S'level'
p62
I5
ssS'parent'
p63
Nsg56
(lp64
g49
(cgluon.html
TR
p65
g51
NtRp66
(dp67
g54
(dp68
sg63
g59
sg56
(lp69
g49
(cgluon.html
TD
p70
g51
NtRp71
(dp72
g54
(dp73
S'_style'
p74
S'font-weight:bold;vertical-align:top'
p75
ssg63
g66
sg56
(lp76
S'ajax'
p77
asbag49
(g70
g51
NtRp78
(dp79
g54
(dp80
S'_valign'
p81
S'top'
p82
ssg63
g66
sg56
(lp83
S':'
asbag49
(g70
g51
NtRp84
(dp85
g54
(dp86
sg63
g66
sg56
(lp87
g49
(g50
g51
NtRp88
(dp89
g54
(dp90
g62
I5
ssg63
g84
sg56
(lp91
S'False'
p92
asbasbasbag49
(g65
g51
NtRp93
(dp94
g54
(dp95
sg63
g59
sg56
(lp96
g49
(g70
g51
NtRp97
(dp98
g54
(dp99
g74
g75
ssg63
g93
sg56
(lp100
S'application'
p101
asbag49
(g70
g51
NtRp102
(dp103
g54
(dp104
g81
g82
ssg63
g93
sg56
(lp105
S':'
asbag49
(g70
g51
NtRp106
(dp107
g54
(dp108
sg63
g93
sg56
(lp109
g49
(g50
g51
NtRp110
(dp111
g54
(dp112
g62
I5
ssg63
g106
sg56
(lp113
S'admin'
p114
asbasbasbag49
(g65
g51
NtRp115
(dp116
g54
(dp117
sg63
g59
sg56
(lp118
g49
(g70
g51
NtRp119
(dp120
g54
(dp121
g74
g75
ssg63
g115
sg56
(lp122
g28
asbag49
(g70
g51
NtRp123
(dp124
g54
(dp125
g81
g82
ssg63
g115
sg56
(lp126
S':'
asbag49
(g70
g51
NtRp127
(dp128
g54
(dp129
sg63
g115
sg56
(lp130
g49
(g50
g51
NtRp131
(dp132
g54
(dp133
g62
I5
ssg63
g127
sg56
(lp134
g49
(g58
g51
NtRp135
(dp136
g54
(dp137
g62
I4
ssg63
Nsg56
(lp138
sbasbasbasbag49
(g65
g51
NtRp139
(dp140
g54
(dp141
sg63
g59
sg56
(lp142
g49
(g70
g51
NtRp143
(dp144
g54
(dp145
g74
g75
ssg63
g139
sg56
(lp146
S'body'
p147
asbag49
(g70
g51
NtRp148
(dp149
g54
(dp150
g81
g82
ssg63
g139
sg56
(lp151
S':'
asbag49
(g70
g51
NtRp152
(dp153
g54
(dp154
sg63
g139
sg56
(lp155
g49
(g50
g51
NtRp156
(dp157
g54
(dp158
g62
I5
ssg63
g152
sg56
(lp159
S'<cStringIO.StringO object at 0x8e93680>'
p160
asbasbasbag49
(g65
g51
NtRp161
(dp162
g54
(dp163
sg63
g59
sg56
(lp164
g49
(g70
g51
NtRp165
(dp166
g54
(dp167
g74
g75
ssg63
g161
sg56
(lp168
S'client'
p169
asbag49
(g70
g51
NtRp170
(dp171
g54
(dp172
g81
g82
ssg63
g161
sg56
(lp173
S':'
asbag49
(g70
g51
NtRp174
(dp175
g54
(dp176
sg63
g161
sg56
(lp177
g49
(g50
g51
NtRp178
(dp179
g54
(dp180
g62
I5
ssg63
g174
sg56
(lp181
S'127.0.0.1'
p182
asbasbasbag49
(g65
g51
NtRp183
(dp184
g54
(dp185
sg63
g59
sg56
(lp186
g49
(g70
g51
NtRp187
(dp188
g54
(dp189
g74
g75
ssg63
g183
sg56
(lp190
S'controller'
p191
asbag49
(g70
g51
NtRp192
(dp193
g54
(dp194
g81
g82
ssg63
g183
sg56
(lp195
S':'
asbag49
(g70
g51
NtRp196
(dp197
g54
(dp198
sg63
g183
sg56
(lp199
g49
(g50
g51
NtRp200
(dp201
g54
(dp202
g62
I5
ssg63
g196
sg56
(lp203
S'default'
p204
asbasbasbag49
(g65
g51
NtRp205
(dp206
g54
(dp207
sg63
g59
sg56
(lp208
g49
(g70
g51
NtRp209
(dp210
g54
(dp211
g74
g75
ssg63
g205
sg56
(lp212
S'cookies'
p213
asbag49
(g70
g51
NtRp214
(dp215
g54
(dp216
g81
g82
ssg63
g205
sg56
(lp217
S':'
asbag49
(g70
g51
NtRp218
(dp219
g54
(dp220
sg63
g205
sg56
(lp221
g49
(g50
g51
NtRp222
(dp223
g54
(dp224
g62
I5
ssg63
g218
sg56
(lp225
g49
(g58
g51
NtRp226
(dp227
g54
(dp228
g62
I4
ssg63
Nsg56
(lp229
g49
(g65
g51
NtRp230
(dp231
g54
(dp232
sg63
g226
sg56
(lp233
g49
(g70
g51
NtRp234
(dp235
g54
(dp236
g74
g75
ssg63
g230
sg56
(lp237
S'session_id_admin'
p238
asbag49
(g70
g51
NtRp239
(dp240
g54
(dp241
g81
g82
ssg63
g230
sg56
(lp242
S':'
asbag49
(g70
g51
NtRp243
(dp244
g54
(dp245
sg63
g230
sg56
(lp246
g49
(g50
g51
NtRp247
(dp248
g54
(dp249
g62
I4
ssg63
g243
sg56
(lp250
g49
(g58
g51
NtRp251
(dp252
g54
(dp253
g62
I3
ssg63
Nsg56
(lp254
g49
(g65
g51
NtRp255
(dp256
g54
(dp257
sg63
g251
sg56
(lp258
g49
(g70
g51
NtRp259
(dp260
g54
(dp261
g74
g75
ssg63
g255
sg56
(lp262
S'comment'
p263
asbag49
(g70
g51
NtRp264
(dp265
g54
(dp266
g81
g82
ssg63
g255
sg56
(lp267
S':'
asbag49
(g70
g51
NtRp268
(dp269
g54
(dp270
sg63
g255
sg56
(lp271
g49
(g50
g51
NtRp272
(dp273
g54
(dp274
g62
I3
ssg63
g268
sg56
(lp275
S''
asbasbasbag49
(g65
g51
NtRp276
(dp277
g54
(dp278
sg63
g251
sg56
(lp279
g49
(g70
g51
NtRp280
(dp281
g54
(dp282
g74
g75
ssg63
g276
sg56
(lp283
S'domain'
p284
asbag49
(g70
g51
NtRp285
(dp286
g54
(dp287
g81
g82
ssg63
g276
sg56
(lp288
S':'
asbag49
(g70
g51
NtRp289
(dp290
g54
(dp291
sg63
g276
sg56
(lp292
g49
(g50
g51
NtRp293
(dp294
g54
(dp295
g62
I3
ssg63
g289
sg56
(lp296
S''
asbasbasbag49
(g65
g51
NtRp297
(dp298
g54
(dp299
sg63
g251
sg56
(lp300
g49
(g70
g51
NtRp301
(dp302
g54
(dp303
g74
g75
ssg63
g297
sg56
(lp304
S'expires'
p305
asbag49
(g70
g51
NtRp306
(dp307
g54
(dp308
g81
g82
ssg63
g297
sg56
(lp309
S':'
asbag49
(g70
g51
NtRp310
(dp311
g54
(dp312
sg63
g297
sg56
(lp313
g49
(g50
g51
NtRp314
(dp315
g54
(dp316
g62
I3
ssg63
g310
sg56
(lp317
S''
asbasbasbag49
(g65
g51
NtRp318
(dp319
g54
(dp320
sg63
g251
sg56
(lp321
g49
(g70
g51
NtRp322
(dp323
g54
(dp324
g74
g75
ssg63
g318
sg56
(lp325
S'max-age'
p326
asbag49
(g70
g51
NtRp327
(dp328
g54
(dp329
g81
g82
ssg63
g318
sg56
(lp330
S':'
asbag49
(g70
g51
NtRp331
(dp332
g54
(dp333
sg63
g318
sg56
(lp334
g49
(g50
g51
NtRp335
(dp336
g54
(dp337
g62
I3
ssg63
g331
sg56
(lp338
S''
asbasbasbag49
(g65
g51
NtRp339
(dp340
g54
(dp341
sg63
g251
sg56
(lp342
g49
(g70
g51
NtRp343
(dp344
g54
(dp345
g74
g75
ssg63
g339
sg56
(lp346
S'path'
p347
asbag49
(g70
g51
NtRp348
(dp349
g54
(dp350
g81
g82
ssg63
g339
sg56
(lp351
S':'
asbag49
(g70
g51
NtRp352
(dp353
g54
(dp354
sg63
g339
sg56
(lp355
g49
(g50
g51
NtRp356
(dp357
g54
(dp358
g62
I3
ssg63
g352
sg56
(lp359
S''
asbasbasbag49
(g65
g51
NtRp360
(dp361
g54
(dp362
sg63
g251
sg56
(lp363
g49
(g70
g51
NtRp364
(dp365
g54
(dp366
g74
g75
ssg63
g360
sg56
(lp367
S'secure'
p368
asbag49
(g70
g51
NtRp369
(dp370
g54
(dp371
g81
g82
ssg63
g360
sg56
(lp372
S':'
asbag49
(g70
g51
NtRp373
(dp374
g54
(dp375
sg63
g360
sg56
(lp376
g49
(g50
g51
NtRp377
(dp378
g54
(dp379
g62
I3
ssg63
g373
sg56
(lp380
S''
asbasbasbag49
(g65
g51
NtRp381
(dp382
g54
(dp383
sg63
g251
sg56
(lp384
g49
(g70
g51
NtRp385
(dp386
g54
(dp387
g74
g75
ssg63
g381
sg56
(lp388
S'version'
p389
asbag49
(g70
g51
NtRp390
(dp391
g54
(dp392
g81
g82
ssg63
g381
sg56
(lp393
S':'
asbag49
(g70
g51
NtRp394
(dp395
g54
(dp396
sg63
g381
sg56
(lp397
g49
(g50
g51
NtRp398
(dp399
g54
(dp400
g62
I3
ssg63
g394
sg56
(lp401
S''
asbasbasbasbasbasbasbag49
(g65
g51
NtRp402
(dp403
g54
(dp404
sg63
g226
sg56
(lp405
g49
(g70
g51
NtRp406
(dp407
g54
(dp408
g74
g75
ssg63
g402
sg56
(lp409
S'session_id_udi0312'
p410
asbag49
(g70
g51
NtRp411
(dp412
g54
(dp413
g81
g82
ssg63
g402
sg56
(lp414
S':'
asbag49
(g70
g51
NtRp415
(dp416
g54
(dp417
sg63
g402
sg56
(lp418
g49
(g50
g51
NtRp419
(dp420
g54
(dp421
g62
I4
ssg63
g415
sg56
(lp422
g49
(g58
g51
NtRp423
(dp424
g54
(dp425
g62
I3
ssg63
Nsg56
(lp426
g49
(g65
g51
NtRp427
(dp428
g54
(dp429
sg63
g423
sg56
(lp430
g49
(g70
g51
NtRp431
(dp432
g54
(dp433
g74
g75
ssg63
g427
sg56
(lp434
g263
asbag49
(g70
g51
NtRp435
(dp436
g54
(dp437
g81
g82
ssg63
g427
sg56
(lp438
S':'
asbag49
(g70
g51
NtRp439
(dp440
g54
(dp441
sg63
g427
sg56
(lp442
g49
(g50
g51
NtRp443
(dp444
g54
(dp445
g62
I3
ssg63
g439
sg56
(lp446
S''
asbasbasbag49
(g65
g51
NtRp447
(dp448
g54
(dp449
sg63
g423
sg56
(lp450
g49
(g70
g51
NtRp451
(dp452
g54
(dp453
g74
g75
ssg63
g447
sg56
(lp454
g284
asbag49
(g70
g51
NtRp455
(dp456
g54
(dp457
g81
g82
ssg63
g447
sg56
(lp458
S':'
asbag49
(g70
g51
NtRp459
(dp460
g54
(dp461
sg63
g447
sg56
(lp462
g49
(g50
g51
NtRp463
(dp464
g54
(dp465
g62
I3
ssg63
g459
sg56
(lp466
S''
asbasbasbag49
(g65
g51
NtRp467
(dp468
g54
(dp469
sg63
g423
sg56
(lp470
g49
(g70
g51
NtRp471
(dp472
g54
(dp473
g74
g75
ssg63
g467
sg56
(lp474
g305
asbag49
(g70
g51
NtRp475
(dp476
g54
(dp477
g81
g82
ssg63
g467
sg56
(lp478
S':'
asbag49
(g70
g51
NtRp479
(dp480
g54
(dp481
sg63
g467
sg56
(lp482
g49
(g50
g51
NtRp483
(dp484
g54
(dp485
g62
I3
ssg63
g479
sg56
(lp486
S''
asbasbasbag49
(g65
g51
NtRp487
(dp488
g54
(dp489
sg63
g423
sg56
(lp490
g49
(g70
g51
NtRp491
(dp492
g54
(dp493
g74
g75
ssg63
g487
sg56
(lp494
g326
asbag49
(g70
g51
NtRp495
(dp496
g54
(dp497
g81
g82
ssg63
g487
sg56
(lp498
S':'
asbag49
(g70
g51
NtRp499
(dp500
g54
(dp501
sg63
g487
sg56
(lp502
g49
(g50
g51
NtRp503
(dp504
g54
(dp505
g62
I3
ssg63
g499
sg56
(lp506
S''
asbasbasbag49
(g65
g51
NtRp507
(dp508
g54
(dp509
sg63
g423
sg56
(lp510
g49
(g70
g51
NtRp511
(dp512
g54
(dp513
g74
g75
ssg63
g507
sg56
(lp514
g347
asbag49
(g70
g51
NtRp515
(dp516
g54
(dp517
g81
g82
ssg63
g507
sg56
(lp518
S':'
asbag49
(g70
g51
NtRp519
(dp520
g54
(dp521
sg63
g507
sg56
(lp522
g49
(g50
g51
NtRp523
(dp524
g54
(dp525
g62
I3
ssg63
g519
sg56
(lp526
S''
asbasbasbag49
(g65
g51
NtRp527
(dp528
g54
(dp529
sg63
g423
sg56
(lp530
g49
(g70
g51
NtRp531
(dp532
g54
(dp533
g74
g75
ssg63
g527
sg56
(lp534
g368
asbag49
(g70
g51
NtRp535
(dp536
g54
(dp537
g81
g82
ssg63
g527
sg56
(lp538
S':'
asbag49
(g70
g51
NtRp539
(dp540
g54
(dp541
sg63
g527
sg56
(lp542
g49
(g50
g51
NtRp543
(dp544
g54
(dp545
g62
I3
ssg63
g539
sg56
(lp546
S''
asbasbasbag49
(g65
g51
NtRp547
(dp548
g54
(dp549
sg63
g423
sg56
(lp550
g49
(g70
g51
NtRp551
(dp552
g54
(dp553
g74
g75
ssg63
g547
sg56
(lp554
g389
asbag49
(g70
g51
NtRp555
(dp556
g54
(dp557
g81
g82
ssg63
g547
sg56
(lp558
S':'
asbag49
(g70
g51
NtRp559
(dp560
g54
(dp561
sg63
g547
sg56
(lp562
g49
(g50
g51
NtRp563
(dp564
g54
(dp565
g62
I3
ssg63
g559
sg56
(lp566
S''
asbasbasbasbasbasbasbasbasbasbasbag49
(g65
g51
NtRp567
(dp568
g54
(dp569
sg63
g59
sg56
(lp570
g49
(g70
g51
NtRp571
(dp572
g54
(dp573
g74
g75
ssg63
g567
sg56
(lp574
S'env'
p575
asbag49
(g70
g51
NtRp576
(dp577
g54
(dp578
g81
g82
ssg63
g567
sg56
(lp579
S':'
asbag49
(g70
g51
NtRp580
(dp581
g54
(dp582
sg63
g567
sg56
(lp583
g49
(g50
g51
NtRp584
(dp585
g54
(dp586
g62
I5
ssg63
g580
sg56
(lp587
g49
(g58
g51
NtRp588
(dp589
g54
(dp590
g62
I4
ssg63
Nsg56
(lp591
g49
(g65
g51
NtRp592
(dp593
g54
(dp594
sg63
g588
sg56
(lp595
g49
(g70
g51
NtRp596
(dp597
g54
(dp598
g74
g75
ssg63
g592
sg56
(lp599
S'app_folders'
p600
asbag49
(g70
g51
NtRp601
(dp602
g54
(dp603
g81
g82
ssg63
g592
sg56
(lp604
S':'
asbag49
(g70
g51
NtRp605
(dp606
g54
(dp607
sg63
g592
sg56
(lp608
g49
(g50
g51
NtRp609
(dp610
g54
(dp611
g62
I4
ssg63
g605
sg56
(lp612
S"set(['/Users/udimilo/Documents/web2py/applications/udi0312/', '/Users/udimilo/Documents/web2py/applications/admin/'])"
p613
asbasbasbag49
(g65
g51
NtRp614
(dp615
g54
(dp616
sg63
g588
sg56
(lp617
g49
(g70
g51
NtRp618
(dp619
g54
(dp620
g74
g75
ssg63
g614
sg56
(lp621
S'applications_parent'
p622
asbag49
(g70
g51
NtRp623
(dp624
g54
(dp625
g81
g82
ssg63
g614
sg56
(lp626
S':'
asbag49
(g70
g51
NtRp627
(dp628
g54
(dp629
sg63
g614
sg56
(lp630
g49
(g50
g51
NtRp631
(dp632
g54
(dp633
g62
I4
ssg63
g627
sg56
(lp634
S'/Users/udimilo/Documents/web2py'
p635
asbasbasbag49
(g65
g51
NtRp636
(dp637
g54
(dp638
sg63
g588
sg56
(lp639
g49
(g70
g51
NtRp640
(dp641
g54
(dp642
g74
g75
ssg63
g636
sg56
(lp643
S'cmd_args'
p644
asbag49
(g70
g51
NtRp645
(dp646
g54
(dp647
g81
g82
ssg63
g636
sg56
(lp648
S':'
asbag49
(g70
g51
NtRp649
(dp650
g54
(dp651
sg63
g636
sg56
(lp652
g49
(g50
g51
NtRp653
(dp654
g54
(dp655
g62
I4
ssg63
g649
sg56
(lp656
g49
(g58
g51
NtRp657
(dp658
g54
(dp659
g62
I3
ssg63
Nsg56
(lp660
sbasbasbasbag49
(g65
g51
NtRp661
(dp662
g54
(dp663
sg63
g588
sg56
(lp664
g49
(g70
g51
NtRp665
(dp666
g54
(dp667
g74
g75
ssg63
g661
sg56
(lp668
S'cmd_options'
p669
asbag49
(g70
g51
NtRp670
(dp671
g54
(dp672
g81
g82
ssg63
g661
sg56
(lp673
S':'
asbag49
(g70
g51
NtRp674
(dp675
g54
(dp676
sg63
g661
sg56
(lp677
g49
(g50
g51
NtRp678
(dp679
g54
(dp680
g62
I4
ssg63
g674
sg56
(lp681
S"<Values at 0x25193f0: {'verbose': False, 'ip': '127.0.0.1', 'shutdown_timeout': 5, 'taskbar': False, 'nocron': False, 'pid_filename': 'httpserver.pid', 'maxthreads': None, 'softcron': False, 'server_name': 'Udi-Milos-MacBook-Pro.local', 'bpython': False, 'nogui': False, 'port': 8000, 'extcron': False, 'debuglevel': 30, 'test': None, 'folder': '/Users/udimilo/Documents/web2py', 'config': '', 'import_models': False, 'winservice': '', 'shell': None, 'run': '', 'log_filename': 'httpserver.log', 'args': [''], 'socket_timeout': 5, 'ssl_ca_certificate': None, 'scheduler': None, 'profiler_filename': None, 'ssl_private_key': '', 'password': '<ask>', 'request_queue_size': 5, 'ssl_certificate': '', 'cronjob': False, 'numthreads': None, 'quiet': False, 'interfaces': None, 'minthreads': None, 'timeout': 10, 'plain': False, 'nobanner': False}>"
p682
asbasbasbag49
(g65
g51
NtRp683
(dp684
g54
(dp685
sg63
g588
sg56
(lp686
g49
(g70
g51
NtRp687
(dp688
g54
(dp689
g74
g75
ssg63
g683
sg56
(lp690
S'db_sessions'
p691
asbag49
(g70
g51
NtRp692
(dp693
g54
(dp694
g81
g82
ssg63
g683
sg56
(lp695
S':'
asbag49
(g70
g51
NtRp696
(dp697
g54
(dp698
sg63
g683
sg56
(lp699
g49
(g50
g51
NtRp700
(dp701
g54
(dp702
g62
I4
ssg63
g696
sg56
(lp703
S'set([])'
p704
asbasbasbag49
(g65
g51
NtRp705
(dp706
g54
(dp707
sg63
g588
sg56
(lp708
g49
(g70
g51
NtRp709
(dp710
g54
(dp711
g74
g75
ssg63
g705
sg56
(lp712
S'debugging'
p713
asbag49
(g70
g51
NtRp714
(dp715
g54
(dp716
g81
g82
ssg63
g705
sg56
(lp717
S':'
asbag49
(g70
g51
NtRp718
(dp719
g54
(dp720
sg63
g705
sg56
(lp721
g49
(g50
g51
NtRp722
(dp723
g54
(dp724
g62
I4
ssg63
g718
sg56
(lp725
g92
asbasbasbag49
(g65
g51
NtRp726
(dp727
g54
(dp728
sg63
g588
sg56
(lp729
g49
(g70
g51
NtRp730
(dp731
g54
(dp732
g74
g75
ssg63
g726
sg56
(lp733
S'gluon_parent'
p734
asbag49
(g70
g51
NtRp735
(dp736
g54
(dp737
g81
g82
ssg63
g726
sg56
(lp738
S':'
asbag49
(g70
g51
NtRp739
(dp740
g54
(dp741
sg63
g726
sg56
(lp742
g49
(g50
g51
NtRp743
(dp744
g54
(dp745
g62
I4
ssg63
g739
sg56
(lp746
S'/Users/udimilo/Documents/web2py'
p747
asbasbasbag49
(g65
g51
NtRp748
(dp749
g54
(dp750
sg63
g588
sg56
(lp751
g49
(g70
g51
NtRp752
(dp753
g54
(dp754
g74
g75
ssg63
g748
sg56
(lp755
S'http_accept'
p756
asbag49
(g70
g51
NtRp757
(dp758
g54
(dp759
g81
g82
ssg63
g748
sg56
(lp760
S':'
asbag49
(g70
g51
NtRp761
(dp762
g54
(dp763
sg63
g748
sg56
(lp764
g49
(g50
g51
NtRp765
(dp766
g54
(dp767
g62
I4
ssg63
g761
sg56
(lp768
S'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
p769
asbasbasbag49
(g65
g51
NtRp770
(dp771
g54
(dp772
sg63
g588
sg56
(lp773
g49
(g70
g51
NtRp774
(dp775
g54
(dp776
g74
g75
ssg63
g770
sg56
(lp777
S'http_accept_charset'
p778
asbag49
(g70
g51
NtRp779
(dp780
g54
(dp781
g81
g82
ssg63
g770
sg56
(lp782
S':'
asbag49
(g70
g51
NtRp783
(dp784
g54
(dp785
sg63
g770
sg56
(lp786
g49
(g50
g51
NtRp787
(dp788
g54
(dp789
g62
I4
ssg63
g783
sg56
(lp790
S'ISO-8859-1,utf-8;q=0.7,*;q=0.3'
p791
asbasbasbag49
(g65
g51
NtRp792
(dp793
g54
(dp794
sg63
g588
sg56
(lp795
g49
(g70
g51
NtRp796
(dp797
g54
(dp798
g74
g75
ssg63
g792
sg56
(lp799
S'http_accept_encoding'
p800
asbag49
(g70
g51
NtRp801
(dp802
g54
(dp803
g81
g82
ssg63
g792
sg56
(lp804
S':'
asbag49
(g70
g51
NtRp805
(dp806
g54
(dp807
sg63
g792
sg56
(lp808
g49
(g50
g51
NtRp809
(dp810
g54
(dp811
g62
I4
ssg63
g805
sg56
(lp812
S'gzip,deflate,sdch'
p813
asbasbasbag49
(g65
g51
NtRp814
(dp815
g54
(dp816
sg63
g588
sg56
(lp817
g49
(g70
g51
NtRp818
(dp819
g54
(dp820
g74
g75
ssg63
g814
sg56
(lp821
S'http_accept_language'
p822
asbag49
(g70
g51
NtRp823
(dp824
g54
(dp825
g81
g82
ssg63
g814
sg56
(lp826
S':'
asbag49
(g70
g51
NtRp827
(dp828
g54
(dp829
sg63
g814
sg56
(lp830
g49
(g50
g51
NtRp831
(dp832
g54
(dp833
g62
I4
ssg63
g827
sg56
(lp834
S'en-US,en;q=0.8'
p835
asbasbasbag49
(g65
g51
NtRp836
(dp837
g54
(dp838
sg63
g588
sg56
(lp839
g49
(g70
g51
NtRp840
(dp841
g54
(dp842
g74
g75
ssg63
g836
sg56
(lp843
S'http_connection'
p844
asbag49
(g70
g51
NtRp845
(dp846
g54
(dp847
g81
g82
ssg63
g836
sg56
(lp848
S':'
asbag49
(g70
g51
NtRp849
(dp850
g54
(dp851
sg63
g836
sg56
(lp852
g49
(g50
g51
NtRp853
(dp854
g54
(dp855
g62
I4
ssg63
g849
sg56
(lp856
S'keep-alive'
p857
asbasbasbag49
(g65
g51
NtRp858
(dp859
g54
(dp860
sg63
g588
sg56
(lp861
g49
(g70
g51
NtRp862
(dp863
g54
(dp864
g74
g75
ssg63
g858
sg56
(lp865
S'http_cookie'
p866
asbag49
(g70
g51
NtRp867
(dp868
g54
(dp869
g81
g82
ssg63
g858
sg56
(lp870
S':'
asbag49
(g70
g51
NtRp871
(dp872
g54
(dp873
sg63
g858
sg56
(lp874
g49
(g50
g51
NtRp875
(dp876
g54
(dp877
g62
I4
ssg63
g871
sg56
(lp878
S'session_id_admin=127.0.0.1-87c9be7c-30e4-46b7-99db-853ad51b457b; session_id_udi0312=127.0.0.1-fcd6a577-d448-4882-b7bc-f353da84ba3b'
p879
asbasbasbag49
(g65
g51
NtRp880
(dp881
g54
(dp882
sg63
g588
sg56
(lp883
g49
(g70
g51
NtRp884
(dp885
g54
(dp886
g74
g75
ssg63
g880
sg56
(lp887
S'http_host'
p888
asbag49
(g70
g51
NtRp889
(dp890
g54
(dp891
g81
g82
ssg63
g880
sg56
(lp892
S':'
asbag49
(g70
g51
NtRp893
(dp894
g54
(dp895
sg63
g880
sg56
(lp896
g49
(g50
g51
NtRp897
(dp898
g54
(dp899
g62
I4
ssg63
g893
sg56
(lp900
S'127.0.0.1:8000'
p901
asbasbasbag49
(g65
g51
NtRp902
(dp903
g54
(dp904
sg63
g588
sg56
(lp905
g49
(g70
g51
NtRp906
(dp907
g54
(dp908
g74
g75
ssg63
g902
sg56
(lp909
S'http_referer'
p910
asbag49
(g70
g51
NtRp911
(dp912
g54
(dp913
g81
g82
ssg63
g902
sg56
(lp914
S':'
asbag49
(g70
g51
NtRp915
(dp916
g54
(dp917
sg63
g902
sg56
(lp918
g49
(g50
g51
NtRp919
(dp920
g54
(dp921
g62
I4
ssg63
g915
sg56
(lp922
S'http://127.0.0.1:8000/admin/default/site'
p923
asbasbasbag49
(g65
g51
NtRp924
(dp925
g54
(dp926
sg63
g588
sg56
(lp927
g49
(g70
g51
NtRp928
(dp929
g54
(dp930
g74
g75
ssg63
g924
sg56
(lp931
S'http_user_agent'
p932
asbag49
(g70
g51
NtRp933
(dp934
g54
(dp935
g81
g82
ssg63
g924
sg56
(lp936
S':'
asbag49
(g70
g51
NtRp937
(dp938
g54
(dp939
sg63
g924
sg56
(lp940
g49
(g50
g51
NtRp941
(dp942
g54
(dp943
g62
I4
ssg63
g937
sg56
(lp944
S'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.79 Safari/535.11'
p945
asbasbasbag49
(g65
g51
NtRp946
(dp947
g54
(dp948
sg63
g588
sg56
(lp949
g49
(g70
g51
NtRp950
(dp951
g54
(dp952
g74
g75
ssg63
g946
sg56
(lp953
S'is_jython'
p954
asbag49
(g70
g51
NtRp955
(dp956
g54
(dp957
g81
g82
ssg63
g946
sg56
(lp958
S':'
asbag49
(g70
g51
NtRp959
(dp960
g54
(dp961
sg63
g946
sg56
(lp962
g49
(g50
g51
NtRp963
(dp964
g54
(dp965
g62
I4
ssg63
g959
sg56
(lp966
g92
asbasbasbag49
(g65
g51
NtRp967
(dp968
g54
(dp969
sg63
g588
sg56
(lp970
g49
(g70
g51
NtRp971
(dp972
g54
(dp973
g74
g75
ssg63
g967
sg56
(lp974
S'is_pypy'
p975
asbag49
(g70
g51
NtRp976
(dp977
g54
(dp978
g81
g82
ssg63
g967
sg56
(lp979
S':'
asbag49
(g70
g51
NtRp980
(dp981
g54
(dp982
sg63
g967
sg56
(lp983
g49
(g50
g51
NtRp984
(dp985
g54
(dp986
g62
I4
ssg63
g980
sg56
(lp987
g92
asbasbasbag49
(g65
g51
NtRp988
(dp989
g54
(dp990
sg63
g588
sg56
(lp991
g49
(g70
g51
NtRp992
(dp993
g54
(dp994
g74
g75
ssg63
g988
sg56
(lp995
S'path_info'
p996
asbag49
(g70
g51
NtRp997
(dp998
g54
(dp999
g81
g82
ssg63
g988
sg56
(lp1000
S':'
asbag49
(g70
g51
NtRp1001
(dp1002
g54
(dp1003
sg63
g988
sg56
(lp1004
g49
(g50
g51
NtRp1005
(dp1006
g54
(dp1007
g62
I4
ssg63
g1001
sg56
(lp1008
S'/admin/default/reload_routes'
p1009
asbasbasbag49
(g65
g51
NtRp1010
(dp1011
g54
(dp1012
sg63
g588
sg56
(lp1013
g49
(g70
g51
NtRp1014
(dp1015
g54
(dp1016
g74
g75
ssg63
g1010
sg56
(lp1017
S'query_string'
p1018
asbag49
(g70
g51
NtRp1019
(dp1020
g54
(dp1021
g81
g82
ssg63
g1010
sg56
(lp1022
S':'
asbag49
(g70
g51
NtRp1023
(dp1024
g54
(dp1025
sg63
g1010
sg56
(lp1026
g49
(g50
g51
NtRp1027
(dp1028
g54
(dp1029
g62
I4
ssg63
g1023
sg56
(lp1030
S''
asbasbasbag49
(g65
g51
NtRp1031
(dp1032
g54
(dp1033
sg63
g588
sg56
(lp1034
g49
(g70
g51
NtRp1035
(dp1036
g54
(dp1037
g74
g75
ssg63
g1031
sg56
(lp1038
S'remote_addr'
p1039
asbag49
(g70
g51
NtRp1040
(dp1041
g54
(dp1042
g81
g82
ssg63
g1031
sg56
(lp1043
S':'
asbag49
(g70
g51
NtRp1044
(dp1045
g54
(dp1046
sg63
g1031
sg56
(lp1047
g49
(g50
g51
NtRp1048
(dp1049
g54
(dp1050
g62
I4
ssg63
g1044
sg56
(lp1051
g182
asbasbasbag49
(g65
g51
NtRp1052
(dp1053
g54
(dp1054
sg63
g588
sg56
(lp1055
g49
(g70
g51
NtRp1056
(dp1057
g54
(dp1058
g74
g75
ssg63
g1052
sg56
(lp1059
S'remote_port'
p1060
asbag49
(g70
g51
NtRp1061
(dp1062
g54
(dp1063
g81
g82
ssg63
g1052
sg56
(lp1064
S':'
asbag49
(g70
g51
NtRp1065
(dp1066
g54
(dp1067
sg63
g1052
sg56
(lp1068
g49
(g50
g51
NtRp1069
(dp1070
g54
(dp1071
g62
I4
ssg63
g1065
sg56
(lp1072
S'62789'
p1073
asbasbasbag49
(g65
g51
NtRp1074
(dp1075
g54
(dp1076
sg63
g588
sg56
(lp1077
g49
(g70
g51
NtRp1078
(dp1079
g54
(dp1080
g74
g75
ssg63
g1074
sg56
(lp1081
S'request_method'
p1082
asbag49
(g70
g51
NtRp1083
(dp1084
g54
(dp1085
g81
g82
ssg63
g1074
sg56
(lp1086
S':'
asbag49
(g70
g51
NtRp1087
(dp1088
g54
(dp1089
sg63
g1074
sg56
(lp1090
g49
(g50
g51
NtRp1091
(dp1092
g54
(dp1093
g62
I4
ssg63
g1087
sg56
(lp1094
S'GET'
p1095
asbasbasbag49
(g65
g51
NtRp1096
(dp1097
g54
(dp1098
sg63
g588
sg56
(lp1099
g49
(g70
g51
NtRp1100
(dp1101
g54
(dp1102
g74
g75
ssg63
g1096
sg56
(lp1103
S'request_uri'
p1104
asbag49
(g70
g51
NtRp1105
(dp1106
g54
(dp1107
g81
g82
ssg63
g1096
sg56
(lp1108
S':'
asbag49
(g70
g51
NtRp1109
(dp1110
g54
(dp1111
sg63
g1096
sg56
(lp1112
g49
(g50
g51
NtRp1113
(dp1114
g54
(dp1115
g62
I4
ssg63
g1109
sg56
(lp1116
g1009
asbasbasbag49
(g65
g51
NtRp1117
(dp1118
g54
(dp1119
sg63
g588
sg56
(lp1120
g49
(g70
g51
NtRp1121
(dp1122
g54
(dp1123
g74
g75
ssg63
g1117
sg56
(lp1124
S'script_name'
p1125
asbag49
(g70
g51
NtRp1126
(dp1127
g54
(dp1128
g81
g82
ssg63
g1117
sg56
(lp1129
S':'
asbag49
(g70
g51
NtRp1130
(dp1131
g54
(dp1132
sg63
g1117
sg56
(lp1133
g49
(g50
g51
NtRp1134
(dp1135
g54
(dp1136
g62
I4
ssg63
g1130
sg56
(lp1137
S''
asbasbasbag49
(g65
g51
NtRp1138
(dp1139
g54
(dp1140
sg63
g588
sg56
(lp1141
g49
(g70
g51
NtRp1142
(dp1143
g54
(dp1144
g74
g75
ssg63
g1138
sg56
(lp1145
S'server_name'
p1146
asbag49
(g70
g51
NtRp1147
(dp1148
g54
(dp1149
g81
g82
ssg63
g1138
sg56
(lp1150
S':'
asbag49
(g70
g51
NtRp1151
(dp1152
g54
(dp1153
sg63
g1138
sg56
(lp1154
g49
(g50
g51
NtRp1155
(dp1156
g54
(dp1157
g62
I4
ssg63
g1151
sg56
(lp1158
S'Udi-Milos-MacBook-Pro.local'
p1159
asbasbasbag49
(g65
g51
NtRp1160
(dp1161
g54
(dp1162
sg63
g588
sg56
(lp1163
g49
(g70
g51
NtRp1164
(dp1165
g54
(dp1166
g74
g75
ssg63
g1160
sg56
(lp1167
S'server_port'
p1168
asbag49
(g70
g51
NtRp1169
(dp1170
g54
(dp1171
g81
g82
ssg63
g1160
sg56
(lp1172
S':'
asbag49
(g70
g51
NtRp1173
(dp1174
g54
(dp1175
sg63
g1160
sg56
(lp1176
g49
(g50
g51
NtRp1177
(dp1178
g54
(dp1179
g62
I4
ssg63
g1173
sg56
(lp1180
S'8000'
p1181
asbasbasbag49
(g65
g51
NtRp1182
(dp1183
g54
(dp1184
sg63
g588
sg56
(lp1185
g49
(g70
g51
NtRp1186
(dp1187
g54
(dp1188
g74
g75
ssg63
g1182
sg56
(lp1189
S'server_protocol'
p1190
asbag49
(g70
g51
NtRp1191
(dp1192
g54
(dp1193
g81
g82
ssg63
g1182
sg56
(lp1194
S':'
asbag49
(g70
g51
NtRp1195
(dp1196
g54
(dp1197
sg63
g1182
sg56
(lp1198
g49
(g50
g51
NtRp1199
(dp1200
g54
(dp1201
g62
I4
ssg63
g1195
sg56
(lp1202
S'HTTP/1.1'
p1203
asbasbasbag49
(g65
g51
NtRp1204
(dp1205
g54
(dp1206
sg63
g588
sg56
(lp1207
g49
(g70
g51
NtRp1208
(dp1209
g54
(dp1210
g74
g75
ssg63
g1204
sg56
(lp1211
S'server_software'
p1212
asbag49
(g70
g51
NtRp1213
(dp1214
g54
(dp1215
g81
g82
ssg63
g1204
sg56
(lp1216
S':'
asbag49
(g70
g51
NtRp1217
(dp1218
g54
(dp1219
sg63
g1204
sg56
(lp1220
g49
(g50
g51
NtRp1221
(dp1222
g54
(dp1223
g62
I4
ssg63
g1217
sg56
(lp1224
S'Rocket 1.2.4'
p1225
asbasbasbag49
(g65
g51
NtRp1226
(dp1227
g54
(dp1228
sg63
g588
sg56
(lp1229
g49
(g70
g51
NtRp1230
(dp1231
g54
(dp1232
g74
g75
ssg63
g1226
sg56
(lp1233
S'web2py_crontype'
p1234
asbag49
(g70
g51
NtRp1235
(dp1236
g54
(dp1237
g81
g82
ssg63
g1226
sg56
(lp1238
S':'
asbag49
(g70
g51
NtRp1239
(dp1240
g54
(dp1241
sg63
g1226
sg56
(lp1242
g49
(g50
g51
NtRp1243
(dp1244
g54
(dp1245
g62
I4
ssg63
g1239
sg56
(lp1246
S'hard'
p1247
asbasbasbag49
(g65
g51
NtRp1248
(dp1249
g54
(dp1250
sg63
g588
sg56
(lp1251
g49
(g70
g51
NtRp1252
(dp1253
g54
(dp1254
g74
g75
ssg63
g1248
sg56
(lp1255
S'web2py_original_uri'
p1256
asbag49
(g70
g51
NtRp1257
(dp1258
g54
(dp1259
g81
g82
ssg63
g1248
sg56
(lp1260
S':'
asbag49
(g70
g51
NtRp1261
(dp1262
g54
(dp1263
sg63
g1248
sg56
(lp1264
g49
(g50
g51
NtRp1265
(dp1266
g54
(dp1267
g62
I4
ssg63
g1261
sg56
(lp1268
S'/admin/default/reload_routes'
p1269
asbasbasbag49
(g65
g51
NtRp1270
(dp1271
g54
(dp1272
sg63
g588
sg56
(lp1273
g49
(g70
g51
NtRp1274
(dp1275
g54
(dp1276
g74
g75
ssg63
g1270
sg56
(lp1277
S'web2py_path'
p1278
asbag49
(g70
g51
NtRp1279
(dp1280
g54
(dp1281
g81
g82
ssg63
g1270
sg56
(lp1282
S':'
asbag49
(g70
g51
NtRp1283
(dp1284
g54
(dp1285
sg63
g1270
sg56
(lp1286
g49
(g50
g51
NtRp1287
(dp1288
g54
(dp1289
g62
I4
ssg63
g1283
sg56
(lp1290
g635
asbasbasbag49
(g65
g51
NtRp1291
(dp1292
g54
(dp1293
sg63
g588
sg56
(lp1294
g49
(g70
g51
NtRp1295
(dp1296
g54
(dp1297
g74
g75
ssg63
g1291
sg56
(lp1298
S'web2py_version'
p1299
asbag49
(g70
g51
NtRp1300
(dp1301
g54
(dp1302
g81
g82
ssg63
g1291
sg56
(lp1303
S':'
asbag49
(g70
g51
NtRp1304
(dp1305
g54
(dp1306
sg63
g1291
sg56
(lp1307
g49
(g50
g51
NtRp1308
(dp1309
g54
(dp1310
g62
I4
ssg63
g1304
sg56
(lp1311
g49
(g58
g51
NtRp1312
(dp1313
g54
(dp1314
g62
I3
ssg63
Nsg56
(lp1315
g49
(g65
g51
NtRp1316
(dp1317
g54
(dp1318
sg63
g1312
sg56
(lp1319
g49
(g70
g51
NtRp1320
(dp1321
g54
(dp1322
sg63
g1316
sg56
(lp1323
g49
(g50
g51
NtRp1324
(dp1325
g54
(dp1326
g62
I3
ssg63
g1320
sg56
(lp1327
S'1'
asbasbasbag49
(g65
g51
NtRp1328
(dp1329
g54
(dp1330
sg63
g1312
sg56
(lp1331
g49
(g70
g51
NtRp1332
(dp1333
g54
(dp1334
sg63
g1328
sg56
(lp1335
g49
(g50
g51
NtRp1336
(dp1337
g54
(dp1338
g62
I3
ssg63
g1332
sg56
(lp1339
S'99'
p1340
asbasbasbag49
(g65
g51
NtRp1341
(dp1342
g54
(dp1343
sg63
g1312
sg56
(lp1344
g49
(g70
g51
NtRp1345
(dp1346
g54
(dp1347
sg63
g1341
sg56
(lp1348
g49
(g50
g51
NtRp1349
(dp1350
g54
(dp1351
g62
I3
ssg63
g1345
sg56
(lp1352
S'7'
asbasbasbag49
(g65
g51
NtRp1353
(dp1354
g54
(dp1355
sg63
g1312
sg56
(lp1356
g49
(g70
g51
NtRp1357
(dp1358
g54
(dp1359
sg63
g1353
sg56
(lp1360
g49
(g50
g51
NtRp1361
(dp1362
g54
(dp1363
g62
I3
ssg63
g1357
sg56
(lp1364
S'datetime.datetime(2012, 3, 4, 22, 12, 8)'
p1365
asbasbasbag49
(g65
g51
NtRp1366
(dp1367
g54
(dp1368
sg63
g1312
sg56
(lp1369
g49
(g70
g51
NtRp1370
(dp1371
g54
(dp1372
sg63
g1366
sg56
(lp1373
g49
(g50
g51
NtRp1374
(dp1375
g54
(dp1376
g62
I3
ssg63
g1370
sg56
(lp1377
S'stable'
p1378
asbasbasbasbasbasbasbag49
(g65
g51
NtRp1379
(dp1380
g54
(dp1381
sg63
g588
sg56
(lp1382
g49
(g70
g51
NtRp1383
(dp1384
g54
(dp1385
g74
g75
ssg63
g1379
sg56
(lp1386
S'wsgi_errors'
p1387
asbag49
(g70
g51
NtRp1388
(dp1389
g54
(dp1390
g81
g82
ssg63
g1379
sg56
(lp1391
S':'
asbag49
(g70
g51
NtRp1392
(dp1393
g54
(dp1394
sg63
g1379
sg56
(lp1395
g49
(g50
g51
NtRp1396
(dp1397
g54
(dp1398
g62
I4
ssg63
g1392
sg56
(lp1399
S"<open file '<stderr>', mode 'w' at 0x4220b0>"
p1400
asbasbasbag49
(g65
g51
NtRp1401
(dp1402
g54
(dp1403
sg63
g588
sg56
(lp1404
g49
(g70
g51
NtRp1405
(dp1406
g54
(dp1407
g74
g75
ssg63
g1401
sg56
(lp1408
S'wsgi_file_wrapper'
p1409
asbag49
(g70
g51
NtRp1410
(dp1411
g54
(dp1412
g81
g82
ssg63
g1401
sg56
(lp1413
S':'
asbag49
(g70
g51
NtRp1414
(dp1415
g54
(dp1416
sg63
g1401
sg56
(lp1417
g49
(g50
g51
NtRp1418
(dp1419
g54
(dp1420
g62
I4
ssg63
g1414
sg56
(lp1421
S'<class wsgiref.util.FileWrapper at 0x245e6c0>'
p1422
asbasbasbag49
(g65
g51
NtRp1423
(dp1424
g54
(dp1425
sg63
g588
sg56
(lp1426
g49
(g70
g51
NtRp1427
(dp1428
g54
(dp1429
g74
g75
ssg63
g1423
sg56
(lp1430
S'wsgi_input'
p1431
asbag49
(g70
g51
NtRp1432
(dp1433
g54
(dp1434
g81
g82
ssg63
g1423
sg56
(lp1435
S':'
asbag49
(g70
g51
NtRp1436
(dp1437
g54
(dp1438
sg63
g1423
sg56
(lp1439
g49
(g50
g51
NtRp1440
(dp1441
g54
(dp1442
g62
I4
ssg63
g1436
sg56
(lp1443
S'<socket._fileobject object at 0xa446c70>'
p1444
asbasbasbag49
(g65
g51
NtRp1445
(dp1446
g54
(dp1447
sg63
g588
sg56
(lp1448
g49
(g70
g51
NtRp1449
(dp1450
g54
(dp1451
g74
g75
ssg63
g1445
sg56
(lp1452
S'wsgi_multiprocess'
p1453
asbag49
(g70
g51
NtRp1454
(dp1455
g54
(dp1456
g81
g82
ssg63
g1445
sg56
(lp1457
S':'
asbag49
(g70
g51
NtRp1458
(dp1459
g54
(dp1460
sg63
g1445
sg56
(lp1461
g49
(g50
g51
NtRp1462
(dp1463
g54
(dp1464
g62
I4
ssg63
g1458
sg56
(lp1465
g92
asbasbasbag49
(g65
g51
NtRp1466
(dp1467
g54
(dp1468
sg63
g588
sg56
(lp1469
g49
(g70
g51
NtRp1470
(dp1471
g54
(dp1472
g74
g75
ssg63
g1466
sg56
(lp1473
S'wsgi_multithread'
p1474
asbag49
(g70
g51
NtRp1475
(dp1476
g54
(dp1477
g81
g82
ssg63
g1466
sg56
(lp1478
S':'
asbag49
(g70
g51
NtRp1479
(dp1480
g54
(dp1481
sg63
g1466
sg56
(lp1482
g49
(g50
g51
NtRp1483
(dp1484
g54
(dp1485
g62
I4
ssg63
g1479
sg56
(lp1486
S'True'
p1487
asbasbasbag49
(g65
g51
NtRp1488
(dp1489
g54
(dp1490
sg63
g588
sg56
(lp1491
g49
(g70
g51
NtRp1492
(dp1493
g54
(dp1494
g74
g75
ssg63
g1488
sg56
(lp1495
S'wsgi_run_once'
p1496
asbag49
(g70
g51
NtRp1497
(dp1498
g54
(dp1499
g81
g82
ssg63
g1488
sg56
(lp1500
S':'
asbag49
(g70
g51
NtRp1501
(dp1502
g54
(dp1503
sg63
g1488
sg56
(lp1504
g49
(g50
g51
NtRp1505
(dp1506
g54
(dp1507
g62
I4
ssg63
g1501
sg56
(lp1508
g92
asbasbasbag49
(g65
g51
NtRp1509
(dp1510
g54
(dp1511
sg63
g588
sg56
(lp1512
g49
(g70
g51
NtRp1513
(dp1514
g54
(dp1515
g74
g75
ssg63
g1509
sg56
(lp1516
S'wsgi_url_scheme'
p1517
asbag49
(g70
g51
NtRp1518
(dp1519
g54
(dp1520
g81
g82
ssg63
g1509
sg56
(lp1521
S':'
asbag49
(g70
g51
NtRp1522
(dp1523
g54
(dp1524
sg63
g1509
sg56
(lp1525
g49
(g50
g51
NtRp1526
(dp1527
g54
(dp1528
g62
I4
ssg63
g1522
sg56
(lp1529
S'http'
p1530
asbasbasbag49
(g65
g51
NtRp1531
(dp1532
g54
(dp1533
sg63
g588
sg56
(lp1534
g49
(g70
g51
NtRp1535
(dp1536
g54
(dp1537
g74
g75
ssg63
g1531
sg56
(lp1538
S'wsgi_version'
p1539
asbag49
(g70
g51
NtRp1540
(dp1541
g54
(dp1542
g81
g82
ssg63
g1531
sg56
(lp1543
S':'
asbag49
(g70
g51
NtRp1544
(dp1545
g54
(dp1546
sg63
g1531
sg56
(lp1547
g49
(g50
g51
NtRp1548
(dp1549
g54
(dp1550
g62
I4
ssg63
g1544
sg56
(lp1551
g49
(g58
g51
NtRp1552
(dp1553
g54
(dp1554
g62
I3
ssg63
Nsg56
(lp1555
g49
(g65
g51
NtRp1556
(dp1557
g54
(dp1558
sg63
g1552
sg56
(lp1559
g49
(g70
g51
NtRp1560
(dp1561
g54
(dp1562
sg63
g1556
sg56
(lp1563
g49
(g50
g51
NtRp1564
(dp1565
g54
(dp1566
g62
I3
ssg63
g1560
sg56
(lp1567
S'1'
asbasbasbag49
(g65
g51
NtRp1568
(dp1569
g54
(dp1570
sg63
g1552
sg56
(lp1571
g49
(g70
g51
NtRp1572
(dp1573
g54
(dp1574
sg63
g1568
sg56
(lp1575
g49
(g50
g51
NtRp1576
(dp1577
g54
(dp1578
g62
I3
ssg63
g1572
sg56
(lp1579
S'0'
asbasbasbasbasbasbasbasbasbasbasbag49
(g65
g51
NtRp1580
(dp1581
g54
(dp1582
sg63
g59
sg56
(lp1583
g49
(g70
g51
NtRp1584
(dp1585
g54
(dp1586
g74
g75
ssg63
g1580
sg56
(lp1587
S'extension'
p1588
asbag49
(g70
g51
NtRp1589
(dp1590
g54
(dp1591
g81
g82
ssg63
g1580
sg56
(lp1592
S':'
asbag49
(g70
g51
NtRp1593
(dp1594
g54
(dp1595
sg63
g1580
sg56
(lp1596
g49
(g50
g51
NtRp1597
(dp1598
g54
(dp1599
g62
I5
ssg63
g1593
sg56
(lp1600
S'html'
p1601
asbasbasbag49
(g65
g51
NtRp1602
(dp1603
g54
(dp1604
sg63
g59
sg56
(lp1605
g49
(g70
g51
NtRp1606
(dp1607
g54
(dp1608
g74
g75
ssg63
g1602
sg56
(lp1609
S'folder'
p1610
asbag49
(g70
g51
NtRp1611
(dp1612
g54
(dp1613
g81
g82
ssg63
g1602
sg56
(lp1614
S':'
asbag49
(g70
g51
NtRp1615
(dp1616
g54
(dp1617
sg63
g1602
sg56
(lp1618
g49
(g50
g51
NtRp1619
(dp1620
g54
(dp1621
g62
I5
ssg63
g1615
sg56
(lp1622
S'/Users/udimilo/Documents/web2py/applications/admin/'
p1623
asbasbasbag49
(g65
g51
NtRp1624
(dp1625
g54
(dp1626
sg63
g59
sg56
(lp1627
g49
(g70
g51
NtRp1628
(dp1629
g54
(dp1630
g74
g75
ssg63
g1624
sg56
(lp1631
S'function'
p1632
asbag49
(g70
g51
NtRp1633
(dp1634
g54
(dp1635
g81
g82
ssg63
g1624
sg56
(lp1636
S':'
asbag49
(g70
g51
NtRp1637
(dp1638
g54
(dp1639
sg63
g1624
sg56
(lp1640
g49
(g50
g51
NtRp1641
(dp1642
g54
(dp1643
g62
I5
ssg63
g1637
sg56
(lp1644
S'reload_routes'
p1645
asbasbasbag49
(g65
g51
NtRp1646
(dp1647
g54
(dp1648
sg63
g59
sg56
(lp1649
g49
(g70
g51
NtRp1650
(dp1651
g54
(dp1652
g74
g75
ssg63
g1646
sg56
(lp1653
S'get_vars'
p1654
asbag49
(g70
g51
NtRp1655
(dp1656
g54
(dp1657
g81
g82
ssg63
g1646
sg56
(lp1658
S':'
asbag49
(g70
g51
NtRp1659
(dp1660
g54
(dp1661
sg63
g1646
sg56
(lp1662
g49
(g50
g51
NtRp1663
(dp1664
g54
(dp1665
g62
I5
ssg63
g1659
sg56
(lp1666
g49
(g58
g51
NtRp1667
(dp1668
g54
(dp1669
g62
I4
ssg63
Nsg56
(lp1670
sbasbasbasbag49
(g65
g51
NtRp1671
(dp1672
g54
(dp1673
sg63
g59
sg56
(lp1674
g49
(g70
g51
NtRp1675
(dp1676
g54
(dp1677
g74
g75
ssg63
g1671
sg56
(lp1678
S'global_settings'
p1679
asbag49
(g70
g51
NtRp1680
(dp1681
g54
(dp1682
g81
g82
ssg63
g1671
sg56
(lp1683
S':'
asbag49
(g70
g51
NtRp1684
(dp1685
g54
(dp1686
sg63
g1671
sg56
(lp1687
g49
(g50
g51
NtRp1688
(dp1689
g54
(dp1690
g62
I5
ssg63
g1684
sg56
(lp1691
g49
(g58
g51
NtRp1692
(dp1693
g54
(dp1694
g62
I4
ssg63
Nsg56
(lp1695
g49
(g65
g51
NtRp1696
(dp1697
g54
(dp1698
sg63
g1692
sg56
(lp1699
g49
(g70
g51
NtRp1700
(dp1701
g54
(dp1702
g74
g75
ssg63
g1696
sg56
(lp1703
g600
asbag49
(g70
g51
NtRp1704
(dp1705
g54
(dp1706
g81
g82
ssg63
g1696
sg56
(lp1707
S':'
asbag49
(g70
g51
NtRp1708
(dp1709
g54
(dp1710
sg63
g1696
sg56
(lp1711
g49
(g50
g51
NtRp1712
(dp1713
g54
(dp1714
g62
I4
ssg63
g1708
sg56
(lp1715
S"set(['/Users/udimilo/Documents/web2py/applications/udi0312/', '/Users/udimilo/Documents/web2py/applications/admin/'])"
p1716
asbasbasbag49
(g65
g51
NtRp1717
(dp1718
g54
(dp1719
sg63
g1692
sg56
(lp1720
g49
(g70
g51
NtRp1721
(dp1722
g54
(dp1723
g74
g75
ssg63
g1717
sg56
(lp1724
g622
asbag49
(g70
g51
NtRp1725
(dp1726
g54
(dp1727
g81
g82
ssg63
g1717
sg56
(lp1728
S':'
asbag49
(g70
g51
NtRp1729
(dp1730
g54
(dp1731
sg63
g1717
sg56
(lp1732
g49
(g50
g51
NtRp1733
(dp1734
g54
(dp1735
g62
I4
ssg63
g1729
sg56
(lp1736
g635
asbasbasbag49
(g65
g51
NtRp1737
(dp1738
g54
(dp1739
sg63
g1692
sg56
(lp1740
g49
(g70
g51
NtRp1741
(dp1742
g54
(dp1743
g74
g75
ssg63
g1737
sg56
(lp1744
g644
asbag49
(g70
g51
NtRp1745
(dp1746
g54
(dp1747
g81
g82
ssg63
g1737
sg56
(lp1748
S':'
asbag49
(g70
g51
NtRp1749
(dp1750
g54
(dp1751
sg63
g1737
sg56
(lp1752
g49
(g50
g51
NtRp1753
(dp1754
g54
(dp1755
g62
I4
ssg63
g1749
sg56
(lp1756
g49
(g58
g51
NtRp1757
(dp1758
g54
(dp1759
g62
I3
ssg63
Nsg56
(lp1760
sbasbasbasbag49
(g65
g51
NtRp1761
(dp1762
g54
(dp1763
sg63
g1692
sg56
(lp1764
g49
(g70
g51
NtRp1765
(dp1766
g54
(dp1767
g74
g75
ssg63
g1761
sg56
(lp1768
g669
asbag49
(g70
g51
NtRp1769
(dp1770
g54
(dp1771
g81
g82
ssg63
g1761
sg56
(lp1772
S':'
asbag49
(g70
g51
NtRp1773
(dp1774
g54
(dp1775
sg63
g1761
sg56
(lp1776
g49
(g50
g51
NtRp1777
(dp1778
g54
(dp1779
g62
I4
ssg63
g1773
sg56
(lp1780
S"<Values at 0x25193f0: {'verbose': False, 'ip': '127.0.0.1', 'shutdown_timeout': 5, 'taskbar': False, 'nocron': False, 'pid_filename': 'httpserver.pid', 'maxthreads': None, 'softcron': False, 'server_name': 'Udi-Milos-MacBook-Pro.local', 'bpython': False, 'nogui': False, 'port': 8000, 'extcron': False, 'debuglevel': 30, 'test': None, 'folder': '/Users/udimilo/Documents/web2py', 'config': '', 'import_models': False, 'winservice': '', 'shell': None, 'run': '', 'log_filename': 'httpserver.log', 'args': [''], 'socket_timeout': 5, 'ssl_ca_certificate': None, 'scheduler': None, 'profiler_filename': None, 'ssl_private_key': '', 'password': '<ask>', 'request_queue_size': 5, 'ssl_certificate': '', 'cronjob': False, 'numthreads': None, 'quiet': False, 'interfaces': None, 'minthreads': None, 'timeout': 10, 'plain': False, 'nobanner': False}>"
p1781
asbasbasbag49
(g65
g51
NtRp1782
(dp1783
g54
(dp1784
sg63
g1692
sg56
(lp1785
g49
(g70
g51
NtRp1786
(dp1787
g54
(dp1788
g74
g75
ssg63
g1782
sg56
(lp1789
g691
asbag49
(g70
g51
NtRp1790
(dp1791
g54
(dp1792
g81
g82
ssg63
g1782
sg56
(lp1793
S':'
asbag49
(g70
g51
NtRp1794
(dp1795
g54
(dp1796
sg63
g1782
sg56
(lp1797
g49
(g50
g51
NtRp1798
(dp1799
g54
(dp1800
g62
I4
ssg63
g1794
sg56
(lp1801
S'set([])'
p1802
asbasbasbag49
(g65
g51
NtRp1803
(dp1804
g54
(dp1805
sg63
g1692
sg56
(lp1806
g49
(g70
g51
NtRp1807
(dp1808
g54
(dp1809
g74
g75
ssg63
g1803
sg56
(lp1810
g713
asbag49
(g70
g51
NtRp1811
(dp1812
g54
(dp1813
g81
g82
ssg63
g1803
sg56
(lp1814
S':'
asbag49
(g70
g51
NtRp1815
(dp1816
g54
(dp1817
sg63
g1803
sg56
(lp1818
g49
(g50
g51
NtRp1819
(dp1820
g54
(dp1821
g62
I4
ssg63
g1815
sg56
(lp1822
g92
asbasbasbag49
(g65
g51
NtRp1823
(dp1824
g54
(dp1825
sg63
g1692
sg56
(lp1826
g49
(g70
g51
NtRp1827
(dp1828
g54
(dp1829
g74
g75
ssg63
g1823
sg56
(lp1830
g734
asbag49
(g70
g51
NtRp1831
(dp1832
g54
(dp1833
g81
g82
ssg63
g1823
sg56
(lp1834
S':'
asbag49
(g70
g51
NtRp1835
(dp1836
g54
(dp1837
sg63
g1823
sg56
(lp1838
g49
(g50
g51
NtRp1839
(dp1840
g54
(dp1841
g62
I4
ssg63
g1835
sg56
(lp1842
g747
asbasbasbag49
(g65
g51
NtRp1843
(dp1844
g54
(dp1845
sg63
g1692
sg56
(lp1846
g49
(g70
g51
NtRp1847
(dp1848
g54
(dp1849
g74
g75
ssg63
g1843
sg56
(lp1850
g954
asbag49
(g70
g51
NtRp1851
(dp1852
g54
(dp1853
g81
g82
ssg63
g1843
sg56
(lp1854
S':'
asbag49
(g70
g51
NtRp1855
(dp1856
g54
(dp1857
sg63
g1843
sg56
(lp1858
g49
(g50
g51
NtRp1859
(dp1860
g54
(dp1861
g62
I4
ssg63
g1855
sg56
(lp1862
g92
asbasbasbag49
(g65
g51
NtRp1863
(dp1864
g54
(dp1865
sg63
g1692
sg56
(lp1866
g49
(g70
g51
NtRp1867
(dp1868
g54
(dp1869
g74
g75
ssg63
g1863
sg56
(lp1870
g975
asbag49
(g70
g51
NtRp1871
(dp1872
g54
(dp1873
g81
g82
ssg63
g1863
sg56
(lp1874
S':'
asbag49
(g70
g51
NtRp1875
(dp1876
g54
(dp1877
sg63
g1863
sg56
(lp1878
g49
(g50
g51
NtRp1879
(dp1880
g54
(dp1881
g62
I4
ssg63
g1875
sg56
(lp1882
g92
asbasbasbag49
(g65
g51
NtRp1883
(dp1884
g54
(dp1885
sg63
g1692
sg56
(lp1886
g49
(g70
g51
NtRp1887
(dp1888
g54
(dp1889
g74
g75
ssg63
g1883
sg56
(lp1890
g1234
asbag49
(g70
g51
NtRp1891
(dp1892
g54
(dp1893
g81
g82
ssg63
g1883
sg56
(lp1894
S':'
asbag49
(g70
g51
NtRp1895
(dp1896
g54
(dp1897
sg63
g1883
sg56
(lp1898
g49
(g50
g51
NtRp1899
(dp1900
g54
(dp1901
g62
I4
ssg63
g1895
sg56
(lp1902
g1247
asbasbasbag49
(g65
g51
NtRp1903
(dp1904
g54
(dp1905
sg63
g1692
sg56
(lp1906
g49
(g70
g51
NtRp1907
(dp1908
g54
(dp1909
g74
g75
ssg63
g1903
sg56
(lp1910
g1299
asbag49
(g70
g51
NtRp1911
(dp1912
g54
(dp1913
g81
g82
ssg63
g1903
sg56
(lp1914
S':'
asbag49
(g70
g51
NtRp1915
(dp1916
g54
(dp1917
sg63
g1903
sg56
(lp1918
g49
(g50
g51
NtRp1919
(dp1920
g54
(dp1921
g62
I4
ssg63
g1915
sg56
(lp1922
g49
(g58
g51
NtRp1923
(dp1924
g54
(dp1925
g62
I3
ssg63
Nsg56
(lp1926
g49
(g65
g51
NtRp1927
(dp1928
g54
(dp1929
sg63
g1923
sg56
(lp1930
g49
(g70
g51
NtRp1931
(dp1932
g54
(dp1933
sg63
g1927
sg56
(lp1934
g49
(g50
g51
NtRp1935
(dp1936
g54
(dp1937
g62
I3
ssg63
g1931
sg56
(lp1938
S'1'
asbasbasbag49
(g65
g51
NtRp1939
(dp1940
g54
(dp1941
sg63
g1923
sg56
(lp1942
g49
(g70
g51
NtRp1943
(dp1944
g54
(dp1945
sg63
g1939
sg56
(lp1946
g49
(g50
g51
NtRp1947
(dp1948
g54
(dp1949
g62
I3
ssg63
g1943
sg56
(lp1950
S'99'
p1951
asbasbasbag49
(g65
g51
NtRp1952
(dp1953
g54
(dp1954
sg63
g1923
sg56
(lp1955
g49
(g70
g51
NtRp1956
(dp1957
g54
(dp1958
sg63
g1952
sg56
(lp1959
g49
(g50
g51
NtRp1960
(dp1961
g54
(dp1962
g62
I3
ssg63
g1956
sg56
(lp1963
S'7'
asbasbasbag49
(g65
g51
NtRp1964
(dp1965
g54
(dp1966
sg63
g1923
sg56
(lp1967
g49
(g70
g51
NtRp1968
(dp1969
g54
(dp1970
sg63
g1964
sg56
(lp1971
g49
(g50
g51
NtRp1972
(dp1973
g54
(dp1974
g62
I3
ssg63
g1968
sg56
(lp1975
S'datetime.datetime(2012, 3, 4, 22, 12, 8)'
p1976
asbasbasbag49
(g65
g51
NtRp1977
(dp1978
g54
(dp1979
sg63
g1923
sg56
(lp1980
g49
(g70
g51
NtRp1981
(dp1982
g54
(dp1983
sg63
g1977
sg56
(lp1984
g49
(g50
g51
NtRp1985
(dp1986
g54
(dp1987
g62
I3
ssg63
g1981
sg56
(lp1988
g1378
asbasbasbasbasbasbasbasbasbasbasbag49
(g65
g51
NtRp1989
(dp1990
g54
(dp1991
sg63
g59
sg56
(lp1992
g49
(g70
g51
NtRp1993
(dp1994
g54
(dp1995
g74
g75
ssg63
g1989
sg56
(lp1996
S'is_https'
p1997
asbag49
(g70
g51
NtRp1998
(dp1999
g54
(dp2000
g81
g82
ssg63
g1989
sg56
(lp2001
S':'
asbag49
(g70
g51
NtRp2002
(dp2003
g54
(dp2004
sg63
g1989
sg56
(lp2005
g49
(g50
g51
NtRp2006
(dp2007
g54
(dp2008
g62
I5
ssg63
g2002
sg56
(lp2009
g92
asbasbasbag49
(g65
g51
NtRp2010
(dp2011
g54
(dp2012
sg63
g59
sg56
(lp2013
g49
(g70
g51
NtRp2014
(dp2015
g54
(dp2016
g74
g75
ssg63
g2010
sg56
(lp2017
S'is_local'
p2018
asbag49
(g70
g51
NtRp2019
(dp2020
g54
(dp2021
g81
g82
ssg63
g2010
sg56
(lp2022
S':'
asbag49
(g70
g51
NtRp2023
(dp2024
g54
(dp2025
sg63
g2010
sg56
(lp2026
g49
(g50
g51
NtRp2027
(dp2028
g54
(dp2029
g62
I5
ssg63
g2023
sg56
(lp2030
g1487
asbasbasbag49
(g65
g51
NtRp2031
(dp2032
g54
(dp2033
sg63
g59
sg56
(lp2034
g49
(g70
g51
NtRp2035
(dp2036
g54
(dp2037
g74
g75
ssg63
g2031
sg56
(lp2038
S'is_restful'
p2039
asbag49
(g70
g51
NtRp2040
(dp2041
g54
(dp2042
g81
g82
ssg63
g2031
sg56
(lp2043
S':'
asbag49
(g70
g51
NtRp2044
(dp2045
g54
(dp2046
sg63
g2031
sg56
(lp2047
g49
(g50
g51
NtRp2048
(dp2049
g54
(dp2050
g62
I5
ssg63
g2044
sg56
(lp2051
g92
asbasbasbag49
(g65
g51
NtRp2052
(dp2053
g54
(dp2054
sg63
g59
sg56
(lp2055
g49
(g70
g51
NtRp2056
(dp2057
g54
(dp2058
g74
g75
ssg63
g2052
sg56
(lp2059
S'now'
p2060
asbag49
(g70
g51
NtRp2061
(dp2062
g54
(dp2063
g81
g82
ssg63
g2052
sg56
(lp2064
S':'
asbag49
(g70
g51
NtRp2065
(dp2066
g54
(dp2067
sg63
g2052
sg56
(lp2068
g49
(g50
g51
NtRp2069
(dp2070
g54
(dp2071
g62
I5
ssg63
g2065
sg56
(lp2072
S'datetime.datetime(2012, 3, 17, 22, 29, 51, 759583)'
p2073
asbasbasbag49
(g65
g51
NtRp2074
(dp2075
g54
(dp2076
sg63
g59
sg56
(lp2077
g49
(g70
g51
NtRp2078
(dp2079
g54
(dp2080
g74
g75
ssg63
g2074
sg56
(lp2081
S'post_vars'
p2082
asbag49
(g70
g51
NtRp2083
(dp2084
g54
(dp2085
g81
g82
ssg63
g2074
sg56
(lp2086
S':'
asbag49
(g70
g51
NtRp2087
(dp2088
g54
(dp2089
sg63
g2074
sg56
(lp2090
g49
(g50
g51
NtRp2091
(dp2092
g54
(dp2093
g62
I5
ssg63
g2087
sg56
(lp2094
g49
(g58
g51
NtRp2095
(dp2096
g54
(dp2097
g62
I4
ssg63
Nsg56
(lp2098
sbasbasbasbag49
(g65
g51
NtRp2099
(dp2100
g54
(dp2101
sg63
g59
sg56
(lp2102
g49
(g70
g51
NtRp2103
(dp2104
g54
(dp2105
g74
g75
ssg63
g2099
sg56
(lp2106
S'url'
p2107
asbag49
(g70
g51
NtRp2108
(dp2109
g54
(dp2110
g81
g82
ssg63
g2099
sg56
(lp2111
S':'
asbag49
(g70
g51
NtRp2112
(dp2113
g54
(dp2114
sg63
g2099
sg56
(lp2115
g49
(g50
g51
NtRp2116
(dp2117
g54
(dp2118
g62
I5
ssg63
g2112
sg56
(lp2119
S'/admin/default/reload_routes'
p2120
asbasbasbag49
(g65
g51
NtRp2121
(dp2122
g54
(dp2123
sg63
g59
sg56
(lp2124
g49
(g70
g51
NtRp2125
(dp2126
g54
(dp2127
g74
g75
ssg63
g2121
sg56
(lp2128
S'utcnow'
p2129
asbag49
(g70
g51
NtRp2130
(dp2131
g54
(dp2132
g81
g82
ssg63
g2121
sg56
(lp2133
S':'
asbag49
(g70
g51
NtRp2134
(dp2135
g54
(dp2136
sg63
g2121
sg56
(lp2137
g49
(g50
g51
NtRp2138
(dp2139
g54
(dp2140
g62
I5
ssg63
g2134
sg56
(lp2141
S'datetime.datetime(2012, 3, 18, 2, 29, 51, 759598)'
p2142
asbasbasbag49
(g65
g51
NtRp2143
(dp2144
g54
(dp2145
sg63
g59
sg56
(lp2146
g49
(g70
g51
NtRp2147
(dp2148
g54
(dp2149
g74
g75
ssg63
g2143
sg56
(lp2150
S'uuid'
p2151
asbag49
(g70
g51
NtRp2152
(dp2153
g54
(dp2154
g81
g82
ssg63
g2143
sg56
(lp2155
S':'
asbag49
(g70
g51
NtRp2156
(dp2157
g54
(dp2158
sg63
g2143
sg56
(lp2159
g49
(g50
g51
NtRp2160
(dp2161
g54
(dp2162
g62
I5
ssg63
g2156
sg56
(lp2163
S'admin/127.0.0.1.2012-03-17.22-29-51.080ff8be-0e82-4dc1-be2a-154024c83e8c'
p2164
asbasbasbag49
(g65
g51
NtRp2165
(dp2166
g54
(dp2167
sg63
g59
sg56
(lp2168
g49
(g70
g51
NtRp2169
(dp2170
g54
(dp2171
g74
g75
ssg63
g2165
sg56
(lp2172
S'vars'
p2173
asbag49
(g70
g51
NtRp2174
(dp2175
g54
(dp2176
g81
g82
ssg63
g2165
sg56
(lp2177
S':'
asbag49
(g70
g51
NtRp2178
(dp2179
g54
(dp2180
sg63
g2165
sg56
(lp2181
g49
(g50
g51
NtRp2182
(dp2183
g54
(dp2184
g62
I5
ssg63
g2178
sg56
(lp2185
g49
(g58
g51
NtRp2186
(dp2187
g54
(dp2188
g62
I4
ssg63
Nsg56
(lp2189
sbasbasbasbag49
(g65
g51
NtRp2190
(dp2191
g54
(dp2192
sg63
g59
sg56
(lp2193
g49
(g70
g51
NtRp2194
(dp2195
g54
(dp2196
g74
g75
ssg63
g2190
sg56
(lp2197
S'wsgi'
p2198
asbag49
(g70
g51
NtRp2199
(dp2200
g54
(dp2201
g81
g82
ssg63
g2190
sg56
(lp2202
S':'
asbag49
(g70
g51
NtRp2203
(dp2204
g54
(dp2205
sg63
g2190
sg56
(lp2206
g49
(g50
g51
NtRp2207
(dp2208
g54
(dp2209
g62
I5
ssg63
g2203
sg56
(lp2210
g49
(g58
g51
NtRp2211
(dp2212
g54
(dp2213
g62
I4
ssg63
Nsg56
(lp2214
g49
(g65
g51
NtRp2215
(dp2216
g54
(dp2217
sg63
g2211
sg56
(lp2218
g49
(g70
g51
NtRp2219
(dp2220
g54
(dp2221
g74
g75
ssg63
g2215
sg56
(lp2222
S'environ'
p2223
asbag49
(g70
g51
NtRp2224
(dp2225
g54
(dp2226
g81
g82
ssg63
g2215
sg56
(lp2227
S':'
asbag49
(g70
g51
NtRp2228
(dp2229
g54
(dp2230
sg63
g2215
sg56
(lp2231
g49
(g50
g51
NtRp2232
(dp2233
g54
(dp2234
g62
I4
ssg63
g2228
sg56
(lp2235
g49
(g58
g51
NtRp2236
(dp2237
g54
(dp2238
g62
I3
ssg63
Nsg56
(lp2239
g49
(g65
g51
NtRp2240
(dp2241
g54
(dp2242
sg63
g2236
sg56
(lp2243
g49
(g70
g51
NtRp2244
(dp2245
g54
(dp2246
g74
g75
ssg63
g2240
sg56
(lp2247
S'HTTP_ACCEPT'
p2248
asbag49
(g70
g51
NtRp2249
(dp2250
g54
(dp2251
g81
g82
ssg63
g2240
sg56
(lp2252
S':'
asbag49
(g70
g51
NtRp2253
(dp2254
g54
(dp2255
sg63
g2240
sg56
(lp2256
g49
(g50
g51
NtRp2257
(dp2258
g54
(dp2259
g62
I3
ssg63
g2253
sg56
(lp2260
g769
asbasbasbag49
(g65
g51
NtRp2261
(dp2262
g54
(dp2263
sg63
g2236
sg56
(lp2264
g49
(g70
g51
NtRp2265
(dp2266
g54
(dp2267
g74
g75
ssg63
g2261
sg56
(lp2268
S'HTTP_ACCEPT_CHARSET'
p2269
asbag49
(g70
g51
NtRp2270
(dp2271
g54
(dp2272
g81
g82
ssg63
g2261
sg56
(lp2273
S':'
asbag49
(g70
g51
NtRp2274
(dp2275
g54
(dp2276
sg63
g2261
sg56
(lp2277
g49
(g50
g51
NtRp2278
(dp2279
g54
(dp2280
g62
I3
ssg63
g2274
sg56
(lp2281
g791
asbasbasbag49
(g65
g51
NtRp2282
(dp2283
g54
(dp2284
sg63
g2236
sg56
(lp2285
g49
(g70
g51
NtRp2286
(dp2287
g54
(dp2288
g74
g75
ssg63
g2282
sg56
(lp2289
S'HTTP_ACCEPT_ENCODING'
p2290
asbag49
(g70
g51
NtRp2291
(dp2292
g54
(dp2293
g81
g82
ssg63
g2282
sg56
(lp2294
S':'
asbag49
(g70
g51
NtRp2295
(dp2296
g54
(dp2297
sg63
g2282
sg56
(lp2298
g49
(g50
g51
NtRp2299
(dp2300
g54
(dp2301
g62
I3
ssg63
g2295
sg56
(lp2302
g813
asbasbasbag49
(g65
g51
NtRp2303
(dp2304
g54
(dp2305
sg63
g2236
sg56
(lp2306
g49
(g70
g51
NtRp2307
(dp2308
g54
(dp2309
g74
g75
ssg63
g2303
sg56
(lp2310
S'HTTP_ACCEPT_LANGUAGE'
p2311
asbag49
(g70
g51
NtRp2312
(dp2313
g54
(dp2314
g81
g82
ssg63
g2303
sg56
(lp2315
S':'
asbag49
(g70
g51
NtRp2316
(dp2317
g54
(dp2318
sg63
g2303
sg56
(lp2319
g49
(g50
g51
NtRp2320
(dp2321
g54
(dp2322
g62
I3
ssg63
g2316
sg56
(lp2323
g835
asbasbasbag49
(g65
g51
NtRp2324
(dp2325
g54
(dp2326
sg63
g2236
sg56
(lp2327
g49
(g70
g51
NtRp2328
(dp2329
g54
(dp2330
g74
g75
ssg63
g2324
sg56
(lp2331
S'HTTP_CONNECTION'
p2332
asbag49
(g70
g51
NtRp2333
(dp2334
g54
(dp2335
g81
g82
ssg63
g2324
sg56
(lp2336
S':'
asbag49
(g70
g51
NtRp2337
(dp2338
g54
(dp2339
sg63
g2324
sg56
(lp2340
g49
(g50
g51
NtRp2341
(dp2342
g54
(dp2343
g62
I3
ssg63
g2337
sg56
(lp2344
g857
asbasbasbag49
(g65
g51
NtRp2345
(dp2346
g54
(dp2347
sg63
g2236
sg56
(lp2348
g49
(g70
g51
NtRp2349
(dp2350
g54
(dp2351
g74
g75
ssg63
g2345
sg56
(lp2352
S'HTTP_COOKIE'
p2353
asbag49
(g70
g51
NtRp2354
(dp2355
g54
(dp2356
g81
g82
ssg63
g2345
sg56
(lp2357
S':'
asbag49
(g70
g51
NtRp2358
(dp2359
g54
(dp2360
sg63
g2345
sg56
(lp2361
g49
(g50
g51
NtRp2362
(dp2363
g54
(dp2364
g62
I3
ssg63
g2358
sg56
(lp2365
g879
asbasbasbag49
(g65
g51
NtRp2366
(dp2367
g54
(dp2368
sg63
g2236
sg56
(lp2369
g49
(g70
g51
NtRp2370
(dp2371
g54
(dp2372
g74
g75
ssg63
g2366
sg56
(lp2373
S'HTTP_HOST'
p2374
asbag49
(g70
g51
NtRp2375
(dp2376
g54
(dp2377
g81
g82
ssg63
g2366
sg56
(lp2378
S':'
asbag49
(g70
g51
NtRp2379
(dp2380
g54
(dp2381
sg63
g2366
sg56
(lp2382
g49
(g50
g51
NtRp2383
(dp2384
g54
(dp2385
g62
I3
ssg63
g2379
sg56
(lp2386
g901
asbasbasbag49
(g65
g51
NtRp2387
(dp2388
g54
(dp2389
sg63
g2236
sg56
(lp2390
g49
(g70
g51
NtRp2391
(dp2392
g54
(dp2393
g74
g75
ssg63
g2387
sg56
(lp2394
S'HTTP_REFERER'
p2395
asbag49
(g70
g51
NtRp2396
(dp2397
g54
(dp2398
g81
g82
ssg63
g2387
sg56
(lp2399
S':'
asbag49
(g70
g51
NtRp2400
(dp2401
g54
(dp2402
sg63
g2387
sg56
(lp2403
g49
(g50
g51
NtRp2404
(dp2405
g54
(dp2406
g62
I3
ssg63
g2400
sg56
(lp2407
g923
asbasbasbag49
(g65
g51
NtRp2408
(dp2409
g54
(dp2410
sg63
g2236
sg56
(lp2411
g49
(g70
g51
NtRp2412
(dp2413
g54
(dp2414
g74
g75
ssg63
g2408
sg56
(lp2415
S'HTTP_USER_AGENT'
p2416
asbag49
(g70
g51
NtRp2417
(dp2418
g54
(dp2419
g81
g82
ssg63
g2408
sg56
(lp2420
S':'
asbag49
(g70
g51
NtRp2421
(dp2422
g54
(dp2423
sg63
g2408
sg56
(lp2424
g49
(g50
g51
NtRp2425
(dp2426
g54
(dp2427
g62
I3
ssg63
g2421
sg56
(lp2428
g945
asbasbasbag49
(g65
g51
NtRp2429
(dp2430
g54
(dp2431
sg63
g2236
sg56
(lp2432
g49
(g70
g51
NtRp2433
(dp2434
g54
(dp2435
g74
g75
ssg63
g2429
sg56
(lp2436
S'PATH_INFO'
p2437
asbag49
(g70
g51
NtRp2438
(dp2439
g54
(dp2440
g81
g82
ssg63
g2429
sg56
(lp2441
S':'
asbag49
(g70
g51
NtRp2442
(dp2443
g54
(dp2444
sg63
g2429
sg56
(lp2445
g49
(g50
g51
NtRp2446
(dp2447
g54
(dp2448
g62
I3
ssg63
g2442
sg56
(lp2449
g1009
asbasbasbag49
(g65
g51
NtRp2450
(dp2451
g54
(dp2452
sg63
g2236
sg56
(lp2453
g49
(g70
g51
NtRp2454
(dp2455
g54
(dp2456
g74
g75
ssg63
g2450
sg56
(lp2457
S'QUERY_STRING'
p2458
asbag49
(g70
g51
NtRp2459
(dp2460
g54
(dp2461
g81
g82
ssg63
g2450
sg56
(lp2462
S':'
asbag49
(g70
g51
NtRp2463
(dp2464
g54
(dp2465
sg63
g2450
sg56
(lp2466
g49
(g50
g51
NtRp2467
(dp2468
g54
(dp2469
g62
I3
ssg63
g2463
sg56
(lp2470
S''
asbasbasbag49
(g65
g51
NtRp2471
(dp2472
g54
(dp2473
sg63
g2236
sg56
(lp2474
g49
(g70
g51
NtRp2475
(dp2476
g54
(dp2477
g74
g75
ssg63
g2471
sg56
(lp2478
S'REMOTE_ADDR'
p2479
asbag49
(g70
g51
NtRp2480
(dp2481
g54
(dp2482
g81
g82
ssg63
g2471
sg56
(lp2483
S':'
asbag49
(g70
g51
NtRp2484
(dp2485
g54
(dp2486
sg63
g2471
sg56
(lp2487
g49
(g50
g51
NtRp2488
(dp2489
g54
(dp2490
g62
I3
ssg63
g2484
sg56
(lp2491
g182
asbasbasbag49
(g65
g51
NtRp2492
(dp2493
g54
(dp2494
sg63
g2236
sg56
(lp2495
g49
(g70
g51
NtRp2496
(dp2497
g54
(dp2498
g74
g75
ssg63
g2492
sg56
(lp2499
S'REMOTE_PORT'
p2500
asbag49
(g70
g51
NtRp2501
(dp2502
g54
(dp2503
g81
g82
ssg63
g2492
sg56
(lp2504
S':'
asbag49
(g70
g51
NtRp2505
(dp2506
g54
(dp2507
sg63
g2492
sg56
(lp2508
g49
(g50
g51
NtRp2509
(dp2510
g54
(dp2511
g62
I3
ssg63
g2505
sg56
(lp2512
g1073
asbasbasbag49
(g65
g51
NtRp2513
(dp2514
g54
(dp2515
sg63
g2236
sg56
(lp2516
g49
(g70
g51
NtRp2517
(dp2518
g54
(dp2519
g74
g75
ssg63
g2513
sg56
(lp2520
S'REQUEST_METHOD'
p2521
asbag49
(g70
g51
NtRp2522
(dp2523
g54
(dp2524
g81
g82
ssg63
g2513
sg56
(lp2525
S':'
asbag49
(g70
g51
NtRp2526
(dp2527
g54
(dp2528
sg63
g2513
sg56
(lp2529
g49
(g50
g51
NtRp2530
(dp2531
g54
(dp2532
g62
I3
ssg63
g2526
sg56
(lp2533
g1095
asbasbasbag49
(g65
g51
NtRp2534
(dp2535
g54
(dp2536
sg63
g2236
sg56
(lp2537
g49
(g70
g51
NtRp2538
(dp2539
g54
(dp2540
g74
g75
ssg63
g2534
sg56
(lp2541
S'REQUEST_URI'
p2542
asbag49
(g70
g51
NtRp2543
(dp2544
g54
(dp2545
g81
g82
ssg63
g2534
sg56
(lp2546
S':'
asbag49
(g70
g51
NtRp2547
(dp2548
g54
(dp2549
sg63
g2534
sg56
(lp2550
g49
(g50
g51
NtRp2551
(dp2552
g54
(dp2553
g62
I3
ssg63
g2547
sg56
(lp2554
g1009
asbasbasbag49
(g65
g51
NtRp2555
(dp2556
g54
(dp2557
sg63
g2236
sg56
(lp2558
g49
(g70
g51
NtRp2559
(dp2560
g54
(dp2561
g74
g75
ssg63
g2555
sg56
(lp2562
S'SCRIPT_NAME'
p2563
asbag49
(g70
g51
NtRp2564
(dp2565
g54
(dp2566
g81
g82
ssg63
g2555
sg56
(lp2567
S':'
asbag49
(g70
g51
NtRp2568
(dp2569
g54
(dp2570
sg63
g2555
sg56
(lp2571
g49
(g50
g51
NtRp2572
(dp2573
g54
(dp2574
g62
I3
ssg63
g2568
sg56
(lp2575
S''
asbasbasbag49
(g65
g51
NtRp2576
(dp2577
g54
(dp2578
sg63
g2236
sg56
(lp2579
g49
(g70
g51
NtRp2580
(dp2581
g54
(dp2582
g74
g75
ssg63
g2576
sg56
(lp2583
S'SERVER_NAME'
p2584
asbag49
(g70
g51
NtRp2585
(dp2586
g54
(dp2587
g81
g82
ssg63
g2576
sg56
(lp2588
S':'
asbag49
(g70
g51
NtRp2589
(dp2590
g54
(dp2591
sg63
g2576
sg56
(lp2592
g49
(g50
g51
NtRp2593
(dp2594
g54
(dp2595
g62
I3
ssg63
g2589
sg56
(lp2596
g1159
asbasbasbag49
(g65
g51
NtRp2597
(dp2598
g54
(dp2599
sg63
g2236
sg56
(lp2600
g49
(g70
g51
NtRp2601
(dp2602
g54
(dp2603
g74
g75
ssg63
g2597
sg56
(lp2604
S'SERVER_PORT'
p2605
asbag49
(g70
g51
NtRp2606
(dp2607
g54
(dp2608
g81
g82
ssg63
g2597
sg56
(lp2609
S':'
asbag49
(g70
g51
NtRp2610
(dp2611
g54
(dp2612
sg63
g2597
sg56
(lp2613
g49
(g50
g51
NtRp2614
(dp2615
g54
(dp2616
g62
I3
ssg63
g2610
sg56
(lp2617
g1181
asbasbasbag49
(g65
g51
NtRp2618
(dp2619
g54
(dp2620
sg63
g2236
sg56
(lp2621
g49
(g70
g51
NtRp2622
(dp2623
g54
(dp2624
g74
g75
ssg63
g2618
sg56
(lp2625
S'SERVER_PROTOCOL'
p2626
asbag49
(g70
g51
NtRp2627
(dp2628
g54
(dp2629
g81
g82
ssg63
g2618
sg56
(lp2630
S':'
asbag49
(g70
g51
NtRp2631
(dp2632
g54
(dp2633
sg63
g2618
sg56
(lp2634
g49
(g50
g51
NtRp2635
(dp2636
g54
(dp2637
g62
I3
ssg63
g2631
sg56
(lp2638
g1203
asbasbasbag49
(g65
g51
NtRp2639
(dp2640
g54
(dp2641
sg63
g2236
sg56
(lp2642
g49
(g70
g51
NtRp2643
(dp2644
g54
(dp2645
g74
g75
ssg63
g2639
sg56
(lp2646
S'SERVER_SOFTWARE'
p2647
asbag49
(g70
g51
NtRp2648
(dp2649
g54
(dp2650
g81
g82
ssg63
g2639
sg56
(lp2651
S':'
asbag49
(g70
g51
NtRp2652
(dp2653
g54
(dp2654
sg63
g2639
sg56
(lp2655
g49
(g50
g51
NtRp2656
(dp2657
g54
(dp2658
g62
I3
ssg63
g2652
sg56
(lp2659
g1225
asbasbasbag49
(g65
g51
NtRp2660
(dp2661
g54
(dp2662
sg63
g2236
sg56
(lp2663
g49
(g70
g51
NtRp2664
(dp2665
g54
(dp2666
g74
g75
ssg63
g2660
sg56
(lp2667
S'WEB2PY_ORIGINAL_URI'
p2668
asbag49
(g70
g51
NtRp2669
(dp2670
g54
(dp2671
g81
g82
ssg63
g2660
sg56
(lp2672
S':'
asbag49
(g70
g51
NtRp2673
(dp2674
g54
(dp2675
sg63
g2660
sg56
(lp2676
g49
(g50
g51
NtRp2677
(dp2678
g54
(dp2679
g62
I3
ssg63
g2673
sg56
(lp2680
g1269
asbasbasbag49
(g65
g51
NtRp2681
(dp2682
g54
(dp2683
sg63
g2236
sg56
(lp2684
g49
(g70
g51
NtRp2685
(dp2686
g54
(dp2687
g74
g75
ssg63
g2681
sg56
(lp2688
S'wsgi.errors'
p2689
asbag49
(g70
g51
NtRp2690
(dp2691
g54
(dp2692
g81
g82
ssg63
g2681
sg56
(lp2693
S':'
asbag49
(g70
g51
NtRp2694
(dp2695
g54
(dp2696
sg63
g2681
sg56
(lp2697
g49
(g50
g51
NtRp2698
(dp2699
g54
(dp2700
g62
I3
ssg63
g2694
sg56
(lp2701
S"<open file '<stderr>', mode 'w' at 0x4220b0>"
p2702
asbasbasbag49
(g65
g51
NtRp2703
(dp2704
g54
(dp2705
sg63
g2236
sg56
(lp2706
g49
(g70
g51
NtRp2707
(dp2708
g54
(dp2709
g74
g75
ssg63
g2703
sg56
(lp2710
S'wsgi.file_wrapper'
p2711
asbag49
(g70
g51
NtRp2712
(dp2713
g54
(dp2714
g81
g82
ssg63
g2703
sg56
(lp2715
S':'
asbag49
(g70
g51
NtRp2716
(dp2717
g54
(dp2718
sg63
g2703
sg56
(lp2719
g49
(g50
g51
NtRp2720
(dp2721
g54
(dp2722
g62
I3
ssg63
g2716
sg56
(lp2723
S'<class wsgiref.util.FileWrapper at 0x245e6c0>'
p2724
asbasbasbag49
(g65
g51
NtRp2725
(dp2726
g54
(dp2727
sg63
g2236
sg56
(lp2728
g49
(g70
g51
NtRp2729
(dp2730
g54
(dp2731
g74
g75
ssg63
g2725
sg56
(lp2732
S'wsgi.input'
p2733
asbag49
(g70
g51
NtRp2734
(dp2735
g54
(dp2736
g81
g82
ssg63
g2725
sg56
(lp2737
S':'
asbag49
(g70
g51
NtRp2738
(dp2739
g54
(dp2740
sg63
g2725
sg56
(lp2741
g49
(g50
g51
NtRp2742
(dp2743
g54
(dp2744
g62
I3
ssg63
g2738
sg56
(lp2745
S'<cStringIO.StringO object at 0x8e93680>'
p2746
asbasbasbag49
(g65
g51
NtRp2747
(dp2748
g54
(dp2749
sg63
g2236
sg56
(lp2750
g49
(g70
g51
NtRp2751
(dp2752
g54
(dp2753
g74
g75
ssg63
g2747
sg56
(lp2754
S'wsgi.multiprocess'
p2755
asbag49
(g70
g51
NtRp2756
(dp2757
g54
(dp2758
g81
g82
ssg63
g2747
sg56
(lp2759
S':'
asbag49
(g70
g51
NtRp2760
(dp2761
g54
(dp2762
sg63
g2747
sg56
(lp2763
g49
(g50
g51
NtRp2764
(dp2765
g54
(dp2766
g62
I3
ssg63
g2760
sg56
(lp2767
g92
asbasbasbag49
(g65
g51
NtRp2768
(dp2769
g54
(dp2770
sg63
g2236
sg56
(lp2771
g49
(g70
g51
NtRp2772
(dp2773
g54
(dp2774
g74
g75
ssg63
g2768
sg56
(lp2775
S'wsgi.multithread'
p2776
asbag49
(g70
g51
NtRp2777
(dp2778
g54
(dp2779
g81
g82
ssg63
g2768
sg56
(lp2780
S':'
asbag49
(g70
g51
NtRp2781
(dp2782
g54
(dp2783
sg63
g2768
sg56
(lp2784
g49
(g50
g51
NtRp2785
(dp2786
g54
(dp2787
g62
I3
ssg63
g2781
sg56
(lp2788
g1487
asbasbasbag49
(g65
g51
NtRp2789
(dp2790
g54
(dp2791
sg63
g2236
sg56
(lp2792
g49
(g70
g51
NtRp2793
(dp2794
g54
(dp2795
g74
g75
ssg63
g2789
sg56
(lp2796
S'wsgi.run_once'
p2797
asbag49
(g70
g51
NtRp2798
(dp2799
g54
(dp2800
g81
g82
ssg63
g2789
sg56
(lp2801
S':'
asbag49
(g70
g51
NtRp2802
(dp2803
g54
(dp2804
sg63
g2789
sg56
(lp2805
g49
(g50
g51
NtRp2806
(dp2807
g54
(dp2808
g62
I3
ssg63
g2802
sg56
(lp2809
g92
asbasbasbag49
(g65
g51
NtRp2810
(dp2811
g54
(dp2812
sg63
g2236
sg56
(lp2813
g49
(g70
g51
NtRp2814
(dp2815
g54
(dp2816
g74
g75
ssg63
g2810
sg56
(lp2817
S'wsgi.url_scheme'
p2818
asbag49
(g70
g51
NtRp2819
(dp2820
g54
(dp2821
g81
g82
ssg63
g2810
sg56
(lp2822
S':'
asbag49
(g70
g51
NtRp2823
(dp2824
g54
(dp2825
sg63
g2810
sg56
(lp2826
g49
(g50
g51
NtRp2827
(dp2828
g54
(dp2829
g62
I3
ssg63
g2823
sg56
(lp2830
g1530
asbasbasbag49
(g65
g51
NtRp2831
(dp2832
g54
(dp2833
sg63
g2236
sg56
(lp2834
g49
(g70
g51
NtRp2835
(dp2836
g54
(dp2837
g74
g75
ssg63
g2831
sg56
(lp2838
S'wsgi.version'
p2839
asbag49
(g70
g51
NtRp2840
(dp2841
g54
(dp2842
g81
g82
ssg63
g2831
sg56
(lp2843
S':'
asbag49
(g70
g51
NtRp2844
(dp2845
g54
(dp2846
sg63
g2831
sg56
(lp2847
g49
(g50
g51
NtRp2848
(dp2849
g54
(dp2850
g62
I3
ssg63
g2844
sg56
(lp2851
S'1'
asbasbasbasbasbasbasbasbasbasbasbasbasbsS'frames'
p2852
(lp2853
(dp2854
S'file'
p2855
S'/users/udimilo/Documents/web2py/gluon/restricted.py'
p2856
sS'dump'
p2857
(dp2858
S'environment'
p2859
S"{'A': <class 'gluon.html.A'>, 'ALLOW_TOGGLE': 'true', 'A_button': <function A_button at 0x9663fb0>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, 'CENTER': <class 'gluon.html.CENTER'>, ...}"
p2860
sS'ccode'
p2861
S'<code object <module> at 0x9644338, file "/Users...plications/admin/controllers/default.py", line 3>'
p2862
ssS'lnum'
p2863
I205
sS'lines'
p2864
(dp2865
I200
S'    try:'
p2866
sI201
S'        if type(code) == types.CodeType:'
p2867
sI202
S'            ccode = code'
p2868
sI203
S'        else:'
p2869
sI204
S'            ccode = compile2(code,layer)'
p2870
sI205
S'        exec ccode in environment'
p2871
sI206
S'    except HTTP:'
p2872
sI207
S'        raise'
p2873
sI208
S'    except RestrictedError:'
p2874
sI209
S'        # do not encapsulate (obfuscate) the original RestrictedError'
p2875
ssS'call'
p2876
S"(code='# coding: utf8\\n\\nEXPERIMENTAL_STUFF = True\\n\\nif EX...\\n\\nresponse._vars=response._caller(reload_routes)\\n', environment={'A': <class 'gluon.html.A'>, 'ALLOW_TOGGLE': 'true', 'A_button': <function A_button at 0x9663fb0>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, 'CENTER': <class 'gluon.html.CENTER'>, ...}, layer='/Users/udimilo/Documents/web2py/applications/admin/controllers/default.py')"
p2877
sS'func'
p2878
S'restricted'
p2879
sa(dp2880
g2855
S'/Users/udimilo/Documents/web2py/applications/admin/controllers/default.py'
p2881
sg2857
(dp2882
sg2863
I1352
sg2864
(dp2883
I1344
S'def reload_routes():'
p2884
sI1345
S'    """ Reload routes.py """'
p2885
sI1346
S'    import gluon.rewrite'
p2886
sI1347
S'    gluon.rewrite.load()'
p2887
sI1348
S"    redirect(URL('site'))"
p2888
sI1349
S''
sI1350
S''
sI1341
S'    else:'
p2889
sI1342
S'        return dict(form=T("Disabled"))'
p2890
sI1343
S''
ssg2876
S'()'
p2891
sg2878
S'<module>'
p2892
sa(dp2893
g2855
S'/users/udimilo/Documents/web2py/gluon/globals.py'
p2894
sg2857
(dp2895
S'self'
p2896
S'undefined'
p2897
sS'f'
S'<function reload_routes at 0x9652fb0>'
p2898
ssg2863
I173
sg2864
(dp2899
I168
S'        self.menu = []             # used by the default view layout'
p2900
sI169
S'        self.files = []            # used by web2py_ajax.html'
p2901
sI170
S'        self.generic_patterns = [] # patterns to allow generic views'
p2902
sI171
S"        self.delimiters = ('{{','}}')"
p2903
sI172
S'        self._vars = None'
p2904
sI173
S'        self._caller = lambda f: f()'
p2905
sI174
S'        self._view_environment = None'
p2906
sI175
S'        self._custom_commit = None'
p2907
sI176
S'        self._custom_rollback = None'
p2908
sI177
S''
ssg2876
S'(f=<function reload_routes at 0x9652fb0>)'
p2909
sg2878
S'<lambda>'
p2910
sa(dp2911
g2855
S'/Users/udimilo/Documents/web2py/applications/admin/controllers/default.py'
p2912
sg2857
(dp2913
S'gluon.rewrite.load'
p2914
S'<function load at 0x10322f0>'
p2915
sS'gluon'
p2916
S"<module 'gluon' from '/users/udimilo/Documents/web2py/gluon/__init__.pyc'>"
p2917
sS'gluon.rewrite'
p2918
S"<module 'gluon.rewrite' from '/users/udimilo/Documents/web2py/gluon/rewrite.pyc'>"
p2919
ssg2863
I1347
sg2864
(dp2920
I1344
S'def reload_routes():'
p2921
sI1345
S'    """ Reload routes.py """'
p2922
sI1346
S'    import gluon.rewrite'
p2923
sI1347
S'    gluon.rewrite.load()'
p2924
sI1348
S"    redirect(URL('site'))"
p2925
sI1349
S''
sI1350
S''
sI1341
S'    else:'
p2926
sI1342
S'        return dict(form=T("Disabled"))'
p2927
sI1343
S''
ssg2876
S'()'
p2928
sg2878
S'reload_routes'
p2929
sa(dp2930
g2855
S'/users/udimilo/Documents/web2py/gluon/rewrite.py'
p2931
sg2857
(dp2932
S'symbols'
p2933
S"{'__builtins__': {'ArithmeticError': <type 'exceptions.ArithmeticError'>, 'AssertionError': <type 'exceptions.AssertionError'>, 'AttributeError': <type 'exceptions.AttributeError'>, 'BaseException': <type 'exceptions.BaseException'>, 'DeprecationWarning': <type 'exceptions.DeprecationWarning'>, 'EOFError': <type 'exceptions.EOFError'>, 'Ellipsis': Ellipsis, 'EnvironmentError': <type 'exceptions.EnvironmentError'>, 'Exception': <type 'exceptions.Exception'>, 'False': False, ...}, 'default_application': 'udi0312', 'default_controller': 'default', 'default_function': 'index', 'routes_app': ((r'/(?P<app>admin|app)\\b.*', r'\\g<app>'), ('(.*)', 'udi0312'), ('/?(.*)', 'udi0312')), 'routes_in': (('.*:/favicon.ico', '/examples/static/favicon.ico'), ('.*:/robots.txt', '/examples/static/robots.txt'), ('.*:/users', '/udi0312/users/index'), ('.*:/users/(?P<any>.*)', r'/udi0312/users/user/\\g<any>'), ('.*http://otherdomain.com.* (?P<any>.*)', r'/app/ctr\\g<any>'))}"
p2934
sS'data'
p2935
S'"#!/usr/bin/python\\n# -*- coding: utf-8 -*-\\n\\n# def...n__\':\\n    import doctest\\n    doctest.testmod()\\n\\n\\n"'
p2936
ssg2863
I262
sg2864
(dp2937
I257
S'                return'
p2938
sI258
S"            data = read_file(path).replace('\\r\\n','\\n')"
p2939
sI259
S''
sI260
S'        symbols = {}'
p2940
sI261
S'        try:'
p2941
sI262
S"            exec (data + '\\n') in symbols"
p2942
sI263
S'        except SyntaxError, e:'
p2943
sI264
S'            logger.error('
p2944
sI265
S"                '%s has a syntax error and will not be loaded\\n' % path"
p2945
sI266
S'                + traceback.format_exc())'
p2946
ssg2876
S'(routes=\'routes.py\', app=None, data="#!/usr/bin/python\\n# -*- coding: utf-8 -*-\\n\\n# def...n__\':\\n    import doctest\\n    doctest.testmod()\\n\\n\\n", rdict=None)'
p2947
sg2878
S'load'
p2948
sa(dp2949
g2855
S'/Users/udimilo/Documents/web2py/<string>'
p2950
sg2857
(dp2951
sg2863
I46
sg2864
(dp2952
sg2876
S'()'
p2953
sg2878
g2892
sasS'pyver'
p2954
S'Python 2.5.4: /Library/Frameworks/Python.framework/Versions/2.5/Resources/Python.app/Contents/MacOS/Python'
p2955
sS'session'
p2956
g49
(g50
g51
NtRp2957
(dp2958
g54
(dp2959
sg56
(lp2960
g49
(g58
g51
NtRp2961
(dp2962
g54
(dp2963
g62
I5
ssg63
Nsg56
(lp2964
g49
(g65
g51
NtRp2965
(dp2966
g54
(dp2967
sg63
g2961
sg56
(lp2968
g49
(g70
g51
NtRp2969
(dp2970
g54
(dp2971
g74
g75
ssg63
g2965
sg56
(lp2972
S'authorized'
p2973
asbag49
(g70
g51
NtRp2974
(dp2975
g54
(dp2976
g81
g82
ssg63
g2965
sg56
(lp2977
S':'
asbag49
(g70
g51
NtRp2978
(dp2979
g54
(dp2980
sg63
g2965
sg56
(lp2981
g49
(g50
g51
NtRp2982
(dp2983
g54
(dp2984
g62
I5
ssg63
g2978
sg56
(lp2985
g1487
asbasbasbag49
(g65
g51
NtRp2986
(dp2987
g54
(dp2988
sg63
g2961
sg56
(lp2989
g49
(g70
g51
NtRp2990
(dp2991
g54
(dp2992
g74
g75
ssg63
g2986
sg56
(lp2993
S'check_version'
p2994
asbag49
(g70
g51
NtRp2995
(dp2996
g54
(dp2997
g81
g82
ssg63
g2986
sg56
(lp2998
S':'
asbag49
(g70
g51
NtRp2999
(dp3000
g54
(dp3001
sg63
g2986
sg56
(lp3002
g49
(g50
g51
NtRp3003
(dp3004
g54
(dp3005
g62
I5
ssg63
g2999
sg56
(lp3006
g92
asbasbasbag49
(g65
g51
NtRp3007
(dp3008
g54
(dp3009
sg63
g2961
sg56
(lp3010
g49
(g70
g51
NtRp3011
(dp3012
g54
(dp3013
g74
g75
ssg63
g3007
sg56
(lp3014
S'last_time'
p3015
asbag49
(g70
g51
NtRp3016
(dp3017
g54
(dp3018
g81
g82
ssg63
g3007
sg56
(lp3019
S':'
asbag49
(g70
g51
NtRp3020
(dp3021
g54
(dp3022
sg63
g3007
sg56
(lp3023
g49
(g50
g51
NtRp3024
(dp3025
g54
(dp3026
g62
I5
ssg63
g3020
sg56
(lp3027
S'1332037791.7655721'
p3028
asbasbasbasbasbsS'etype'
p3029
S"<type 'exceptions.TypeError'>"
p3030
sS'date'
p3031
S'Sat Mar 17 22:29:51 2012'
p3032
sS'response'
p3033
g49
(g50
g51
NtRp3034
(dp3035
g54
(dp3036
sg56
(lp3037
g49
(g58
g51
NtRp3038
(dp3039
g54
(dp3040
g62
I5
ssg63
Nsg56
(lp3041
g49
(g65
g51
NtRp3042
(dp3043
g54
(dp3044
sg63
g3038
sg56
(lp3045
g49
(g70
g51
NtRp3046
(dp3047
g54
(dp3048
g74
g75
ssg63
g3042
sg56
(lp3049
g147
asbag49
(g70
g51
NtRp3050
(dp3051
g54
(dp3052
g81
g82
ssg63
g3042
sg56
(lp3053
S':'
asbag49
(g70
g51
NtRp3054
(dp3055
g54
(dp3056
sg63
g3042
sg56
(lp3057
g49
(g50
g51
NtRp3058
(dp3059
g54
(dp3060
g62
I5
ssg63
g3054
sg56
(lp3061
S'<cStringIO.StringO object at 0x963f1a0>'
p3062
asbasbasbag49
(g65
g51
NtRp3063
(dp3064
g54
(dp3065
sg63
g3038
sg56
(lp3066
g49
(g70
g51
NtRp3067
(dp3068
g54
(dp3069
g74
g75
ssg63
g3063
sg56
(lp3070
g213
asbag49
(g70
g51
NtRp3071
(dp3072
g54
(dp3073
g81
g82
ssg63
g3063
sg56
(lp3074
S':'
asbag49
(g70
g51
NtRp3075
(dp3076
g54
(dp3077
sg63
g3063
sg56
(lp3078
g49
(g50
g51
NtRp3079
(dp3080
g54
(dp3081
g62
I5
ssg63
g3075
sg56
(lp3082
g49
(g58
g51
NtRp3083
(dp3084
g54
(dp3085
g62
I4
ssg63
Nsg56
(lp3086
g49
(g65
g51
NtRp3087
(dp3088
g54
(dp3089
sg63
g3083
sg56
(lp3090
g49
(g70
g51
NtRp3091
(dp3092
g54
(dp3093
g74
g75
ssg63
g3087
sg56
(lp3094
S'session_id_admin'
p3095
asbag49
(g70
g51
NtRp3096
(dp3097
g54
(dp3098
g81
g82
ssg63
g3087
sg56
(lp3099
S':'
asbag49
(g70
g51
NtRp3100
(dp3101
g54
(dp3102
sg63
g3087
sg56
(lp3103
g49
(g50
g51
NtRp3104
(dp3105
g54
(dp3106
g62
I4
ssg63
g3100
sg56
(lp3107
g49
(g58
g51
NtRp3108
(dp3109
g54
(dp3110
g62
I3
ssg63
Nsg56
(lp3111
g49
(g65
g51
NtRp3112
(dp3113
g54
(dp3114
sg63
g3108
sg56
(lp3115
g49
(g70
g51
NtRp3116
(dp3117
g54
(dp3118
g74
g75
ssg63
g3112
sg56
(lp3119
g263
asbag49
(g70
g51
NtRp3120
(dp3121
g54
(dp3122
g81
g82
ssg63
g3112
sg56
(lp3123
S':'
asbag49
(g70
g51
NtRp3124
(dp3125
g54
(dp3126
sg63
g3112
sg56
(lp3127
g49
(g50
g51
NtRp3128
(dp3129
g54
(dp3130
g62
I3
ssg63
g3124
sg56
(lp3131
S''
asbasbasbag49
(g65
g51
NtRp3132
(dp3133
g54
(dp3134
sg63
g3108
sg56
(lp3135
g49
(g70
g51
NtRp3136
(dp3137
g54
(dp3138
g74
g75
ssg63
g3132
sg56
(lp3139
g284
asbag49
(g70
g51
NtRp3140
(dp3141
g54
(dp3142
g81
g82
ssg63
g3132
sg56
(lp3143
S':'
asbag49
(g70
g51
NtRp3144
(dp3145
g54
(dp3146
sg63
g3132
sg56
(lp3147
g49
(g50
g51
NtRp3148
(dp3149
g54
(dp3150
g62
I3
ssg63
g3144
sg56
(lp3151
S''
asbasbasbag49
(g65
g51
NtRp3152
(dp3153
g54
(dp3154
sg63
g3108
sg56
(lp3155
g49
(g70
g51
NtRp3156
(dp3157
g54
(dp3158
g74
g75
ssg63
g3152
sg56
(lp3159
g305
asbag49
(g70
g51
NtRp3160
(dp3161
g54
(dp3162
g81
g82
ssg63
g3152
sg56
(lp3163
S':'
asbag49
(g70
g51
NtRp3164
(dp3165
g54
(dp3166
sg63
g3152
sg56
(lp3167
g49
(g50
g51
NtRp3168
(dp3169
g54
(dp3170
g62
I3
ssg63
g3164
sg56
(lp3171
S''
asbasbasbag49
(g65
g51
NtRp3172
(dp3173
g54
(dp3174
sg63
g3108
sg56
(lp3175
g49
(g70
g51
NtRp3176
(dp3177
g54
(dp3178
g74
g75
ssg63
g3172
sg56
(lp3179
g326
asbag49
(g70
g51
NtRp3180
(dp3181
g54
(dp3182
g81
g82
ssg63
g3172
sg56
(lp3183
S':'
asbag49
(g70
g51
NtRp3184
(dp3185
g54
(dp3186
sg63
g3172
sg56
(lp3187
g49
(g50
g51
NtRp3188
(dp3189
g54
(dp3190
g62
I3
ssg63
g3184
sg56
(lp3191
S''
asbasbasbag49
(g65
g51
NtRp3192
(dp3193
g54
(dp3194
sg63
g3108
sg56
(lp3195
g49
(g70
g51
NtRp3196
(dp3197
g54
(dp3198
g74
g75
ssg63
g3192
sg56
(lp3199
g347
asbag49
(g70
g51
NtRp3200
(dp3201
g54
(dp3202
g81
g82
ssg63
g3192
sg56
(lp3203
S':'
asbag49
(g70
g51
NtRp3204
(dp3205
g54
(dp3206
sg63
g3192
sg56
(lp3207
g49
(g50
g51
NtRp3208
(dp3209
g54
(dp3210
g62
I3
ssg63
g3204
sg56
(lp3211
S'/'
asbasbasbag49
(g65
g51
NtRp3212
(dp3213
g54
(dp3214
sg63
g3108
sg56
(lp3215
g49
(g70
g51
NtRp3216
(dp3217
g54
(dp3218
g74
g75
ssg63
g3212
sg56
(lp3219
g368
asbag49
(g70
g51
NtRp3220
(dp3221
g54
(dp3222
g81
g82
ssg63
g3212
sg56
(lp3223
S':'
asbag49
(g70
g51
NtRp3224
(dp3225
g54
(dp3226
sg63
g3212
sg56
(lp3227
g49
(g50
g51
NtRp3228
(dp3229
g54
(dp3230
g62
I3
ssg63
g3224
sg56
(lp3231
S''
asbasbasbag49
(g65
g51
NtRp3232
(dp3233
g54
(dp3234
sg63
g3108
sg56
(lp3235
g49
(g70
g51
NtRp3236
(dp3237
g54
(dp3238
g74
g75
ssg63
g3232
sg56
(lp3239
g389
asbag49
(g70
g51
NtRp3240
(dp3241
g54
(dp3242
g81
g82
ssg63
g3232
sg56
(lp3243
S':'
asbag49
(g70
g51
NtRp3244
(dp3245
g54
(dp3246
sg63
g3232
sg56
(lp3247
g49
(g50
g51
NtRp3248
(dp3249
g54
(dp3250
g62
I3
ssg63
g3244
sg56
(lp3251
S''
asbasbasbasbasbasbasbasbasbasbasbag49
(g65
g51
NtRp3252
(dp3253
g54
(dp3254
sg63
g3038
sg56
(lp3255
g49
(g70
g51
NtRp3256
(dp3257
g54
(dp3258
g74
g75
ssg63
g3252
sg56
(lp3259
S'delimiters'
p3260
asbag49
(g70
g51
NtRp3261
(dp3262
g54
(dp3263
g81
g82
ssg63
g3252
sg56
(lp3264
S':'
asbag49
(g70
g51
NtRp3265
(dp3266
g54
(dp3267
sg63
g3252
sg56
(lp3268
g49
(g50
g51
NtRp3269
(dp3270
g54
(dp3271
g62
I5
ssg63
g3265
sg56
(lp3272
g49
(g58
g51
NtRp3273
(dp3274
g54
(dp3275
g62
I4
ssg63
Nsg56
(lp3276
g49
(g65
g51
NtRp3277
(dp3278
g54
(dp3279
sg63
g3273
sg56
(lp3280
g49
(g70
g51
NtRp3281
(dp3282
g54
(dp3283
sg63
g3277
sg56
(lp3284
g49
(g50
g51
NtRp3285
(dp3286
g54
(dp3287
g62
I4
ssg63
g3281
sg56
(lp3288
S'{{'
p3289
asbasbasbag49
(g65
g51
NtRp3290
(dp3291
g54
(dp3292
sg63
g3273
sg56
(lp3293
g49
(g70
g51
NtRp3294
(dp3295
g54
(dp3296
sg63
g3290
sg56
(lp3297
g49
(g50
g51
NtRp3298
(dp3299
g54
(dp3300
g62
I4
ssg63
g3294
sg56
(lp3301
S'}}'
p3302
asbasbasbasbasbasbasbag49
(g65
g51
NtRp3303
(dp3304
g54
(dp3305
sg63
g3038
sg56
(lp3306
g49
(g70
g51
NtRp3307
(dp3308
g54
(dp3309
g74
g75
ssg63
g3303
sg56
(lp3310
S'files'
p3311
asbag49
(g70
g51
NtRp3312
(dp3313
g54
(dp3314
g81
g82
ssg63
g3303
sg56
(lp3315
S':'
asbag49
(g70
g51
NtRp3316
(dp3317
g54
(dp3318
sg63
g3303
sg56
(lp3319
g49
(g50
g51
NtRp3320
(dp3321
g54
(dp3322
g62
I5
ssg63
g3316
sg56
(lp3323
g49
(g58
g51
NtRp3324
(dp3325
g54
(dp3326
g62
I4
ssg63
Nsg56
(lp3327
g49
(g65
g51
NtRp3328
(dp3329
g54
(dp3330
sg63
g3324
sg56
(lp3331
g49
(g70
g51
NtRp3332
(dp3333
g54
(dp3334
sg63
g3328
sg56
(lp3335
g49
(g50
g51
NtRp3336
(dp3337
g54
(dp3338
g62
I4
ssg63
g3332
sg56
(lp3339
S'/admin/static/plugin_multiselect/jquery.dimensions.js'
p3340
asbasbasbag49
(g65
g51
NtRp3341
(dp3342
g54
(dp3343
sg63
g3324
sg56
(lp3344
g49
(g70
g51
NtRp3345
(dp3346
g54
(dp3347
sg63
g3341
sg56
(lp3348
g49
(g50
g51
NtRp3349
(dp3350
g54
(dp3351
g62
I4
ssg63
g3345
sg56
(lp3352
S'/admin/static/plugin_multiselect/jquery.multiselect.js'
p3353
asbasbasbag49
(g65
g51
NtRp3354
(dp3355
g54
(dp3356
sg63
g3324
sg56
(lp3357
g49
(g70
g51
NtRp3358
(dp3359
g54
(dp3360
sg63
g3354
sg56
(lp3361
g49
(g50
g51
NtRp3362
(dp3363
g54
(dp3364
g62
I4
ssg63
g3358
sg56
(lp3365
S'/admin/static/plugin_multiselect/jquery.multiselect.css'
p3366
asbasbasbag49
(g65
g51
NtRp3367
(dp3368
g54
(dp3369
sg63
g3324
sg56
(lp3370
g49
(g70
g51
NtRp3371
(dp3372
g54
(dp3373
sg63
g3367
sg56
(lp3374
g49
(g50
g51
NtRp3375
(dp3376
g54
(dp3377
g62
I4
ssg63
g3371
sg56
(lp3378
S'/admin/static/plugin_multiselect/start.js'
p3379
asbasbasbasbasbasbasbag49
(g65
g51
NtRp3380
(dp3381
g54
(dp3382
sg63
g3038
sg56
(lp3383
g49
(g70
g51
NtRp3384
(dp3385
g54
(dp3386
g74
g75
ssg63
g3380
sg56
(lp3387
S'flash'
p3388
asbag49
(g70
g51
NtRp3389
(dp3390
g54
(dp3391
g81
g82
ssg63
g3380
sg56
(lp3392
S':'
asbag49
(g70
g51
NtRp3393
(dp3394
g54
(dp3395
sg63
g3380
sg56
(lp3396
g49
(g50
g51
NtRp3397
(dp3398
g54
(dp3399
g62
I5
ssg63
g3393
sg56
(lp3400
S''
asbasbasbag49
(g65
g51
NtRp3401
(dp3402
g54
(dp3403
sg63
g3038
sg56
(lp3404
g49
(g70
g51
NtRp3405
(dp3406
g54
(dp3407
g74
g75
ssg63
g3401
sg56
(lp3408
S'generic_patterns'
p3409
asbag49
(g70
g51
NtRp3410
(dp3411
g54
(dp3412
g81
g82
ssg63
g3401
sg56
(lp3413
S':'
asbag49
(g70
g51
NtRp3414
(dp3415
g54
(dp3416
sg63
g3401
sg56
(lp3417
g49
(g50
g51
NtRp3418
(dp3419
g54
(dp3420
g62
I5
ssg63
g3414
sg56
(lp3421
g49
(g58
g51
NtRp3422
(dp3423
g54
(dp3424
g62
I4
ssg63
Nsg56
(lp3425
sbasbasbasbag49
(g65
g51
NtRp3426
(dp3427
g54
(dp3428
sg63
g3038
sg56
(lp3429
g49
(g70
g51
NtRp3430
(dp3431
g54
(dp3432
g74
g75
ssg63
g3426
sg56
(lp3433
S'headers'
p3434
asbag49
(g70
g51
NtRp3435
(dp3436
g54
(dp3437
g81
g82
ssg63
g3426
sg56
(lp3438
S':'
asbag49
(g70
g51
NtRp3439
(dp3440
g54
(dp3441
sg63
g3426
sg56
(lp3442
g49
(g50
g51
NtRp3443
(dp3444
g54
(dp3445
g62
I5
ssg63
g3439
sg56
(lp3446
g49
(g58
g51
NtRp3447
(dp3448
g54
(dp3449
g62
I4
ssg63
Nsg56
(lp3450
g49
(g65
g51
NtRp3451
(dp3452
g54
(dp3453
sg63
g3447
sg56
(lp3454
g49
(g70
g51
NtRp3455
(dp3456
g54
(dp3457
g74
g75
ssg63
g3451
sg56
(lp3458
S'Cache-Control'
p3459
asbag49
(g70
g51
NtRp3460
(dp3461
g54
(dp3462
g81
g82
ssg63
g3451
sg56
(lp3463
S':'
asbag49
(g70
g51
NtRp3464
(dp3465
g54
(dp3466
sg63
g3451
sg56
(lp3467
g49
(g50
g51
NtRp3468
(dp3469
g54
(dp3470
g62
I4
ssg63
g3464
sg56
(lp3471
S'no-store, no-cache, must-revalidate, post-check=0, pre-check=0'
p3472
asbasbasbag49
(g65
g51
NtRp3473
(dp3474
g54
(dp3475
sg63
g3447
sg56
(lp3476
g49
(g70
g51
NtRp3477
(dp3478
g54
(dp3479
g74
g75
ssg63
g3473
sg56
(lp3480
S'Content-Type'
p3481
asbag49
(g70
g51
NtRp3482
(dp3483
g54
(dp3484
g81
g82
ssg63
g3473
sg56
(lp3485
S':'
asbag49
(g70
g51
NtRp3486
(dp3487
g54
(dp3488
sg63
g3473
sg56
(lp3489
g49
(g50
g51
NtRp3490
(dp3491
g54
(dp3492
g62
I4
ssg63
g3486
sg56
(lp3493
S'text/html; charset=utf-8'
p3494
asbasbasbag49
(g65
g51
NtRp3495
(dp3496
g54
(dp3497
sg63
g3447
sg56
(lp3498
g49
(g70
g51
NtRp3499
(dp3500
g54
(dp3501
g74
g75
ssg63
g3495
sg56
(lp3502
S'Expires'
p3503
asbag49
(g70
g51
NtRp3504
(dp3505
g54
(dp3506
g81
g82
ssg63
g3495
sg56
(lp3507
S':'
asbag49
(g70
g51
NtRp3508
(dp3509
g54
(dp3510
sg63
g3495
sg56
(lp3511
g49
(g50
g51
NtRp3512
(dp3513
g54
(dp3514
g62
I4
ssg63
g3508
sg56
(lp3515
S'Sun, 18 Mar 2012 02:29:51 GMT'
p3516
asbasbasbag49
(g65
g51
NtRp3517
(dp3518
g54
(dp3519
sg63
g3447
sg56
(lp3520
g49
(g70
g51
NtRp3521
(dp3522
g54
(dp3523
g74
g75
ssg63
g3517
sg56
(lp3524
S'Pragma'
p3525
asbag49
(g70
g51
NtRp3526
(dp3527
g54
(dp3528
g81
g82
ssg63
g3517
sg56
(lp3529
S':'
asbag49
(g70
g51
NtRp3530
(dp3531
g54
(dp3532
sg63
g3517
sg56
(lp3533
g49
(g50
g51
NtRp3534
(dp3535
g54
(dp3536
g62
I4
ssg63
g3530
sg56
(lp3537
S'no-cache'
p3538
asbasbasbag49
(g65
g51
NtRp3539
(dp3540
g54
(dp3541
sg63
g3447
sg56
(lp3542
g49
(g70
g51
NtRp3543
(dp3544
g54
(dp3545
g74
g75
ssg63
g3539
sg56
(lp3546
S'X-Powered-By'
p3547
asbag49
(g70
g51
NtRp3548
(dp3549
g54
(dp3550
g81
g82
ssg63
g3539
sg56
(lp3551
S':'
asbag49
(g70
g51
NtRp3552
(dp3553
g54
(dp3554
sg63
g3539
sg56
(lp3555
g49
(g50
g51
NtRp3556
(dp3557
g54
(dp3558
g62
I4
ssg63
g3552
sg56
(lp3559
S'web2py'
p3560
asbasbasbasbasbasbasbag49
(g65
g51
NtRp3561
(dp3562
g54
(dp3563
sg63
g3038
sg56
(lp3564
g49
(g70
g51
NtRp3565
(dp3566
g54
(dp3567
g74
g75
ssg63
g3561
sg56
(lp3568
S'menu'
p3569
asbag49
(g70
g51
NtRp3570
(dp3571
g54
(dp3572
g81
g82
ssg63
g3561
sg56
(lp3573
S':'
asbag49
(g70
g51
NtRp3574
(dp3575
g54
(dp3576
sg63
g3561
sg56
(lp3577
g49
(g50
g51
NtRp3578
(dp3579
g54
(dp3580
g62
I5
ssg63
g3574
sg56
(lp3581
g49
(g58
g51
NtRp3582
(dp3583
g54
(dp3584
g62
I4
ssg63
Nsg56
(lp3585
g49
(g65
g51
NtRp3586
(dp3587
g54
(dp3588
sg63
g3582
sg56
(lp3589
g49
(g70
g51
NtRp3590
(dp3591
g54
(dp3592
sg63
g3586
sg56
(lp3593
g49
(g50
g51
NtRp3594
(dp3595
g54
(dp3596
g62
I4
ssg63
g3590
sg56
(lp3597
g49
(g58
g51
NtRp3598
(dp3599
g54
(dp3600
g62
I3
ssg63
Nsg56
(lp3601
g49
(g65
g51
NtRp3602
(dp3603
g54
(dp3604
sg63
g3598
sg56
(lp3605
g49
(g70
g51
NtRp3606
(dp3607
g54
(dp3608
sg63
g3602
sg56
(lp3609
g49
(g50
g51
NtRp3610
(dp3611
g54
(dp3612
g62
I3
ssg63
g3606
sg56
(lp3613
cgluon.languages
lazyT_unpickle
p3614
(S's\x04\x00\x00\x00Site'
tRp3615
asbasbasbag49
(g65
g51
NtRp3616
(dp3617
g54
(dp3618
sg63
g3598
sg56
(lp3619
g49
(g70
g51
NtRp3620
(dp3621
g54
(dp3622
sg63
g3616
sg56
(lp3623
g49
(g50
g51
NtRp3624
(dp3625
g54
(dp3626
g62
I3
ssg63
g3620
sg56
(lp3627
g92
asbasbasbag49
(g65
g51
NtRp3628
(dp3629
g54
(dp3630
sg63
g3598
sg56
(lp3631
g49
(g70
g51
NtRp3632
(dp3633
g54
(dp3634
sg63
g3628
sg56
(lp3635
g49
(g50
g51
NtRp3636
(dp3637
g54
(dp3638
g62
I3
ssg63
g3632
sg56
(lp3639
S'/admin/default/site'
p3640
asbasbasbasbasbasbasbag49
(g65
g51
NtRp3641
(dp3642
g54
(dp3643
sg63
g3582
sg56
(lp3644
g49
(g70
g51
NtRp3645
(dp3646
g54
(dp3647
sg63
g3641
sg56
(lp3648
g49
(g50
g51
NtRp3649
(dp3650
g54
(dp3651
g62
I4
ssg63
g3645
sg56
(lp3652
g49
(g58
g51
NtRp3653
(dp3654
g54
(dp3655
g62
I3
ssg63
Nsg56
(lp3656
g49
(g65
g51
NtRp3657
(dp3658
g54
(dp3659
sg63
g3653
sg56
(lp3660
g49
(g70
g51
NtRp3661
(dp3662
g54
(dp3663
sg63
g3657
sg56
(lp3664
g49
(g50
g51
NtRp3665
(dp3666
g54
(dp3667
g62
I3
ssg63
g3661
sg56
(lp3668
g3614
(S's\x06\x00\x00\x00Logout'
tRp3669
asbasbasbag49
(g65
g51
NtRp3670
(dp3671
g54
(dp3672
sg63
g3653
sg56
(lp3673
g49
(g70
g51
NtRp3674
(dp3675
g54
(dp3676
sg63
g3670
sg56
(lp3677
g49
(g50
g51
NtRp3678
(dp3679
g54
(dp3680
g62
I3
ssg63
g3674
sg56
(lp3681
g92
asbasbasbag49
(g65
g51
NtRp3682
(dp3683
g54
(dp3684
sg63
g3653
sg56
(lp3685
g49
(g70
g51
NtRp3686
(dp3687
g54
(dp3688
sg63
g3682
sg56
(lp3689
g49
(g50
g51
NtRp3690
(dp3691
g54
(dp3692
g62
I3
ssg63
g3686
sg56
(lp3693
S'/admin/default/logout'
p3694
asbasbasbasbasbasbasbag49
(g65
g51
NtRp3695
(dp3696
g54
(dp3697
sg63
g3582
sg56
(lp3698
g49
(g70
g51
NtRp3699
(dp3700
g54
(dp3701
sg63
g3695
sg56
(lp3702
g49
(g50
g51
NtRp3703
(dp3704
g54
(dp3705
g62
I4
ssg63
g3699
sg56
(lp3706
g49
(g58
g51
NtRp3707
(dp3708
g54
(dp3709
g62
I3
ssg63
Nsg56
(lp3710
g49
(g65
g51
NtRp3711
(dp3712
g54
(dp3713
sg63
g3707
sg56
(lp3714
g49
(g70
g51
NtRp3715
(dp3716
g54
(dp3717
sg63
g3711
sg56
(lp3718
g49
(g50
g51
NtRp3719
(dp3720
g54
(dp3721
g62
I3
ssg63
g3715
sg56
(lp3722
g3614
(S's\x05\x00\x00\x00Debug'
tRp3723
asbasbasbag49
(g65
g51
NtRp3724
(dp3725
g54
(dp3726
sg63
g3707
sg56
(lp3727
g49
(g70
g51
NtRp3728
(dp3729
g54
(dp3730
sg63
g3724
sg56
(lp3731
g49
(g50
g51
NtRp3732
(dp3733
g54
(dp3734
g62
I3
ssg63
g3728
sg56
(lp3735
g92
asbasbasbag49
(g65
g51
NtRp3736
(dp3737
g54
(dp3738
sg63
g3707
sg56
(lp3739
g49
(g70
g51
NtRp3740
(dp3741
g54
(dp3742
sg63
g3736
sg56
(lp3743
g49
(g50
g51
NtRp3744
(dp3745
g54
(dp3746
g62
I3
ssg63
g3740
sg56
(lp3747
S'/admin/debug/interact'
p3748
asbasbasbasbasbasbasbag49
(g65
g51
NtRp3749
(dp3750
g54
(dp3751
sg63
g3582
sg56
(lp3752
g49
(g70
g51
NtRp3753
(dp3754
g54
(dp3755
sg63
g3749
sg56
(lp3756
g49
(g50
g51
NtRp3757
(dp3758
g54
(dp3759
g62
I4
ssg63
g3753
sg56
(lp3760
g49
(g58
g51
NtRp3761
(dp3762
g54
(dp3763
g62
I3
ssg63
Nsg56
(lp3764
g49
(g65
g51
NtRp3765
(dp3766
g54
(dp3767
sg63
g3761
sg56
(lp3768
g49
(g70
g51
NtRp3769
(dp3770
g54
(dp3771
sg63
g3765
sg56
(lp3772
g49
(g50
g51
NtRp3773
(dp3774
g54
(dp3775
g62
I3
ssg63
g3769
sg56
(lp3776
g3614
(S's\x04\x00\x00\x00Help'
tRp3777
asbasbasbag49
(g65
g51
NtRp3778
(dp3779
g54
(dp3780
sg63
g3761
sg56
(lp3781
g49
(g70
g51
NtRp3782
(dp3783
g54
(dp3784
sg63
g3778
sg56
(lp3785
g49
(g50
g51
NtRp3786
(dp3787
g54
(dp3788
g62
I3
ssg63
g3782
sg56
(lp3789
g92
asbasbasbag49
(g65
g51
NtRp3790
(dp3791
g54
(dp3792
sg63
g3761
sg56
(lp3793
g49
(g70
g51
NtRp3794
(dp3795
g54
(dp3796
sg63
g3790
sg56
(lp3797
g49
(g50
g51
NtRp3798
(dp3799
g54
(dp3800
g62
I3
ssg63
g3794
sg56
(lp3801
S'http://web2py.com/examples'
p3802
asbasbasbasbasbasbasbasbasbasbasbag49
(g65
g51
NtRp3803
(dp3804
g54
(dp3805
sg63
g3038
sg56
(lp3806
g49
(g70
g51
NtRp3807
(dp3808
g54
(dp3809
g74
g75
ssg63
g3803
sg56
(lp3810
S'meta'
p3811
asbag49
(g70
g51
NtRp3812
(dp3813
g54
(dp3814
g81
g82
ssg63
g3803
sg56
(lp3815
S':'
asbag49
(g70
g51
NtRp3816
(dp3817
g54
(dp3818
sg63
g3803
sg56
(lp3819
g49
(g50
g51
NtRp3820
(dp3821
g54
(dp3822
g62
I5
ssg63
g3816
sg56
(lp3823
g49
(g58
g51
NtRp3824
(dp3825
g54
(dp3826
g62
I4
ssg63
Nsg56
(lp3827
sbasbasbasbag49
(g65
g51
NtRp3828
(dp3829
g54
(dp3830
sg63
g3038
sg56
(lp3831
g49
(g70
g51
NtRp3832
(dp3833
g54
(dp3834
g74
g75
ssg63
g3828
sg56
(lp3835
S'postprocessing'
p3836
asbag49
(g70
g51
NtRp3837
(dp3838
g54
(dp3839
g81
g82
ssg63
g3828
sg56
(lp3840
S':'
asbag49
(g70
g51
NtRp3841
(dp3842
g54
(dp3843
sg63
g3828
sg56
(lp3844
g49
(g50
g51
NtRp3845
(dp3846
g54
(dp3847
g62
I5
ssg63
g3841
sg56
(lp3848
g49
(g58
g51
NtRp3849
(dp3850
g54
(dp3851
g62
I4
ssg63
Nsg56
(lp3852
sbasbasbasbag49
(g65
g51
NtRp3853
(dp3854
g54
(dp3855
sg63
g3038
sg56
(lp3856
g49
(g70
g51
NtRp3857
(dp3858
g54
(dp3859
g74
g75
ssg63
g3853
sg56
(lp3860
S'session_file'
p3861
asbag49
(g70
g51
NtRp3862
(dp3863
g54
(dp3864
g81
g82
ssg63
g3853
sg56
(lp3865
S':'
asbag49
(g70
g51
NtRp3866
(dp3867
g54
(dp3868
sg63
g3853
sg56
(lp3869
g49
(g50
g51
NtRp3870
(dp3871
g54
(dp3872
g62
I5
ssg63
g3866
sg56
(lp3873
S"<open file '/Users/udimilo/Documents/web2py/applications/admin/sessions/127.0.0.1-87c9be7c-30e4-46b7-99db-853ad51b457b', mode 'rb+' at 0x8e8b3c8>"
p3874
asbasbasbag49
(g65
g51
NtRp3875
(dp3876
g54
(dp3877
sg63
g3038
sg56
(lp3878
g49
(g70
g51
NtRp3879
(dp3880
g54
(dp3881
g74
g75
ssg63
g3875
sg56
(lp3882
S'session_filename'
p3883
asbag49
(g70
g51
NtRp3884
(dp3885
g54
(dp3886
g81
g82
ssg63
g3875
sg56
(lp3887
S':'
asbag49
(g70
g51
NtRp3888
(dp3889
g54
(dp3890
sg63
g3875
sg56
(lp3891
g49
(g50
g51
NtRp3892
(dp3893
g54
(dp3894
g62
I5
ssg63
g3888
sg56
(lp3895
S'/Users/udimilo/Documents/web2py/applications/admin/sessions/127.0.0.1-87c9be7c-30e4-46b7-99db-853ad51b457b'
p3896
asbasbasbag49
(g65
g51
NtRp3897
(dp3898
g54
(dp3899
sg63
g3038
sg56
(lp3900
g49
(g70
g51
NtRp3901
(dp3902
g54
(dp3903
g74
g75
ssg63
g3897
sg56
(lp3904
S'session_id'
p3905
asbag49
(g70
g51
NtRp3906
(dp3907
g54
(dp3908
g81
g82
ssg63
g3897
sg56
(lp3909
S':'
asbag49
(g70
g51
NtRp3910
(dp3911
g54
(dp3912
sg63
g3897
sg56
(lp3913
g49
(g50
g51
NtRp3914
(dp3915
g54
(dp3916
g62
I5
ssg63
g3910
sg56
(lp3917
S'127.0.0.1-87c9be7c-30e4-46b7-99db-853ad51b457b'
p3918
asbasbasbag49
(g65
g51
NtRp3919
(dp3920
g54
(dp3921
sg63
g3038
sg56
(lp3922
g49
(g70
g51
NtRp3923
(dp3924
g54
(dp3925
g74
g75
ssg63
g3919
sg56
(lp3926
S'session_id_name'
p3927
asbag49
(g70
g51
NtRp3928
(dp3929
g54
(dp3930
g81
g82
ssg63
g3919
sg56
(lp3931
S':'
asbag49
(g70
g51
NtRp3932
(dp3933
g54
(dp3934
sg63
g3919
sg56
(lp3935
g49
(g50
g51
NtRp3936
(dp3937
g54
(dp3938
g62
I5
ssg63
g3932
sg56
(lp3939
g3095
asbasbasbag49
(g65
g51
NtRp3940
(dp3941
g54
(dp3942
sg63
g3038
sg56
(lp3943
g49
(g70
g51
NtRp3944
(dp3945
g54
(dp3946
g74
g75
ssg63
g3940
sg56
(lp3947
S'session_locked'
p3948
asbag49
(g70
g51
NtRp3949
(dp3950
g54
(dp3951
g81
g82
ssg63
g3940
sg56
(lp3952
S':'
asbag49
(g70
g51
NtRp3953
(dp3954
g54
(dp3955
sg63
g3940
sg56
(lp3956
g49
(g50
g51
NtRp3957
(dp3958
g54
(dp3959
g62
I5
ssg63
g3953
sg56
(lp3960
g1487
asbasbasbag49
(g65
g51
NtRp3961
(dp3962
g54
(dp3963
sg63
g3038
sg56
(lp3964
g49
(g70
g51
NtRp3965
(dp3966
g54
(dp3967
g74
g75
ssg63
g3961
sg56
(lp3968
S'session_new'
p3969
asbag49
(g70
g51
NtRp3970
(dp3971
g54
(dp3972
g81
g82
ssg63
g3961
sg56
(lp3973
S':'
asbag49
(g70
g51
NtRp3974
(dp3975
g54
(dp3976
sg63
g3961
sg56
(lp3977
g49
(g50
g51
NtRp3978
(dp3979
g54
(dp3980
g62
I5
ssg63
g3974
sg56
(lp3981
g92
asbasbasbag49
(g65
g51
NtRp3982
(dp3983
g54
(dp3984
sg63
g3038
sg56
(lp3985
g49
(g70
g51
NtRp3986
(dp3987
g54
(dp3988
g74
g75
ssg63
g3982
sg56
(lp3989
S'status'
p3990
asbag49
(g70
g51
NtRp3991
(dp3992
g54
(dp3993
g81
g82
ssg63
g3982
sg56
(lp3994
S':'
asbag49
(g70
g51
NtRp3995
(dp3996
g54
(dp3997
sg63
g3982
sg56
(lp3998
g49
(g50
g51
NtRp3999
(dp4000
g54
(dp4001
g62
I5
ssg63
g3995
sg56
(lp4002
S'200'
p4003
asbasbasbag49
(g65
g51
NtRp4004
(dp4005
g54
(dp4006
sg63
g3038
sg56
(lp4007
g49
(g70
g51
NtRp4008
(dp4009
g54
(dp4010
g74
g75
ssg63
g4004
sg56
(lp4011
S'subtitle'
p4012
asbag49
(g70
g51
NtRp4013
(dp4014
g54
(dp4015
g81
g82
ssg63
g4004
sg56
(lp4016
S':'
asbag49
(g70
g51
NtRp4017
(dp4018
g54
(dp4019
sg63
g4004
sg56
(lp4020
g49
(g50
g51
NtRp4021
(dp4022
g54
(dp4023
g62
I5
ssg63
g4017
sg56
(lp4024
S'admin'
p4025
asbasbasbag49
(g65
g51
NtRp4026
(dp4027
g54
(dp4028
sg63
g3038
sg56
(lp4029
g49
(g70
g51
NtRp4030
(dp4031
g54
(dp4032
g74
g75
ssg63
g4026
sg56
(lp4033
S'title'
p4034
asbag49
(g70
g51
NtRp4035
(dp4036
g54
(dp4037
g81
g82
ssg63
g4026
sg56
(lp4038
S':'
asbag49
(g70
g51
NtRp4039
(dp4040
g54
(dp4041
sg63
g4026
sg56
(lp4042
g49
(g50
g51
NtRp4043
(dp4044
g54
(dp4045
g62
I5
ssg63
g4039
sg56
(lp4046
S'reload_routes '
p4047
asbasbasbag49
(g65
g51
NtRp4048
(dp4049
g54
(dp4050
sg63
g3038
sg56
(lp4051
g49
(g70
g51
NtRp4052
(dp4053
g54
(dp4054
g74
g75
ssg63
g4048
sg56
(lp4055
g2151
asbag49
(g70
g51
NtRp4056
(dp4057
g54
(dp4058
g81
g82
ssg63
g4048
sg56
(lp4059
S':'
asbag49
(g70
g51
NtRp4060
(dp4061
g54
(dp4062
sg63
g4048
sg56
(lp4063
g49
(g50
g51
NtRp4064
(dp4065
g54
(dp4066
g62
I5
ssg63
g4060
sg56
(lp4067
g2164
asbasbasbag49
(g65
g51
NtRp4068
(dp4069
g54
(dp4070
sg63
g3038
sg56
(lp4071
g49
(g70
g51
NtRp4072
(dp4073
g54
(dp4074
g74
g75
ssg63
g4068
sg56
(lp4075
S'view'
p4076
asbag49
(g70
g51
NtRp4077
(dp4078
g54
(dp4079
g81
g82
ssg63
g4068
sg56
(lp4080
S':'
asbag49
(g70
g51
NtRp4081
(dp4082
g54
(dp4083
sg63
g4068
sg56
(lp4084
g49
(g50
g51
NtRp4085
(dp4086
g54
(dp4087
g62
I5
ssg63
g4081
sg56
(lp4088
S'default/reload_routes.html'
p4089
asbasbasbasbasbsS'locals'
p4090
(dp4091
S'__builtins__'
p4092
S"{'ArithmeticError': <type 'exceptions.ArithmeticError'>, 'AssertionError': <type 'exceptions.AssertionError'>, 'AttributeError': <type 'exceptions.AttributeError'>, 'BaseException': <type 'exceptions.BaseException'>, 'DeprecationWarning': <type 'exceptions.DeprecationWarning'>, 'EOFError': <type 'exceptions.EOFError'>, 'Ellipsis': Ellipsis, 'EnvironmentError': <type 'exceptions.EnvironmentError'>, 'Exception': <type 'exceptions.Exception'>, 'False': False, ...}"
p4093
sS'default_function'
p4094
S"'index'"
p4095
sS'default_controller'
p4096
S"'default'"
p4097
sS'routes_app'
p4098
S"((r'/(?P<app>admin|app)\\b.*', r'\\g<app>'), ('(.*)', 'udi0312'), ('/?(.*)', 'udi0312'))"
p4099
sS'routes_in'
p4100
S"(('.*:/favicon.ico', '/examples/static/favicon.ico'), ('.*:/robots.txt', '/examples/static/robots.txt'), ('.*:/users', '/udi0312/users/index'), ('.*:/users/(?P<any>.*)', r'/udi0312/users/user/\\g<any>'), ('.*http://otherdomain.com.* (?P<any>.*)', r'/app/ctr\\g<any>'))"
p4101
sS'default_application'
p4102
S"'udi0312'"
p4103
sssS'traceback'
p4104
S'Traceback (most recent call last):\n  File "/users/udimilo/Documents/web2py/gluon/restricted.py", line 205, in restricted\n    exec ccode in environment\n  File "/Users/udimilo/Documents/web2py/applications/admin/controllers/default.py", line 1352, in <module>\n  File "/users/udimilo/Documents/web2py/gluon/globals.py", line 173, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/udimilo/Documents/web2py/applications/admin/controllers/default.py", line 1347, in reload_routes\n    gluon.rewrite.load()\n  File "/users/udimilo/Documents/web2py/gluon/rewrite.py", line 262, in load\n    exec (data + \'\\n\') in symbols\n  File "<string>", line 46, in <module>\nTypeError: \'tuple\' object is not callable\n'
p4105
s.